
6_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006b4c  08006b4c  00007b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd8  08006bd8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd8  08006bd8  00007bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006be0  08006be0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be0  08006be0  00007be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006be4  08006be4  00007be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006be8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000068  08006c50  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08006c50  00008394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109c5  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d2  00000000  00000000  00018a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  0001ad30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c51  00000000  00000000  0001bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a76  00000000  00000000  0001c951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011fe1  00000000  00000000  000443c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f49f6  00000000  00000000  000563a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ad9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a8  00000000  00000000  0014ade4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014f78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b34 	.word	0x08006b34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006b34 	.word	0x08006b34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

//Funkcja wywolywana po pojawieniu sie przerwania po przepelnieniu dowolnego licznika
//(Po przepelnieniu licznika wywolywane jest przerwanie)
//Funkcja obslugujaca przerwania po przepelnieniu dowolnego licznika:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	//Jeżeli przerwanie wywolane zostalo po przepelnieniu sie licznika TIM6:
	if(htim == &htim6) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a10      	ldr	r2, [pc, #64]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d104      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x1a>
		//Miganie dioda opiera sie o timer sprzetowy TIM6 i system przerwan
		//Program glowny nie jest blokowany.
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000570:	2120      	movs	r1, #32
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f001 f989 	bl	800188c <HAL_GPIO_TogglePin>
	}

	//Jeżeli przerwanie wywolane zostalo po przepelnieniu licznika TIM3:
	if(htim == &htim3) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a0c      	ldr	r2, [pc, #48]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d110      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x44>
		//Zapalenie 3 zewnetrznych diod na plytce stykowej:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2140      	movs	r1, #64	@ 0x40
 8000586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058a:	f001 f967 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000596:	f001 f961 	bl	800185c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2101      	movs	r1, #1
 800059e:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005a0:	f001 f95c 	bl	800185c <HAL_GPIO_WritePin>
	}

}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000168 	.word	0x20000168
 80005b0:	200000d0 	.word	0x200000d0
 80005b4:	48000400 	.word	0x48000400

080005b8 <HAL_TIM_OC_DelayElapsedCallback>:

//Funkcja obslugujaca przerwania generowanych przez poszczzegolne kanaly licznika
//(po przepelnieniu danego kanalu licznika - wartosc w parametrze pulse w konfiguracji):
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

	//Jezeli przerwanie zostalo wywolane przez kanaly licznika TIM3
	if(htim == &htim3) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d121      	bne.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
		switch(HAL_TIM_GetActiveChannel(&htim3)) {
 80005c8:	4812      	ldr	r0, [pc, #72]	@ (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005ca:	f003 ff43 	bl	8004454 <HAL_TIM_GetActiveChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d014      	beq.n	80005fe <HAL_TIM_OC_DelayElapsedCallback+0x46>
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	dc18      	bgt.n	800060a <HAL_TIM_OC_DelayElapsedCallback+0x52>
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d002      	beq.n	80005e2 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d007      	beq.n	80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x38>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_3:
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 80005e0:	e013      	b.n	800060a <HAL_TIM_OC_DelayElapsedCallback+0x52>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2140      	movs	r1, #64	@ 0x40
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ea:	f001 f937 	bl	800185c <HAL_GPIO_WritePin>
			break;
 80005ee:	e00d      	b.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2180      	movs	r1, #128	@ 0x80
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f8:	f001 f930 	bl	800185c <HAL_GPIO_WritePin>
			break;
 80005fc:	e006      	b.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000604:	f001 f92a 	bl	800185c <HAL_GPIO_WritePin>
			break;
 8000608:	e000      	b.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
			break;
 800060a:	bf00      	nop
		}
	}
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000d0 	.word	0x200000d0
 8000618:	48000400 	.word	0x48000400

0800061c <HAL_TIM_IC_CaptureCallback>:

volatile uint32_t captured_value;
//Funkcja wywolywana w przerwaniu po pomiarze czasu trwania impulsu(stanu niskiego) wyjscia
//enkodera
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

	//Jezeli przerwanie zostalo wywolane przez kanal timera TIM2:
	if(htim == &htim2) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a0b      	ldr	r2, [pc, #44]	@ (8000654 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d10e      	bne.n	800064a <HAL_TIM_IC_CaptureCallback+0x2e>
		switch(HAL_TIM_GetActiveChannel(&htim2)) {
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <HAL_TIM_IC_CaptureCallback+0x38>)
 800062e:	f003 ff11 	bl	8004454 <HAL_TIM_GetActiveChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	d107      	bne.n	8000648 <HAL_TIM_IC_CaptureCallback+0x2c>
		case HAL_TIM_ACTIVE_CHANNEL_1:
			//Odcytanie dlugosci impulsu z kanalu 1 timera TIM2:
			captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000638:	2100      	movs	r1, #0
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f003 feb2 	bl	80043a4 <HAL_TIM_ReadCapturedValue>
 8000640:	4603      	mov	r3, r0
 8000642:	4a05      	ldr	r2, [pc, #20]	@ (8000658 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000644:	6013      	str	r3, [r2, #0]
			break;
 8000646:	e000      	b.n	800064a <HAL_TIM_IC_CaptureCallback+0x2e>
		default:
			break;
 8000648:	bf00      	nop
		}

	}
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000084 	.word	0x20000084
 8000658:	2000023c 	.word	0x2000023c

0800065c <__io_putchar>:
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
}

//Przekierowanie komunikatów wysylanych przez printf na UART:
int __io_putchar(int ch)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b0a      	cmp	r3, #10
 8000668:	d102      	bne.n	8000670 <__io_putchar+0x14>
    __io_putchar('\r');
 800066a:	200d      	movs	r0, #13
 800066c:	f7ff fff6 	bl	800065c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000670:	1d39      	adds	r1, r7, #4
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	2201      	movs	r2, #1
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <__io_putchar+0x2c>)
 800067a:	f004 fdd3 	bl	8005224 <HAL_UART_Transmit>

  return 1;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200001b4 	.word	0x200001b4

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fdb2 	bl	80011fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f853 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 facd 	bl	8000c38 <MX_GPIO_Init>
  MX_TIM6_Init();
 800069e:	f000 fa63 	bl	8000b68 <MX_TIM6_Init>
  MX_TIM3_Init();
 80006a2:	f000 f93b 	bl	800091c <MX_TIM3_Init>
  MX_TIM4_Init();
 80006a6:	f000 f9cb 	bl	8000a40 <MX_TIM4_Init>
  MX_TIM2_Init();
 80006aa:	f000 f8ab 	bl	8000804 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006ae:	f000 fa93 	bl	8000bd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Uruchomienie licznika TIM6:
  HAL_TIM_Base_Start_IT(&htim6);
 80006b2:	481d      	ldr	r0, [pc, #116]	@ (8000728 <main+0x9c>)
 80006b4:	f002 fd04 	bl	80030c0 <HAL_TIM_Base_Start_IT>

  //Uruchomienie licznika TIM3:
  HAL_TIM_Base_Start_IT(&htim3);
 80006b8:	481c      	ldr	r0, [pc, #112]	@ (800072c <main+0xa0>)
 80006ba:	f002 fd01 	bl	80030c0 <HAL_TIM_Base_Start_IT>
  //Uruchomienie kanalow licznika TIM3 w trybie przerwan (przerwania sa obslugiwane w funkcji
  //HAL_TIM_OC_DelayElapsedCallback:
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80006be:	2100      	movs	r1, #0
 80006c0:	481a      	ldr	r0, [pc, #104]	@ (800072c <main+0xa0>)
 80006c2:	f002 fdcf 	bl	8003264 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	4818      	ldr	r0, [pc, #96]	@ (800072c <main+0xa0>)
 80006ca:	f002 fdcb 	bl	8003264 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 80006ce:	2108      	movs	r1, #8
 80006d0:	4816      	ldr	r0, [pc, #88]	@ (800072c <main+0xa0>)
 80006d2:	f002 fdc7 	bl	8003264 <HAL_TIM_OC_Start_IT>

  //Uruchomienie licznika TIM4:
  HAL_TIM_Base_Start_IT(&htim4);
 80006d6:	4816      	ldr	r0, [pc, #88]	@ (8000730 <main+0xa4>)
 80006d8:	f002 fcf2 	bl	80030c0 <HAL_TIM_Base_Start_IT>
  //Uruchomienie kanalow licznika TIM4 w trybie wyjscia PWM (kanaly licznika bezposrednio
  //steruja pinami). W konfiguracji sprzętowej (Pulse) mozna ustawic staly wspolczynnik
  //wypelnienia sygnalu PWM, natomiast w makrze __HAL_TIM_SET_COMPARE mozna sterowac
  //wspolczynnikiem wypelninia.:
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80006dc:	2100      	movs	r1, #0
 80006de:	4814      	ldr	r0, [pc, #80]	@ (8000730 <main+0xa4>)
 80006e0:	f002 ff76 	bl	80035d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80006e4:	2104      	movs	r1, #4
 80006e6:	4812      	ldr	r0, [pc, #72]	@ (8000730 <main+0xa4>)
 80006e8:	f002 ff72 	bl	80035d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80006ec:	2108      	movs	r1, #8
 80006ee:	4810      	ldr	r0, [pc, #64]	@ (8000730 <main+0xa4>)
 80006f0:	f002 ff6e 	bl	80035d0 <HAL_TIM_PWM_Start>

  //Uruchomienie licznika TIM2:
  HAL_TIM_Base_Start(&htim2);
 80006f4:	480f      	ldr	r0, [pc, #60]	@ (8000734 <main+0xa8>)
 80006f6:	f002 fc7b 	bl	8002ff0 <HAL_TIM_Base_Start>
  //Uruchomienie kanalu 1 licznika TIM2 w trybie wejscia dla sygnalu zewnetrznego w trybie przerwan:
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80006fa:	2100      	movs	r1, #0
 80006fc:	480d      	ldr	r0, [pc, #52]	@ (8000734 <main+0xa8>)
 80006fe:	f003 f8cf 	bl	80038a0 <HAL_TIM_IC_Start_IT>

  uint32_t old_value = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]

  int counter = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
		  printf("value = %lu\n", value);
	  }
	  */

	  //Wyswietlanie czasu trwania impulsu (stanu niskiego) enkodera:
	  if(captured_value != 0) {
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <main+0xac>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0fb      	beq.n	800070a <main+0x7e>

		  printf("value = %lu\n", captured_value);
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <main+0xac>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	4808      	ldr	r0, [pc, #32]	@ (800073c <main+0xb0>)
 800071a:	f005 fb9d 	bl	8005e58 <iprintf>
		  captured_value = 0;
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <main+0xac>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
	  if(captured_value != 0) {
 8000724:	e7f1      	b.n	800070a <main+0x7e>
 8000726:	bf00      	nop
 8000728:	20000168 	.word	0x20000168
 800072c:	200000d0 	.word	0x200000d0
 8000730:	2000011c 	.word	0x2000011c
 8000734:	20000084 	.word	0x20000084
 8000738:	2000023c 	.word	0x2000023c
 800073c:	08006b4c 	.word	0x08006b4c

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b096      	sub	sp, #88	@ 0x58
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2244      	movs	r2, #68	@ 0x44
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f005 fbd7 	bl	8005f02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000762:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000766:	f001 f8c9 	bl	80018fc <HAL_PWREx_ControlVoltageScaling>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000770:	f000 fac2 	bl	8000cf8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000774:	f001 f8a4 	bl	80018c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <SystemClock_Config+0xc0>)
 800077a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800077e:	4a20      	ldr	r2, [pc, #128]	@ (8000800 <SystemClock_Config+0xc0>)
 8000780:	f023 0318 	bic.w	r3, r3, #24
 8000784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000788:	2314      	movs	r3, #20
 800078a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000798:	2360      	movs	r3, #96	@ 0x60
 800079a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007a0:	2301      	movs	r3, #1
 80007a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007a8:	2328      	movs	r3, #40	@ 0x28
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ac:	2307      	movs	r3, #7
 80007ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 f8f3 	bl	80019a8 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007c8:	f000 fa96 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2303      	movs	r3, #3
 80007d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	2104      	movs	r1, #4
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fcbb 	bl	8002160 <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007f0:	f000 fa82 	bl	8000cf8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007f4:	f002 f9c2 	bl	8002b7c <HAL_RCCEx_EnableMSIPLLMode>
}
 80007f8:	bf00      	nop
 80007fa:	3758      	adds	r7, #88	@ 0x58
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40021000 	.word	0x40021000

08000804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b090      	sub	sp, #64	@ 0x40
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000840:	4b35      	ldr	r3, [pc, #212]	@ (8000918 <MX_TIM2_Init+0x114>)
 8000842:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000846:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000848:	4b33      	ldr	r3, [pc, #204]	@ (8000918 <MX_TIM2_Init+0x114>)
 800084a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800084e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000850:	4b31      	ldr	r3, [pc, #196]	@ (8000918 <MX_TIM2_Init+0x114>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000856:	4b30      	ldr	r3, [pc, #192]	@ (8000918 <MX_TIM2_Init+0x114>)
 8000858:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800085c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085e:	4b2e      	ldr	r3, [pc, #184]	@ (8000918 <MX_TIM2_Init+0x114>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000864:	4b2c      	ldr	r3, [pc, #176]	@ (8000918 <MX_TIM2_Init+0x114>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800086a:	482b      	ldr	r0, [pc, #172]	@ (8000918 <MX_TIM2_Init+0x114>)
 800086c:	f002 fb68 	bl	8002f40 <HAL_TIM_Base_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000876:	f000 fa3f 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800087e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000880:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000884:	4619      	mov	r1, r3
 8000886:	4824      	ldr	r0, [pc, #144]	@ (8000918 <MX_TIM2_Init+0x114>)
 8000888:	f003 fc80 	bl	800418c <HAL_TIM_ConfigClockSource>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000892:	f000 fa31 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000896:	4820      	ldr	r0, [pc, #128]	@ (8000918 <MX_TIM2_Init+0x114>)
 8000898:	f002 ffa0 	bl	80037dc <HAL_TIM_IC_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80008a2:	f000 fa29 	bl	8000cf8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80008a6:	2304      	movs	r3, #4
 80008a8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80008aa:	2340      	movs	r3, #64	@ 0x40
 80008ac:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4816      	ldr	r0, [pc, #88]	@ (8000918 <MX_TIM2_Init+0x114>)
 80008be:	f003 fd2e 	bl	800431e <HAL_TIM_SlaveConfigSynchro>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 80008c8:	f000 fa16 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	480f      	ldr	r0, [pc, #60]	@ (8000918 <MX_TIM2_Init+0x114>)
 80008dc:	f004 fbae 	bl	800503c <HAL_TIMEx_MasterConfigSynchronization>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80008e6:	f000 fa07 	bl	8000cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008ee:	2301      	movs	r3, #1
 80008f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80008f6:	230f      	movs	r3, #15
 80008f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_TIM2_Init+0x114>)
 8000902:	f003 fa93 	bl	8003e2c <HAL_TIM_IC_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x10c>
  {
    Error_Handler();
 800090c:	f000 f9f4 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3740      	adds	r7, #64	@ 0x40
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000084 	.word	0x20000084

0800091c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	@ 0x38
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
 800094a:	615a      	str	r2, [r3, #20]
 800094c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800094e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 8000950:	4a3a      	ldr	r2, [pc, #232]	@ (8000a3c <MX_TIM3_Init+0x120>)
 8000952:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000954:	4b38      	ldr	r3, [pc, #224]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 8000956:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800095a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b36      	ldr	r3, [pc, #216]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000962:	4b35      	ldr	r3, [pc, #212]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 8000964:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000968:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b33      	ldr	r3, [pc, #204]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b31      	ldr	r3, [pc, #196]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000976:	4830      	ldr	r0, [pc, #192]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 8000978:	f002 fae2 	bl	8002f40 <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000982:	f000 f9b9 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800098c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000990:	4619      	mov	r1, r3
 8000992:	4829      	ldr	r0, [pc, #164]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 8000994:	f003 fbfa 	bl	800418c <HAL_TIM_ConfigClockSource>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800099e:	f000 f9ab 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80009a2:	4825      	ldr	r0, [pc, #148]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 80009a4:	f002 fbfc 	bl	80031a0 <HAL_TIM_OC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80009ae:	f000 f9a3 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	481d      	ldr	r0, [pc, #116]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 80009c2:	f004 fb3b 	bl	800503c <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80009cc:	f000 f994 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500;
 80009d4:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80009d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	4619      	mov	r1, r3
 80009e8:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 80009ea:	f003 f9a5 	bl	8003d38 <HAL_TIM_OC_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80009f4:	f000 f980 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 80009f8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80009fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009fe:	463b      	mov	r3, r7
 8000a00:	2204      	movs	r2, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 8000a06:	f003 f997 	bl	8003d38 <HAL_TIM_OC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000a10:	f000 f972 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.Pulse = 7500;
 8000a14:	f641 534c 	movw	r3, #7500	@ 0x1d4c
 8000a18:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_TIM3_Init+0x11c>)
 8000a22:	f003 f989 	bl	8003d38 <HAL_TIM_OC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0x114>
  {
    Error_Handler();
 8000a2c:	f000 f964 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3738      	adds	r7, #56	@ 0x38
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000d0 	.word	0x200000d0
 8000a3c:	40000400 	.word	0x40000400

08000a40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	@ 0x38
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a72:	4b3b      	ldr	r3, [pc, #236]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000a74:	4a3b      	ldr	r2, [pc, #236]	@ (8000b64 <MX_TIM4_Init+0x124>)
 8000a76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000a78:	4b39      	ldr	r3, [pc, #228]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000a7a:	224f      	movs	r2, #79	@ 0x4f
 8000a7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b38      	ldr	r3, [pc, #224]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000a84:	4b36      	ldr	r3, [pc, #216]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000a86:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b34      	ldr	r3, [pc, #208]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b33      	ldr	r3, [pc, #204]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a98:	4831      	ldr	r0, [pc, #196]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000a9a:	f002 fa51 	bl	8002f40 <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000aa4:	f000 f928 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000aae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	482a      	ldr	r0, [pc, #168]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000ab6:	f003 fb69 	bl	800418c <HAL_TIM_ConfigClockSource>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000ac0:	f000 f91a 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ac4:	4826      	ldr	r0, [pc, #152]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000ac6:	f002 fd21 	bl	800350c <HAL_TIM_PWM_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ad0:	f000 f912 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481f      	ldr	r0, [pc, #124]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000ae4:	f004 faaa 	bl	800503c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000aee:	f000 f903 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af2:	2360      	movs	r3, #96	@ 0x60
 8000af4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000af6:	2332      	movs	r3, #50	@ 0x32
 8000af8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000afa:	2302      	movs	r3, #2
 8000afc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b02:	463b      	mov	r3, r7
 8000b04:	2200      	movs	r2, #0
 8000b06:	4619      	mov	r1, r3
 8000b08:	4815      	ldr	r0, [pc, #84]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000b0a:	f003 fa2b 	bl	8003f64 <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b14:	f000 f8f0 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8000b18:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2204      	movs	r2, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	480e      	ldr	r0, [pc, #56]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000b26:	f003 fa1d 	bl	8003f64 <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8000b30:	f000 f8e2 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8000b34:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b38:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000b42:	f003 fa0f 	bl	8003f64 <HAL_TIM_PWM_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8000b4c:	f000 f8d4 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b50:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <MX_TIM4_Init+0x120>)
 8000b52:	f000 f991 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 8000b56:	bf00      	nop
 8000b58:	3738      	adds	r7, #56	@ 0x38
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000011c 	.word	0x2000011c
 8000b64:	40000800 	.word	0x40000800

08000b68 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_TIM6_Init+0x68>)
 8000b7a:	4a16      	ldr	r2, [pc, #88]	@ (8000bd4 <MX_TIM6_Init+0x6c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_TIM6_Init+0x68>)
 8000b80:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b84:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <MX_TIM6_Init+0x68>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <MX_TIM6_Init+0x68>)
 8000b8e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000b92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <MX_TIM6_Init+0x68>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_TIM6_Init+0x68>)
 8000b9c:	f002 f9d0 	bl	8002f40 <HAL_TIM_Base_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000ba6:	f000 f8a7 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <MX_TIM6_Init+0x68>)
 8000bb8:	f004 fa40 	bl	800503c <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000bc2:	f000 f899 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000168 	.word	0x20000168
 8000bd4:	40001000 	.word	0x40001000

08000bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000bde:	4a15      	ldr	r2, [pc, #84]	@ (8000c34 <MX_USART2_UART_Init+0x5c>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART2_UART_Init+0x58>)
 8000c1c:	f004 fab4 	bl	8005188 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c26:	f000 f867 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001b4 	.word	0x200001b4
 8000c34:	40004400 	.word	0x40004400

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	4b28      	ldr	r3, [pc, #160]	@ (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	4a27      	ldr	r2, [pc, #156]	@ (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5a:	4b25      	ldr	r3, [pc, #148]	@ (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	4a21      	ldr	r2, [pc, #132]	@ (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	21e0      	movs	r1, #224	@ 0xe0
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9e:	f000 fddd 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <MX_GPIO_Init+0xbc>)
 8000ca8:	f000 fdd8 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1_Pin|LED2_Pin;
 8000cac:	23e0      	movs	r3, #224	@ 0xe0
 8000cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc6:	f000 fc1f 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <MX_GPIO_Init+0xbc>)
 8000ce2:	f000 fc11 	bl	8001508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000400 	.word	0x48000400

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d16:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d26:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	@ 0x30
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d6c:	d132      	bne.n	8000dd4 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	4a3d      	ldr	r2, [pc, #244]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b38      	ldr	r3, [pc, #224]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	4a37      	ldr	r2, [pc, #220]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d92:	4b35      	ldr	r3, [pc, #212]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000db0:	2301      	movs	r3, #1
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbe:	f000 fba3 	bl	8001508 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210a      	movs	r1, #10
 8000dc6:	201c      	movs	r0, #28
 8000dc8:	f000 fb67 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dcc:	201c      	movs	r0, #28
 8000dce:	f000 fb80 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000dd2:	e044      	b.n	8000e5e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a24      	ldr	r2, [pc, #144]	@ (8000e6c <HAL_TIM_Base_MspInit+0x120>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d114      	bne.n	8000e08 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dde:	4b22      	ldr	r3, [pc, #136]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de2:	4a21      	ldr	r2, [pc, #132]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dea:	4b1f      	ldr	r3, [pc, #124]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2109      	movs	r1, #9
 8000dfa:	201d      	movs	r0, #29
 8000dfc:	f000 fb4d 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e00:	201d      	movs	r0, #29
 8000e02:	f000 fb66 	bl	80014d2 <HAL_NVIC_EnableIRQ>
}
 8000e06:	e02a      	b.n	8000e5e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a18      	ldr	r2, [pc, #96]	@ (8000e70 <HAL_TIM_Base_MspInit+0x124>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d10c      	bne.n	8000e2c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e16:	4a14      	ldr	r2, [pc, #80]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
}
 8000e2a:	e018      	b.n	8000e5e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM6)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <HAL_TIM_Base_MspInit+0x128>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d113      	bne.n	8000e5e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <HAL_TIM_Base_MspInit+0x11c>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	210a      	movs	r1, #10
 8000e52:	2036      	movs	r0, #54	@ 0x36
 8000e54:	f000 fb21 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e58:	2036      	movs	r0, #54	@ 0x36
 8000e5a:	f000 fb3a 	bl	80014d2 <HAL_NVIC_EnableIRQ>
}
 8000e5e:	bf00      	nop
 8000e60:	3730      	adds	r7, #48	@ 0x30
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40000400 	.word	0x40000400
 8000e70:	40000800 	.word	0x40000800
 8000e74:	40001000 	.word	0x40001000

08000e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a11      	ldr	r2, [pc, #68]	@ (8000edc <HAL_TIM_MspPostInit+0x64>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d11c      	bne.n	8000ed4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_TIM_MspPostInit+0x68>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ee0 <HAL_TIM_MspPostInit+0x68>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <HAL_TIM_MspPostInit+0x68>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000eb2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000eb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <HAL_TIM_MspPostInit+0x6c>)
 8000ed0:	f000 fb1a 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40000800 	.word	0x40000800
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	48000400 	.word	0x48000400

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0ac      	sub	sp, #176	@ 0xb0
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2288      	movs	r2, #136	@ 0x88
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f004 fffa 	bl	8005f02 <memset>
  if(huart->Instance==USART2)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a21      	ldr	r2, [pc, #132]	@ (8000f98 <HAL_UART_MspInit+0xb0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d13b      	bne.n	8000f90 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4618      	mov	r0, r3
 8000f26:	f001 fb3f 	bl	80025a8 <HAL_RCCEx_PeriphCLKConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f30:	f7ff fee2 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f34:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f38:	4a18      	ldr	r2, [pc, #96]	@ (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f40:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f50:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f58:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <HAL_UART_MspInit+0xb4>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f64:	230c      	movs	r3, #12
 8000f66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8c:	f000 fabc 	bl	8001508 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f90:	bf00      	nop
 8000f92:	37b0      	adds	r7, #176	@ 0xb0
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40004400 	.word	0x40004400
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff6:	f000 f955 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <TIM2_IRQHandler+0x10>)
 8001006:	f002 fd95 	bl	8003b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000084 	.word	0x20000084

08001014 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <TIM3_IRQHandler+0x10>)
 800101a:	f002 fd8b 	bl	8003b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000d0 	.word	0x200000d0

08001028 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <TIM6_DAC_IRQHandler+0x10>)
 800102e:	f002 fd81 	bl	8003b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000168 	.word	0x20000168

0800103c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e00a      	b.n	8001064 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104e:	f3af 8000 	nop.w
 8001052:	4601      	mov	r1, r0
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	b2ca      	uxtb	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf0      	blt.n	800104e <_read+0x12>
  }

  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	e009      	b.n	800109c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fae3 	bl	800065c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbf1      	blt.n	8001088 <_write+0x12>
  }
  return len;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_close>:

int _close(int file)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010d6:	605a      	str	r2, [r3, #4]
  return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <_isatty>:

int _isatty(int file)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	@ (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f004 ff2a 	bl	8005fa0 <__errno>
 800114c:	4603      	mov	r3, r0
 800114e:	220c      	movs	r2, #12
 8001150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	@ (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20018000 	.word	0x20018000
 8001178:	00000400 	.word	0x00000400
 800117c:	20000240 	.word	0x20000240
 8001180:	20000398 	.word	0x20000398

08001184 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ac:	f7ff ffea 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011b2:	490d      	ldr	r1, [pc, #52]	@ (80011e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b4:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <LoopForever+0xe>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c8:	4c0a      	ldr	r4, [pc, #40]	@ (80011f4 <LoopForever+0x16>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d6:	f004 fee9 	bl	8005fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011da:	f7ff fa57 	bl	800068c <main>

080011de <LoopForever>:

LoopForever:
    b LoopForever
 80011de:	e7fe      	b.n	80011de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011ec:	08006be8 	.word	0x08006be8
  ldr r2, =_sbss
 80011f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011f4:	20000394 	.word	0x20000394

080011f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC1_2_IRQHandler>

080011fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f93d 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800120a:	200f      	movs	r0, #15
 800120c:	f000 f80e 	bl	800122c <HAL_InitTick>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	e001      	b.n	8001220 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800121c:	f7ff fd72 	bl	8000d04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001220:	79fb      	ldrb	r3, [r7, #7]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_InitTick+0x6c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d023      	beq.n	8001288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <HAL_InitTick+0x70>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_InitTick+0x6c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f949 	bl	80014ee <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10f      	bne.n	8001282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d809      	bhi.n	800127c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f913 	bl	800149a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <HAL_InitTick+0x74>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e007      	b.n	800128c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e004      	b.n	800128c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e001      	b.n	800128c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000244 	.word	0x20000244

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000244 	.word	0x20000244

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	@ (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	@ (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	@ (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	@ 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	@ 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f7ff ff8e 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff29 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff3e 	bl	800132c <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff8e 	bl	80013d8 <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff31 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001516:	e17f      	b.n	8001818 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 8171 	beq.w	8001812 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b01      	cmp	r3, #1
 800153a:	d005      	beq.n	8001548 <HAL_GPIO_Init+0x40>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d130      	bne.n	80015aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800157e:	2201      	movs	r2, #1
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	f003 0201 	and.w	r2, r3, #1
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d118      	bne.n	80015e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015bc:	2201      	movs	r2, #1
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	08db      	lsrs	r3, r3, #3
 80015d2:	f003 0201 	and.w	r2, r3, #1
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d017      	beq.n	8001624 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d123      	bne.n	8001678 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	08da      	lsrs	r2, r3, #3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3208      	adds	r2, #8
 8001638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	6939      	ldr	r1, [r7, #16]
 8001674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0203 	and.w	r2, r3, #3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80ac 	beq.w	8001812 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001838 <HAL_GPIO_Init+0x330>)
 80016bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016be:	4a5e      	ldr	r2, [pc, #376]	@ (8001838 <HAL_GPIO_Init+0x330>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001838 <HAL_GPIO_Init+0x330>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016d2:	4a5a      	ldr	r2, [pc, #360]	@ (800183c <HAL_GPIO_Init+0x334>)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	220f      	movs	r2, #15
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016fc:	d025      	beq.n	800174a <HAL_GPIO_Init+0x242>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4f      	ldr	r2, [pc, #316]	@ (8001840 <HAL_GPIO_Init+0x338>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01f      	beq.n	8001746 <HAL_GPIO_Init+0x23e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4e      	ldr	r2, [pc, #312]	@ (8001844 <HAL_GPIO_Init+0x33c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d019      	beq.n	8001742 <HAL_GPIO_Init+0x23a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4d      	ldr	r2, [pc, #308]	@ (8001848 <HAL_GPIO_Init+0x340>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d013      	beq.n	800173e <HAL_GPIO_Init+0x236>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4c      	ldr	r2, [pc, #304]	@ (800184c <HAL_GPIO_Init+0x344>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00d      	beq.n	800173a <HAL_GPIO_Init+0x232>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4b      	ldr	r2, [pc, #300]	@ (8001850 <HAL_GPIO_Init+0x348>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d007      	beq.n	8001736 <HAL_GPIO_Init+0x22e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4a      	ldr	r2, [pc, #296]	@ (8001854 <HAL_GPIO_Init+0x34c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d101      	bne.n	8001732 <HAL_GPIO_Init+0x22a>
 800172e:	2306      	movs	r3, #6
 8001730:	e00c      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001732:	2307      	movs	r3, #7
 8001734:	e00a      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001736:	2305      	movs	r3, #5
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x244>
 800173a:	2304      	movs	r3, #4
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x244>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x244>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x244>
 800174a:	2300      	movs	r3, #0
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800175c:	4937      	ldr	r1, [pc, #220]	@ (800183c <HAL_GPIO_Init+0x334>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800176a:	4b3b      	ldr	r3, [pc, #236]	@ (8001858 <HAL_GPIO_Init+0x350>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800178e:	4a32      	ldr	r2, [pc, #200]	@ (8001858 <HAL_GPIO_Init+0x350>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001794:	4b30      	ldr	r3, [pc, #192]	@ (8001858 <HAL_GPIO_Init+0x350>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017b8:	4a27      	ldr	r2, [pc, #156]	@ (8001858 <HAL_GPIO_Init+0x350>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <HAL_GPIO_Init+0x350>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <HAL_GPIO_Init+0x350>)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <HAL_GPIO_Init+0x350>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800180c:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <HAL_GPIO_Init+0x350>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	f47f ae78 	bne.w	8001518 <HAL_GPIO_Init+0x10>
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000
 8001840:	48000400 	.word	0x48000400
 8001844:	48000800 	.word	0x48000800
 8001848:	48000c00 	.word	0x48000c00
 800184c:	48001000 	.word	0x48001000
 8001850:	48001400 	.word	0x48001400
 8001854:	48001800 	.word	0x48001800
 8001858:	40010400 	.word	0x40010400

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001878:	e002      	b.n	8001880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43d9      	mvns	r1, r3
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	400b      	ands	r3, r1
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	619a      	str	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000

080018e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018e4:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40007000 	.word	0x40007000

080018fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800190a:	d130      	bne.n	800196e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800190c:	4b23      	ldr	r3, [pc, #140]	@ (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001918:	d038      	beq.n	800198c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800191a:	4b20      	ldr	r3, [pc, #128]	@ (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001922:	4a1e      	ldr	r2, [pc, #120]	@ (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001924:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001928:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2232      	movs	r2, #50	@ 0x32
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	4a1b      	ldr	r2, [pc, #108]	@ (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0c9b      	lsrs	r3, r3, #18
 800193c:	3301      	adds	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001940:	e002      	b.n	8001948 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3b01      	subs	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001954:	d102      	bne.n	800195c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f2      	bne.n	8001942 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001968:	d110      	bne.n	800198c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e00f      	b.n	800198e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800197a:	d007      	beq.n	800198c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800197c:	4b07      	ldr	r3, [pc, #28]	@ (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001984:	4a05      	ldr	r2, [pc, #20]	@ (800199c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001986:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800198a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40007000 	.word	0x40007000
 80019a0:	20000000 	.word	0x20000000
 80019a4:	431bde83 	.word	0x431bde83

080019a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e3ca      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ba:	4b97      	ldr	r3, [pc, #604]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c4:	4b94      	ldr	r3, [pc, #592]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80e4 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_RCC_OscConfig+0x4a>
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b0c      	cmp	r3, #12
 80019e6:	f040 808b 	bne.w	8001b00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	f040 8087 	bne.w	8001b00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f2:	4b89      	ldr	r3, [pc, #548]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x62>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e3a2      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1a      	ldr	r2, [r3, #32]
 8001a0e:	4b82      	ldr	r3, [pc, #520]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HAL_RCC_OscConfig+0x7c>
 8001a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a22:	e005      	b.n	8001a30 <HAL_RCC_OscConfig+0x88>
 8001a24:	4b7c      	ldr	r3, [pc, #496]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d223      	bcs.n	8001a7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fd55 	bl	80024e8 <RCC_SetFlashLatencyFromMSIRange>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e383      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a48:	4b73      	ldr	r3, [pc, #460]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a72      	ldr	r2, [pc, #456]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	f043 0308 	orr.w	r3, r3, #8
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b70      	ldr	r3, [pc, #448]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	496d      	ldr	r1, [pc, #436]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a66:	4b6c      	ldr	r3, [pc, #432]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	4968      	ldr	r1, [pc, #416]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
 8001a7a:	e025      	b.n	8001ac8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7c:	4b66      	ldr	r3, [pc, #408]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a65      	ldr	r2, [pc, #404]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b63      	ldr	r3, [pc, #396]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4960      	ldr	r1, [pc, #384]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	495b      	ldr	r1, [pc, #364]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d109      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 fd15 	bl	80024e8 <RCC_SetFlashLatencyFromMSIRange>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e343      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ac8:	f000 fc4a 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b52      	ldr	r3, [pc, #328]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	4950      	ldr	r1, [pc, #320]	@ (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c20 <HAL_RCC_OscConfig+0x278>)
 8001ae6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c24 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fb9d 	bl	800122c <HAL_InitTick>
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d052      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	e327      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d032      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b08:	4b43      	ldr	r3, [pc, #268]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a42      	ldr	r2, [pc, #264]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fbda 	bl	80012cc <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fbd6 	bl	80012cc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e310      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3a:	4b37      	ldr	r3, [pc, #220]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a36      	ldr	r2, [pc, #216]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b34      	ldr	r3, [pc, #208]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4931      	ldr	r1, [pc, #196]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b58:	4b2f      	ldr	r3, [pc, #188]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	492c      	ldr	r1, [pc, #176]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	e01a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a29      	ldr	r2, [pc, #164]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fba7 	bl	80012cc <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b82:	f7ff fba3 	bl	80012cc <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e2dd      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b94:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x1da>
 8001ba0:	e000      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ba2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d074      	beq.n	8001c9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d005      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x21a>
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	d10e      	bne.n	8001bda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d10b      	bne.n	8001bda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc2:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d064      	beq.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d160      	bne.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e2ba      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x24a>
 8001be4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0b      	ldr	r2, [pc, #44]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e026      	b.n	8001c40 <HAL_RCC_OscConfig+0x298>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bfa:	d115      	bne.n	8001c28 <HAL_RCC_OscConfig+0x280>
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001c02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a02      	ldr	r2, [pc, #8]	@ (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	e014      	b.n	8001c40 <HAL_RCC_OscConfig+0x298>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08006b5c 	.word	0x08006b5c
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000004 	.word	0x20000004
 8001c28:	4ba0      	ldr	r3, [pc, #640]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a9f      	ldr	r2, [pc, #636]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b9d      	ldr	r3, [pc, #628]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a9c      	ldr	r2, [pc, #624]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff fb40 	bl	80012cc <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fb3c 	bl	80012cc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e276      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c62:	4b92      	ldr	r3, [pc, #584]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x2a8>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff fb2c 	bl	80012cc <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff fb28 	bl	80012cc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e262      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8a:	4b88      	ldr	r3, [pc, #544]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2d0>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d060      	beq.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x310>
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d119      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d116      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb8:	4b7c      	ldr	r3, [pc, #496]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x328>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e23f      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b76      	ldr	r3, [pc, #472]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	4973      	ldr	r1, [pc, #460]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce4:	e040      	b.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d023      	beq.n	8001d36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cee:	4b6f      	ldr	r3, [pc, #444]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6e      	ldr	r2, [pc, #440]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fae7 	bl	80012cc <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff fae3 	bl	80012cc <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e21d      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d14:	4b65      	ldr	r3, [pc, #404]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b62      	ldr	r3, [pc, #392]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	495f      	ldr	r1, [pc, #380]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e018      	b.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d36:	4b5d      	ldr	r3, [pc, #372]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff fac3 	bl	80012cc <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fabf 	bl	80012cc <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1f9      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d5c:	4b53      	ldr	r3, [pc, #332]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d03c      	beq.n	8001dee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01c      	beq.n	8001db6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d82:	4a4a      	ldr	r2, [pc, #296]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8c:	f7ff fa9e 	bl	80012cc <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d94:	f7ff fa9a 	bl	80012cc <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e1d4      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da6:	4b41      	ldr	r3, [pc, #260]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0ef      	beq.n	8001d94 <HAL_RCC_OscConfig+0x3ec>
 8001db4:	e01b      	b.n	8001dee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fa81 	bl	80012cc <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dce:	f7ff fa7d 	bl	80012cc <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1b7      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de0:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ef      	bne.n	8001dce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80a6 	beq.w	8001f48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e00:	4b2a      	ldr	r3, [pc, #168]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10d      	bne.n	8001e28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e10:	4a26      	ldr	r2, [pc, #152]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e18:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e24:	2301      	movs	r3, #1
 8001e26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e28:	4b21      	ldr	r3, [pc, #132]	@ (8001eb0 <HAL_RCC_OscConfig+0x508>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d118      	bne.n	8001e66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e34:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb0 <HAL_RCC_OscConfig+0x508>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb0 <HAL_RCC_OscConfig+0x508>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e40:	f7ff fa44 	bl	80012cc <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e48:	f7ff fa40 	bl	80012cc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e17a      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_RCC_OscConfig+0x508>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d108      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4d8>
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e7e:	e029      	b.n	8001ed4 <HAL_RCC_OscConfig+0x52c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d115      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x50c>
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8e:	4a07      	ldr	r2, [pc, #28]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9e:	4a03      	ldr	r2, [pc, #12]	@ (8001eac <HAL_RCC_OscConfig+0x504>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ea8:	e014      	b.n	8001ed4 <HAL_RCC_OscConfig+0x52c>
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eba:	4a9b      	ldr	r2, [pc, #620]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec4:	4b98      	ldr	r3, [pc, #608]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eca:	4a97      	ldr	r2, [pc, #604]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d016      	beq.n	8001f0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7ff f9f6 	bl	80012cc <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff f9f2 	bl	80012cc <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e12a      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efa:	4b8b      	ldr	r3, [pc, #556]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0ed      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x53c>
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7ff f9df 	bl	80012cc <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7ff f9db 	bl	80012cc <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e113      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f28:	4b7f      	ldr	r3, [pc, #508]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1ed      	bne.n	8001f12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d105      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3c:	4b7a      	ldr	r3, [pc, #488]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	4a79      	ldr	r2, [pc, #484]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80fe 	beq.w	800214e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	f040 80d0 	bne.w	80020fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f5c:	4b72      	ldr	r3, [pc, #456]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d130      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d127      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d11f      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f9c:	2a07      	cmp	r2, #7
 8001f9e:	bf14      	ite	ne
 8001fa0:	2201      	movne	r2, #1
 8001fa2:	2200      	moveq	r2, #0
 8001fa4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d113      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d109      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	085b      	lsrs	r3, r3, #1
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d06e      	beq.n	80020b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b0c      	cmp	r3, #12
 8001fd6:	d069      	beq.n	80020ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fd8:	4b53      	ldr	r3, [pc, #332]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fe4:	4b50      	ldr	r3, [pc, #320]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0ad      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a4b      	ldr	r2, [pc, #300]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8001ffa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ffe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002000:	f7ff f964 	bl	80012cc <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff f960 	bl	80012cc <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e09a      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201a:	4b43      	ldr	r3, [pc, #268]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002026:	4b40      	ldr	r3, [pc, #256]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	4b40      	ldr	r3, [pc, #256]	@ (800212c <HAL_RCC_OscConfig+0x784>)
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002036:	3a01      	subs	r2, #1
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	4311      	orrs	r1, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002040:	0212      	lsls	r2, r2, #8
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002048:	0852      	lsrs	r2, r2, #1
 800204a:	3a01      	subs	r2, #1
 800204c:	0552      	lsls	r2, r2, #21
 800204e:	4311      	orrs	r1, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002054:	0852      	lsrs	r2, r2, #1
 8002056:	3a01      	subs	r2, #1
 8002058:	0652      	lsls	r2, r2, #25
 800205a:	4311      	orrs	r1, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002060:	0912      	lsrs	r2, r2, #4
 8002062:	0452      	lsls	r2, r2, #17
 8002064:	430a      	orrs	r2, r1
 8002066:	4930      	ldr	r1, [pc, #192]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8002068:	4313      	orrs	r3, r2
 800206a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800206c:	4b2e      	ldr	r3, [pc, #184]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a2d      	ldr	r2, [pc, #180]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8002072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002078:	4b2b      	ldr	r3, [pc, #172]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a2a      	ldr	r2, [pc, #168]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002082:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002084:	f7ff f922 	bl	80012cc <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7ff f91e 	bl	80012cc <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e058      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020aa:	e050      	b.n	800214e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e04f      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d148      	bne.n	800214e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a19      	ldr	r2, [pc, #100]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 80020c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020c8:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4a16      	ldr	r2, [pc, #88]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 80020ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020d4:	f7ff f8fa 	bl	80012cc <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff f8f6 	bl	80012cc <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e030      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x734>
 80020fa:	e028      	b.n	800214e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d023      	beq.n	800214a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a08      	ldr	r2, [pc, #32]	@ (8002128 <HAL_RCC_OscConfig+0x780>)
 8002108:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800210c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7ff f8dd 	bl	80012cc <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002114:	e00c      	b.n	8002130 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002116:	f7ff f8d9 	bl	80012cc <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d905      	bls.n	8002130 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e013      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
 8002128:	40021000 	.word	0x40021000
 800212c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ec      	bne.n	8002116 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_RCC_OscConfig+0x7b0>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	4905      	ldr	r1, [pc, #20]	@ (8002158 <HAL_RCC_OscConfig+0x7b0>)
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_RCC_OscConfig+0x7b4>)
 8002144:	4013      	ands	r3, r2
 8002146:	60cb      	str	r3, [r1, #12]
 8002148:	e001      	b.n	800214e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	feeefffc 	.word	0xfeeefffc

08002160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0e7      	b.n	8002344 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002174:	4b75      	ldr	r3, [pc, #468]	@ (800234c <HAL_RCC_ClockConfig+0x1ec>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d910      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b72      	ldr	r3, [pc, #456]	@ (800234c <HAL_RCC_ClockConfig+0x1ec>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 0207 	bic.w	r2, r3, #7
 800218a:	4970      	ldr	r1, [pc, #448]	@ (800234c <HAL_RCC_ClockConfig+0x1ec>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b6e      	ldr	r3, [pc, #440]	@ (800234c <HAL_RCC_ClockConfig+0x1ec>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0cf      	b.n	8002344 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d010      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	4b66      	ldr	r3, [pc, #408]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021bc:	429a      	cmp	r2, r3
 80021be:	d908      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b63      	ldr	r3, [pc, #396]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4960      	ldr	r1, [pc, #384]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d04c      	beq.n	8002278 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d121      	bne.n	8002236 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0a6      	b.n	8002344 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021fe:	4b54      	ldr	r3, [pc, #336]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d115      	bne.n	8002236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e09a      	b.n	8002344 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002216:	4b4e      	ldr	r3, [pc, #312]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e08e      	b.n	8002344 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002226:	4b4a      	ldr	r3, [pc, #296]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e086      	b.n	8002344 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002236:	4b46      	ldr	r3, [pc, #280]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f023 0203 	bic.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4943      	ldr	r1, [pc, #268]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	4313      	orrs	r3, r2
 8002246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002248:	f7ff f840 	bl	80012cc <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	e00a      	b.n	8002266 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002250:	f7ff f83c 	bl	80012cc <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e06e      	b.n	8002344 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	4b3a      	ldr	r3, [pc, #232]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 020c 	and.w	r2, r3, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	429a      	cmp	r2, r3
 8002276:	d1eb      	bne.n	8002250 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d010      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	4b31      	ldr	r3, [pc, #196]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002290:	429a      	cmp	r2, r3
 8002292:	d208      	bcs.n	80022a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002294:	4b2e      	ldr	r3, [pc, #184]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	492b      	ldr	r1, [pc, #172]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a6:	4b29      	ldr	r3, [pc, #164]	@ (800234c <HAL_RCC_ClockConfig+0x1ec>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d210      	bcs.n	80022d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b4:	4b25      	ldr	r3, [pc, #148]	@ (800234c <HAL_RCC_ClockConfig+0x1ec>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 0207 	bic.w	r2, r3, #7
 80022bc:	4923      	ldr	r1, [pc, #140]	@ (800234c <HAL_RCC_ClockConfig+0x1ec>)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c4:	4b21      	ldr	r3, [pc, #132]	@ (800234c <HAL_RCC_ClockConfig+0x1ec>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e036      	b.n	8002344 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4918      	ldr	r1, [pc, #96]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d009      	beq.n	8002314 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002300:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4910      	ldr	r1, [pc, #64]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002314:	f000 f824 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	490b      	ldr	r1, [pc, #44]	@ (8002354 <HAL_RCC_ClockConfig+0x1f4>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
 8002330:	4a09      	ldr	r2, [pc, #36]	@ (8002358 <HAL_RCC_ClockConfig+0x1f8>)
 8002332:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002334:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_RCC_ClockConfig+0x1fc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe ff77 	bl	800122c <HAL_InitTick>
 800233e:	4603      	mov	r3, r0
 8002340:	72fb      	strb	r3, [r7, #11]

  return status;
 8002342:	7afb      	ldrb	r3, [r7, #11]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40022000 	.word	0x40022000
 8002350:	40021000 	.word	0x40021000
 8002354:	08006b5c 	.word	0x08006b5c
 8002358:	20000000 	.word	0x20000000
 800235c:	20000004 	.word	0x20000004

08002360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236e:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x108>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002378:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x108>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x34>
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b0c      	cmp	r3, #12
 800238c:	d121      	bne.n	80023d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d11e      	bne.n	80023d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002394:	4b34      	ldr	r3, [pc, #208]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x108>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023a0:	4b31      	ldr	r3, [pc, #196]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	e005      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023bc:	4a2b      	ldr	r2, [pc, #172]	@ (800246c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10d      	bne.n	80023e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d102      	bne.n	80023de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023d8:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x110>)
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	e004      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023e4:	4b23      	ldr	r3, [pc, #140]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x114>)
 80023e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d134      	bne.n	8002458 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0xa6>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d003      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0xac>
 8002404:	e005      	b.n	8002412 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002406:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x110>)
 8002408:	617b      	str	r3, [r7, #20]
      break;
 800240a:	e005      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800240c:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x114>)
 800240e:	617b      	str	r3, [r7, #20]
      break;
 8002410:	e002      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	617b      	str	r3, [r7, #20]
      break;
 8002416:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002418:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x108>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	3301      	adds	r3, #1
 8002424:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002426:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x108>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	fb03 f202 	mul.w	r2, r3, r2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	fbb2 f3f3 	udiv	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x108>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	0e5b      	lsrs	r3, r3, #25
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	3301      	adds	r3, #1
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	fbb2 f3f3 	udiv	r3, r2, r3
 8002456:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002458:	69bb      	ldr	r3, [r7, #24]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	@ 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	08006b74 	.word	0x08006b74
 8002470:	00f42400 	.word	0x00f42400
 8002474:	007a1200 	.word	0x007a1200

08002478 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800247c:	4b03      	ldr	r3, [pc, #12]	@ (800248c <HAL_RCC_GetHCLKFreq+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000000 	.word	0x20000000

08002490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002494:	f7ff fff0 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4904      	ldr	r1, [pc, #16]	@ (80024b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08006b6c 	.word	0x08006b6c

080024bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024c0:	f7ff ffda 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0adb      	lsrs	r3, r3, #11
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	4904      	ldr	r1, [pc, #16]	@ (80024e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08006b6c 	.word	0x08006b6c

080024e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024f4:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002500:	f7ff f9ee 	bl	80018e0 <HAL_PWREx_GetVoltageRange>
 8002504:	6178      	str	r0, [r7, #20]
 8002506:	e014      	b.n	8002532 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	4a24      	ldr	r2, [pc, #144]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002512:	6593      	str	r3, [r2, #88]	@ 0x58
 8002514:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002520:	f7ff f9de 	bl	80018e0 <HAL_PWREx_GetVoltageRange>
 8002524:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002526:	4b1e      	ldr	r3, [pc, #120]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	4a1d      	ldr	r2, [pc, #116]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002530:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002538:	d10b      	bne.n	8002552 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b80      	cmp	r3, #128	@ 0x80
 800253e:	d919      	bls.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2ba0      	cmp	r3, #160	@ 0xa0
 8002544:	d902      	bls.n	800254c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002546:	2302      	movs	r3, #2
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	e013      	b.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800254c:	2301      	movs	r3, #1
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	e010      	b.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b80      	cmp	r3, #128	@ 0x80
 8002556:	d902      	bls.n	800255e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002558:	2303      	movs	r3, #3
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	e00a      	b.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b80      	cmp	r3, #128	@ 0x80
 8002562:	d102      	bne.n	800256a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002564:	2302      	movs	r3, #2
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e004      	b.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b70      	cmp	r3, #112	@ 0x70
 800256e:	d101      	bne.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002570:	2301      	movs	r3, #1
 8002572:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 0207 	bic.w	r2, r3, #7
 800257c:	4909      	ldr	r1, [pc, #36]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002584:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40022000 	.word	0x40022000

080025a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025b0:	2300      	movs	r3, #0
 80025b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025b4:	2300      	movs	r3, #0
 80025b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d041      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025cc:	d02a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025d2:	d824      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025d8:	d008      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025de:	d81e      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e8:	d010      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025ea:	e018      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025ec:	4b86      	ldr	r3, [pc, #536]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a85      	ldr	r2, [pc, #532]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025f8:	e015      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f000 facb 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002606:	4603      	mov	r3, r0
 8002608:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800260a:	e00c      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3320      	adds	r3, #32
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fbb6 	bl	8002d84 <RCCEx_PLLSAI2_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800261c:	e003      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	74fb      	strb	r3, [r7, #19]
      break;
 8002622:	e000      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800262c:	4b76      	ldr	r3, [pc, #472]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002632:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800263a:	4973      	ldr	r1, [pc, #460]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002642:	e001      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d041      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002658:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800265c:	d02a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800265e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002662:	d824      	bhi.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002664:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002668:	d008      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800266a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800266e:	d81e      	bhi.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002678:	d010      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800267a:	e018      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800267c:	4b62      	ldr	r3, [pc, #392]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a61      	ldr	r2, [pc, #388]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002686:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002688:	e015      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fa83 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002696:	4603      	mov	r3, r0
 8002698:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800269a:	e00c      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3320      	adds	r3, #32
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fb6e 	bl	8002d84 <RCCEx_PLLSAI2_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ac:	e003      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	74fb      	strb	r3, [r7, #19]
      break;
 80026b2:	e000      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026bc:	4b52      	ldr	r3, [pc, #328]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026ca:	494f      	ldr	r1, [pc, #316]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026d2:	e001      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80a0 	beq.w	8002826 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026ea:	4b47      	ldr	r3, [pc, #284]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026fa:	2300      	movs	r3, #0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00d      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002700:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002704:	4a40      	ldr	r2, [pc, #256]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270a:	6593      	str	r3, [r2, #88]	@ 0x58
 800270c:	4b3e      	ldr	r3, [pc, #248]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002718:	2301      	movs	r3, #1
 800271a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271c:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a3a      	ldr	r2, [pc, #232]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002726:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002728:	f7fe fdd0 	bl	80012cc <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800272e:	e009      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002730:	f7fe fdcc 	bl	80012cc <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d902      	bls.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	74fb      	strb	r3, [r7, #19]
        break;
 8002742:	e005      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002744:	4b31      	ldr	r3, [pc, #196]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ef      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d15c      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002756:	4b2c      	ldr	r3, [pc, #176]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002760:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01f      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	429a      	cmp	r2, r3
 8002772:	d019      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800277e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002780:	4b21      	ldr	r3, [pc, #132]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	4a20      	ldr	r2, [pc, #128]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002790:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	4a1c      	ldr	r2, [pc, #112]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027a0:	4a19      	ldr	r2, [pc, #100]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d016      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fd8b 	bl	80012cc <HAL_GetTick>
 80027b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b8:	e00b      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe fd87 	bl	80012cc <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d902      	bls.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	74fb      	strb	r3, [r7, #19]
            break;
 80027d0:	e006      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ec      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027e6:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027f6:	4904      	ldr	r1, [pc, #16]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027fe:	e009      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	74bb      	strb	r3, [r7, #18]
 8002804:	e006      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002814:	7c7b      	ldrb	r3, [r7, #17]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281a:	4b9e      	ldr	r3, [pc, #632]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281e:	4a9d      	ldr	r2, [pc, #628]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002824:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002832:	4b98      	ldr	r3, [pc, #608]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002838:	f023 0203 	bic.w	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002840:	4994      	ldr	r1, [pc, #592]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002854:	4b8f      	ldr	r3, [pc, #572]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	f023 020c 	bic.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002862:	498c      	ldr	r1, [pc, #560]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002876:	4b87      	ldr	r3, [pc, #540]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	4983      	ldr	r1, [pc, #524]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002898:	4b7e      	ldr	r3, [pc, #504]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	497b      	ldr	r1, [pc, #492]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ba:	4b76      	ldr	r3, [pc, #472]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c8:	4972      	ldr	r1, [pc, #456]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ea:	496a      	ldr	r1, [pc, #424]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028fe:	4b65      	ldr	r3, [pc, #404]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002904:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290c:	4961      	ldr	r1, [pc, #388]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002920:	4b5c      	ldr	r3, [pc, #368]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292e:	4959      	ldr	r1, [pc, #356]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002942:	4b54      	ldr	r3, [pc, #336]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002948:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002950:	4950      	ldr	r1, [pc, #320]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002964:	4b4b      	ldr	r3, [pc, #300]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002972:	4948      	ldr	r1, [pc, #288]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002986:	4b43      	ldr	r3, [pc, #268]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002994:	493f      	ldr	r1, [pc, #252]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d028      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029b6:	4937      	ldr	r1, [pc, #220]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029c6:	d106      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c8:	4b32      	ldr	r3, [pc, #200]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a31      	ldr	r2, [pc, #196]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029d2:	60d3      	str	r3, [r2, #12]
 80029d4:	e011      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029de:	d10c      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f8d8 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d028      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a06:	4b23      	ldr	r3, [pc, #140]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a14:	491f      	ldr	r1, [pc, #124]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a24:	d106      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a26:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a30:	60d3      	str	r3, [r2, #12]
 8002a32:	e011      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2101      	movs	r1, #1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f8a9 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02b      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a72:	4908      	ldr	r1, [pc, #32]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a82:	d109      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a84:	4b03      	ldr	r3, [pc, #12]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a02      	ldr	r2, [pc, #8]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a8e:	60d3      	str	r3, [r2, #12]
 8002a90:	e014      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f877 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d02f      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ad6:	4928      	ldr	r1, [pc, #160]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ae6:	d10d      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	2102      	movs	r1, #2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f854 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d014      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002afe:	7cfb      	ldrb	r3, [r7, #19]
 8002b00:	74bb      	strb	r3, [r7, #18]
 8002b02:	e011      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3320      	adds	r3, #32
 8002b12:	2102      	movs	r1, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f935 	bl	8002d84 <RCCEx_PLLSAI2_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b34:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b42:	490d      	ldr	r1, [pc, #52]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b66:	4904      	ldr	r1, [pc, #16]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b80:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	6013      	str	r3, [r2, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000

08002b9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002baa:	4b75      	ldr	r3, [pc, #468]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d018      	beq.n	8002be8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bb6:	4b72      	ldr	r3, [pc, #456]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0203 	and.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d10d      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bce:	4b6c      	ldr	r3, [pc, #432]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d047      	beq.n	8002c72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
 8002be6:	e044      	b.n	8002c72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d018      	beq.n	8002c22 <RCCEx_PLLSAI1_Config+0x86>
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d825      	bhi.n	8002c40 <RCCEx_PLLSAI1_Config+0xa4>
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d002      	beq.n	8002bfe <RCCEx_PLLSAI1_Config+0x62>
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d009      	beq.n	8002c10 <RCCEx_PLLSAI1_Config+0x74>
 8002bfc:	e020      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bfe:	4b60      	ldr	r3, [pc, #384]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d11d      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0e:	e01a      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c10:	4b5b      	ldr	r3, [pc, #364]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d116      	bne.n	8002c4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c20:	e013      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c22:	4b57      	ldr	r3, [pc, #348]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c2e:	4b54      	ldr	r3, [pc, #336]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c3e:	e006      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      break;
 8002c44:	e004      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c56:	4b4a      	ldr	r3, [pc, #296]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	4944      	ldr	r1, [pc, #272]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d17d      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c78:	4b41      	ldr	r3, [pc, #260]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a40      	ldr	r2, [pc, #256]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c84:	f7fe fb22 	bl	80012cc <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c8a:	e009      	b.n	8002ca0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c8c:	f7fe fb1e 	bl	80012cc <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d902      	bls.n	8002ca0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c9e:	e005      	b.n	8002cac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ca0:	4b37      	ldr	r3, [pc, #220]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ef      	bne.n	8002c8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d160      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d111      	bne.n	8002cdc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb8:	4b31      	ldr	r3, [pc, #196]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6892      	ldr	r2, [r2, #8]
 8002cc8:	0211      	lsls	r1, r2, #8
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68d2      	ldr	r2, [r2, #12]
 8002cce:	0912      	lsrs	r2, r2, #4
 8002cd0:	0452      	lsls	r2, r2, #17
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	492a      	ldr	r1, [pc, #168]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	610b      	str	r3, [r1, #16]
 8002cda:	e027      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d112      	bne.n	8002d08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce2:	4b27      	ldr	r3, [pc, #156]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002cea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6892      	ldr	r2, [r2, #8]
 8002cf2:	0211      	lsls	r1, r2, #8
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6912      	ldr	r2, [r2, #16]
 8002cf8:	0852      	lsrs	r2, r2, #1
 8002cfa:	3a01      	subs	r2, #1
 8002cfc:	0552      	lsls	r2, r2, #21
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	491f      	ldr	r1, [pc, #124]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	610b      	str	r3, [r1, #16]
 8002d06:	e011      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d08:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6892      	ldr	r2, [r2, #8]
 8002d18:	0211      	lsls	r1, r2, #8
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6952      	ldr	r2, [r2, #20]
 8002d1e:	0852      	lsrs	r2, r2, #1
 8002d20:	3a01      	subs	r2, #1
 8002d22:	0652      	lsls	r2, r2, #25
 8002d24:	430a      	orrs	r2, r1
 8002d26:	4916      	ldr	r1, [pc, #88]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d2c:	4b14      	ldr	r3, [pc, #80]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a13      	ldr	r2, [pc, #76]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fac8 	bl	80012cc <HAL_GetTick>
 8002d3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d3e:	e009      	b.n	8002d54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d40:	f7fe fac4 	bl	80012cc <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d902      	bls.n	8002d54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	73fb      	strb	r3, [r7, #15]
          break;
 8002d52:	e005      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d54:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ef      	beq.n	8002d40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	4904      	ldr	r1, [pc, #16]	@ (8002d80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000

08002d84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d92:	4b6a      	ldr	r3, [pc, #424]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d018      	beq.n	8002dd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d9e:	4b67      	ldr	r3, [pc, #412]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0203 	and.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d10d      	bne.n	8002dca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
       ||
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002db6:	4b61      	ldr	r3, [pc, #388]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
       ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d047      	beq.n	8002e5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
 8002dce:	e044      	b.n	8002e5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d018      	beq.n	8002e0a <RCCEx_PLLSAI2_Config+0x86>
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d825      	bhi.n	8002e28 <RCCEx_PLLSAI2_Config+0xa4>
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d002      	beq.n	8002de6 <RCCEx_PLLSAI2_Config+0x62>
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d009      	beq.n	8002df8 <RCCEx_PLLSAI2_Config+0x74>
 8002de4:	e020      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002de6:	4b55      	ldr	r3, [pc, #340]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d11d      	bne.n	8002e2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df6:	e01a      	b.n	8002e2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002df8:	4b50      	ldr	r3, [pc, #320]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d116      	bne.n	8002e32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e08:	e013      	b.n	8002e32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10f      	bne.n	8002e36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e16:	4b49      	ldr	r3, [pc, #292]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e26:	e006      	b.n	8002e36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2c:	e004      	b.n	8002e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e002      	b.n	8002e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e32:	bf00      	nop
 8002e34:	e000      	b.n	8002e38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e36:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10d      	bne.n	8002e5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e3e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	430b      	orrs	r3, r1
 8002e54:	4939      	ldr	r1, [pc, #228]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d167      	bne.n	8002f30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e60:	4b36      	ldr	r3, [pc, #216]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a35      	ldr	r2, [pc, #212]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fa2e 	bl	80012cc <HAL_GetTick>
 8002e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e72:	e009      	b.n	8002e88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e74:	f7fe fa2a 	bl	80012cc <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d902      	bls.n	8002e88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	73fb      	strb	r3, [r7, #15]
        break;
 8002e86:	e005      	b.n	8002e94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e88:	4b2c      	ldr	r3, [pc, #176]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ef      	bne.n	8002e74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d14a      	bne.n	8002f30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d111      	bne.n	8002ec4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ea0:	4b26      	ldr	r3, [pc, #152]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6892      	ldr	r2, [r2, #8]
 8002eb0:	0211      	lsls	r1, r2, #8
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68d2      	ldr	r2, [r2, #12]
 8002eb6:	0912      	lsrs	r2, r2, #4
 8002eb8:	0452      	lsls	r2, r2, #17
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	491f      	ldr	r1, [pc, #124]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	614b      	str	r3, [r1, #20]
 8002ec2:	e011      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ecc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6892      	ldr	r2, [r2, #8]
 8002ed4:	0211      	lsls	r1, r2, #8
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6912      	ldr	r2, [r2, #16]
 8002eda:	0852      	lsrs	r2, r2, #1
 8002edc:	3a01      	subs	r2, #1
 8002ede:	0652      	lsls	r2, r2, #25
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	4916      	ldr	r1, [pc, #88]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ee8:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a13      	ldr	r2, [pc, #76]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe f9ea 	bl	80012cc <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002efa:	e009      	b.n	8002f10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002efc:	f7fe f9e6 	bl	80012cc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f0e:	e005      	b.n	8002f1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f10:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ef      	beq.n	8002efc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	4904      	ldr	r1, [pc, #16]	@ (8002f3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000

08002f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e049      	b.n	8002fe6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7fd fef0 	bl	8000d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f001 fa74 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d001      	beq.n	8003008 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e047      	b.n	8003098 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a23      	ldr	r2, [pc, #140]	@ (80030a4 <HAL_TIM_Base_Start+0xb4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01d      	beq.n	8003056 <HAL_TIM_Base_Start+0x66>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003022:	d018      	beq.n	8003056 <HAL_TIM_Base_Start+0x66>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1f      	ldr	r2, [pc, #124]	@ (80030a8 <HAL_TIM_Base_Start+0xb8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_TIM_Base_Start+0x66>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1e      	ldr	r2, [pc, #120]	@ (80030ac <HAL_TIM_Base_Start+0xbc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <HAL_TIM_Base_Start+0x66>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1c      	ldr	r2, [pc, #112]	@ (80030b0 <HAL_TIM_Base_Start+0xc0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_TIM_Base_Start+0x66>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1b      	ldr	r2, [pc, #108]	@ (80030b4 <HAL_TIM_Base_Start+0xc4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_TIM_Base_Start+0x66>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a19      	ldr	r2, [pc, #100]	@ (80030b8 <HAL_TIM_Base_Start+0xc8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d115      	bne.n	8003082 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <HAL_TIM_Base_Start+0xcc>)
 800305e:	4013      	ands	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b06      	cmp	r3, #6
 8003066:	d015      	beq.n	8003094 <HAL_TIM_Base_Start+0xa4>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800306e:	d011      	beq.n	8003094 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003080:	e008      	b.n	8003094 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e000      	b.n	8003096 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003094:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40000800 	.word	0x40000800
 80030b0:	40000c00 	.word	0x40000c00
 80030b4:	40013400 	.word	0x40013400
 80030b8:	40014000 	.word	0x40014000
 80030bc:	00010007 	.word	0x00010007

080030c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d001      	beq.n	80030d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e04f      	b.n	8003178 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a23      	ldr	r2, [pc, #140]	@ (8003184 <HAL_TIM_Base_Start_IT+0xc4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01d      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0x76>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003102:	d018      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0x76>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1f      	ldr	r2, [pc, #124]	@ (8003188 <HAL_TIM_Base_Start_IT+0xc8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0x76>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1e      	ldr	r2, [pc, #120]	@ (800318c <HAL_TIM_Base_Start_IT+0xcc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00e      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0x76>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1c      	ldr	r2, [pc, #112]	@ (8003190 <HAL_TIM_Base_Start_IT+0xd0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0x76>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1b      	ldr	r2, [pc, #108]	@ (8003194 <HAL_TIM_Base_Start_IT+0xd4>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0x76>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a19      	ldr	r2, [pc, #100]	@ (8003198 <HAL_TIM_Base_Start_IT+0xd8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d115      	bne.n	8003162 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4b17      	ldr	r3, [pc, #92]	@ (800319c <HAL_TIM_Base_Start_IT+0xdc>)
 800313e:	4013      	ands	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b06      	cmp	r3, #6
 8003146:	d015      	beq.n	8003174 <HAL_TIM_Base_Start_IT+0xb4>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314e:	d011      	beq.n	8003174 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003160:	e008      	b.n	8003174 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e000      	b.n	8003176 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003174:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800
 8003190:	40000c00 	.word	0x40000c00
 8003194:	40013400 	.word	0x40013400
 8003198:	40014000 	.word	0x40014000
 800319c:	00010007 	.word	0x00010007

080031a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e049      	b.n	8003246 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f841 	bl	800324e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f001 f944 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_TIM_OC_Start_IT+0x28>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e03c      	b.n	8003306 <HAL_TIM_OC_Start_IT+0xa2>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d109      	bne.n	80032a6 <HAL_TIM_OC_Start_IT+0x42>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e02f      	b.n	8003306 <HAL_TIM_OC_Start_IT+0xa2>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d109      	bne.n	80032c0 <HAL_TIM_OC_Start_IT+0x5c>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e022      	b.n	8003306 <HAL_TIM_OC_Start_IT+0xa2>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d109      	bne.n	80032da <HAL_TIM_OC_Start_IT+0x76>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	bf14      	ite	ne
 80032d2:	2301      	movne	r3, #1
 80032d4:	2300      	moveq	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	e015      	b.n	8003306 <HAL_TIM_OC_Start_IT+0xa2>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b10      	cmp	r3, #16
 80032de:	d109      	bne.n	80032f4 <HAL_TIM_OC_Start_IT+0x90>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e008      	b.n	8003306 <HAL_TIM_OC_Start_IT+0xa2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0e7      	b.n	80034de <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d104      	bne.n	800331e <HAL_TIM_OC_Start_IT+0xba>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800331c:	e023      	b.n	8003366 <HAL_TIM_OC_Start_IT+0x102>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d104      	bne.n	800332e <HAL_TIM_OC_Start_IT+0xca>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800332c:	e01b      	b.n	8003366 <HAL_TIM_OC_Start_IT+0x102>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d104      	bne.n	800333e <HAL_TIM_OC_Start_IT+0xda>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800333c:	e013      	b.n	8003366 <HAL_TIM_OC_Start_IT+0x102>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	d104      	bne.n	800334e <HAL_TIM_OC_Start_IT+0xea>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800334c:	e00b      	b.n	8003366 <HAL_TIM_OC_Start_IT+0x102>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b10      	cmp	r3, #16
 8003352:	d104      	bne.n	800335e <HAL_TIM_OC_Start_IT+0xfa>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800335c:	e003      	b.n	8003366 <HAL_TIM_OC_Start_IT+0x102>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d841      	bhi.n	80033f0 <HAL_TIM_OC_Start_IT+0x18c>
 800336c:	a201      	add	r2, pc, #4	@ (adr r2, 8003374 <HAL_TIM_OC_Start_IT+0x110>)
 800336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003372:	bf00      	nop
 8003374:	080033a9 	.word	0x080033a9
 8003378:	080033f1 	.word	0x080033f1
 800337c:	080033f1 	.word	0x080033f1
 8003380:	080033f1 	.word	0x080033f1
 8003384:	080033bb 	.word	0x080033bb
 8003388:	080033f1 	.word	0x080033f1
 800338c:	080033f1 	.word	0x080033f1
 8003390:	080033f1 	.word	0x080033f1
 8003394:	080033cd 	.word	0x080033cd
 8003398:	080033f1 	.word	0x080033f1
 800339c:	080033f1 	.word	0x080033f1
 80033a0:	080033f1 	.word	0x080033f1
 80033a4:	080033df 	.word	0x080033df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0202 	orr.w	r2, r2, #2
 80033b6:	60da      	str	r2, [r3, #12]
      break;
 80033b8:	e01d      	b.n	80033f6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0204 	orr.w	r2, r2, #4
 80033c8:	60da      	str	r2, [r3, #12]
      break;
 80033ca:	e014      	b.n	80033f6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0208 	orr.w	r2, r2, #8
 80033da:	60da      	str	r2, [r3, #12]
      break;
 80033dc:	e00b      	b.n	80033f6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0210 	orr.w	r2, r2, #16
 80033ec:	60da      	str	r2, [r3, #12]
      break;
 80033ee:	e002      	b.n	80033f6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      break;
 80033f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d16f      	bne.n	80034dc <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2201      	movs	r2, #1
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f001 fdf3 	bl	8004ff0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a36      	ldr	r2, [pc, #216]	@ (80034e8 <HAL_TIM_OC_Start_IT+0x284>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d013      	beq.n	800343c <HAL_TIM_OC_Start_IT+0x1d8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a34      	ldr	r2, [pc, #208]	@ (80034ec <HAL_TIM_OC_Start_IT+0x288>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_TIM_OC_Start_IT+0x1d8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a33      	ldr	r2, [pc, #204]	@ (80034f0 <HAL_TIM_OC_Start_IT+0x28c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_TIM_OC_Start_IT+0x1d8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a31      	ldr	r2, [pc, #196]	@ (80034f4 <HAL_TIM_OC_Start_IT+0x290>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIM_OC_Start_IT+0x1d8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a30      	ldr	r2, [pc, #192]	@ (80034f8 <HAL_TIM_OC_Start_IT+0x294>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_TIM_OC_Start_IT+0x1dc>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_TIM_OC_Start_IT+0x1de>
 8003440:	2300      	movs	r3, #0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a23      	ldr	r2, [pc, #140]	@ (80034e8 <HAL_TIM_OC_Start_IT+0x284>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01d      	beq.n	800349c <HAL_TIM_OC_Start_IT+0x238>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003468:	d018      	beq.n	800349c <HAL_TIM_OC_Start_IT+0x238>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a23      	ldr	r2, [pc, #140]	@ (80034fc <HAL_TIM_OC_Start_IT+0x298>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_TIM_OC_Start_IT+0x238>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a21      	ldr	r2, [pc, #132]	@ (8003500 <HAL_TIM_OC_Start_IT+0x29c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_TIM_OC_Start_IT+0x238>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a20      	ldr	r2, [pc, #128]	@ (8003504 <HAL_TIM_OC_Start_IT+0x2a0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_TIM_OC_Start_IT+0x238>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a17      	ldr	r2, [pc, #92]	@ (80034ec <HAL_TIM_OC_Start_IT+0x288>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_TIM_OC_Start_IT+0x238>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a16      	ldr	r2, [pc, #88]	@ (80034f0 <HAL_TIM_OC_Start_IT+0x28c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d115      	bne.n	80034c8 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	4b19      	ldr	r3, [pc, #100]	@ (8003508 <HAL_TIM_OC_Start_IT+0x2a4>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d015      	beq.n	80034da <HAL_TIM_OC_Start_IT+0x276>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b4:	d011      	beq.n	80034da <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0201 	orr.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c6:	e008      	b.n	80034da <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	e000      	b.n	80034dc <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034da:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40013400 	.word	0x40013400
 80034f0:	40014000 	.word	0x40014000
 80034f4:	40014400 	.word	0x40014400
 80034f8:	40014800 	.word	0x40014800
 80034fc:	40000400 	.word	0x40000400
 8003500:	40000800 	.word	0x40000800
 8003504:	40000c00 	.word	0x40000c00
 8003508:	00010007 	.word	0x00010007

0800350c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e049      	b.n	80035b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f841 	bl	80035ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f000 ff8e 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_TIM_PWM_Start+0x24>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e03c      	b.n	800366e <HAL_TIM_PWM_Start+0x9e>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d109      	bne.n	800360e <HAL_TIM_PWM_Start+0x3e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	e02f      	b.n	800366e <HAL_TIM_PWM_Start+0x9e>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d109      	bne.n	8003628 <HAL_TIM_PWM_Start+0x58>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	e022      	b.n	800366e <HAL_TIM_PWM_Start+0x9e>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d109      	bne.n	8003642 <HAL_TIM_PWM_Start+0x72>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b01      	cmp	r3, #1
 8003638:	bf14      	ite	ne
 800363a:	2301      	movne	r3, #1
 800363c:	2300      	moveq	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	e015      	b.n	800366e <HAL_TIM_PWM_Start+0x9e>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b10      	cmp	r3, #16
 8003646:	d109      	bne.n	800365c <HAL_TIM_PWM_Start+0x8c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	bf14      	ite	ne
 8003654:	2301      	movne	r3, #1
 8003656:	2300      	moveq	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	e008      	b.n	800366e <HAL_TIM_PWM_Start+0x9e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e09c      	b.n	80037b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <HAL_TIM_PWM_Start+0xb6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003684:	e023      	b.n	80036ce <HAL_TIM_PWM_Start+0xfe>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d104      	bne.n	8003696 <HAL_TIM_PWM_Start+0xc6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003694:	e01b      	b.n	80036ce <HAL_TIM_PWM_Start+0xfe>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_PWM_Start+0xd6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a4:	e013      	b.n	80036ce <HAL_TIM_PWM_Start+0xfe>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	d104      	bne.n	80036b6 <HAL_TIM_PWM_Start+0xe6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036b4:	e00b      	b.n	80036ce <HAL_TIM_PWM_Start+0xfe>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d104      	bne.n	80036c6 <HAL_TIM_PWM_Start+0xf6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036c4:	e003      	b.n	80036ce <HAL_TIM_PWM_Start+0xfe>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2201      	movs	r2, #1
 80036d4:	6839      	ldr	r1, [r7, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 fc8a 	bl	8004ff0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a35      	ldr	r2, [pc, #212]	@ (80037b8 <HAL_TIM_PWM_Start+0x1e8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_TIM_PWM_Start+0x13e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a34      	ldr	r2, [pc, #208]	@ (80037bc <HAL_TIM_PWM_Start+0x1ec>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00e      	beq.n	800370e <HAL_TIM_PWM_Start+0x13e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a32      	ldr	r2, [pc, #200]	@ (80037c0 <HAL_TIM_PWM_Start+0x1f0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_TIM_PWM_Start+0x13e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a31      	ldr	r2, [pc, #196]	@ (80037c4 <HAL_TIM_PWM_Start+0x1f4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d004      	beq.n	800370e <HAL_TIM_PWM_Start+0x13e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a2f      	ldr	r2, [pc, #188]	@ (80037c8 <HAL_TIM_PWM_Start+0x1f8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_TIM_PWM_Start+0x142>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_TIM_PWM_Start+0x144>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003726:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a22      	ldr	r2, [pc, #136]	@ (80037b8 <HAL_TIM_PWM_Start+0x1e8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01d      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373a:	d018      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a22      	ldr	r2, [pc, #136]	@ (80037cc <HAL_TIM_PWM_Start+0x1fc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a21      	ldr	r2, [pc, #132]	@ (80037d0 <HAL_TIM_PWM_Start+0x200>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1f      	ldr	r2, [pc, #124]	@ (80037d4 <HAL_TIM_PWM_Start+0x204>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a17      	ldr	r2, [pc, #92]	@ (80037bc <HAL_TIM_PWM_Start+0x1ec>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_TIM_PWM_Start+0x19e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a15      	ldr	r2, [pc, #84]	@ (80037c0 <HAL_TIM_PWM_Start+0x1f0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d115      	bne.n	800379a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	4b18      	ldr	r3, [pc, #96]	@ (80037d8 <HAL_TIM_PWM_Start+0x208>)
 8003776:	4013      	ands	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b06      	cmp	r3, #6
 800377e:	d015      	beq.n	80037ac <HAL_TIM_PWM_Start+0x1dc>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003786:	d011      	beq.n	80037ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003798:	e008      	b.n	80037ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	e000      	b.n	80037ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40013400 	.word	0x40013400
 80037c0:	40014000 	.word	0x40014000
 80037c4:	40014400 	.word	0x40014400
 80037c8:	40014800 	.word	0x40014800
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800
 80037d4:	40000c00 	.word	0x40000c00
 80037d8:	00010007 	.word	0x00010007

080037dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e049      	b.n	8003882 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f841 	bl	800388a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f000 fe26 	bl	800446c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <HAL_TIM_IC_Start_IT+0x1e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	e023      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x66>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_IC_Start_IT+0x2e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	e01b      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x66>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d104      	bne.n	80038de <HAL_TIM_IC_Start_IT+0x3e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	e013      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x66>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b0c      	cmp	r3, #12
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_IC_Start_IT+0x4e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	e00b      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x66>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_IC_Start_IT+0x5e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e003      	b.n	8003906 <HAL_TIM_IC_Start_IT+0x66>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003904:	b2db      	uxtb	r3, r3
 8003906:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d104      	bne.n	8003918 <HAL_TIM_IC_Start_IT+0x78>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e013      	b.n	8003940 <HAL_TIM_IC_Start_IT+0xa0>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d104      	bne.n	8003928 <HAL_TIM_IC_Start_IT+0x88>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e00b      	b.n	8003940 <HAL_TIM_IC_Start_IT+0xa0>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b08      	cmp	r3, #8
 800392c:	d104      	bne.n	8003938 <HAL_TIM_IC_Start_IT+0x98>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e003      	b.n	8003940 <HAL_TIM_IC_Start_IT+0xa0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800393e:	b2db      	uxtb	r3, r3
 8003940:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003942:	7bbb      	ldrb	r3, [r7, #14]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d102      	bne.n	800394e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003948:	7b7b      	ldrb	r3, [r7, #13]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d001      	beq.n	8003952 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0dd      	b.n	8003b0e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <HAL_TIM_IC_Start_IT+0xc2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003960:	e023      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x10a>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d104      	bne.n	8003972 <HAL_TIM_IC_Start_IT+0xd2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003970:	e01b      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x10a>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d104      	bne.n	8003982 <HAL_TIM_IC_Start_IT+0xe2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003980:	e013      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x10a>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b0c      	cmp	r3, #12
 8003986:	d104      	bne.n	8003992 <HAL_TIM_IC_Start_IT+0xf2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003990:	e00b      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x10a>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b10      	cmp	r3, #16
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_IC_Start_IT+0x102>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039a0:	e003      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x10a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Start_IT+0x11a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039b8:	e013      	b.n	80039e2 <HAL_TIM_IC_Start_IT+0x142>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d104      	bne.n	80039ca <HAL_TIM_IC_Start_IT+0x12a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039c8:	e00b      	b.n	80039e2 <HAL_TIM_IC_Start_IT+0x142>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d104      	bne.n	80039da <HAL_TIM_IC_Start_IT+0x13a>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039d8:	e003      	b.n	80039e2 <HAL_TIM_IC_Start_IT+0x142>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b0c      	cmp	r3, #12
 80039e6:	d841      	bhi.n	8003a6c <HAL_TIM_IC_Start_IT+0x1cc>
 80039e8:	a201      	add	r2, pc, #4	@ (adr r2, 80039f0 <HAL_TIM_IC_Start_IT+0x150>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a25 	.word	0x08003a25
 80039f4:	08003a6d 	.word	0x08003a6d
 80039f8:	08003a6d 	.word	0x08003a6d
 80039fc:	08003a6d 	.word	0x08003a6d
 8003a00:	08003a37 	.word	0x08003a37
 8003a04:	08003a6d 	.word	0x08003a6d
 8003a08:	08003a6d 	.word	0x08003a6d
 8003a0c:	08003a6d 	.word	0x08003a6d
 8003a10:	08003a49 	.word	0x08003a49
 8003a14:	08003a6d 	.word	0x08003a6d
 8003a18:	08003a6d 	.word	0x08003a6d
 8003a1c:	08003a6d 	.word	0x08003a6d
 8003a20:	08003a5b 	.word	0x08003a5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0202 	orr.w	r2, r2, #2
 8003a32:	60da      	str	r2, [r3, #12]
      break;
 8003a34:	e01d      	b.n	8003a72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0204 	orr.w	r2, r2, #4
 8003a44:	60da      	str	r2, [r3, #12]
      break;
 8003a46:	e014      	b.n	8003a72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0208 	orr.w	r2, r2, #8
 8003a56:	60da      	str	r2, [r3, #12]
      break;
 8003a58:	e00b      	b.n	8003a72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0210 	orr.w	r2, r2, #16
 8003a68:	60da      	str	r2, [r3, #12]
      break;
 8003a6a:	e002      	b.n	8003a72 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a70:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d149      	bne.n	8003b0c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fab5 	bl	8004ff0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a23      	ldr	r2, [pc, #140]	@ (8003b18 <HAL_TIM_IC_Start_IT+0x278>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d01d      	beq.n	8003acc <HAL_TIM_IC_Start_IT+0x22c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a98:	d018      	beq.n	8003acc <HAL_TIM_IC_Start_IT+0x22c>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8003b1c <HAL_TIM_IC_Start_IT+0x27c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <HAL_TIM_IC_Start_IT+0x22c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b20 <HAL_TIM_IC_Start_IT+0x280>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00e      	beq.n	8003acc <HAL_TIM_IC_Start_IT+0x22c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b24 <HAL_TIM_IC_Start_IT+0x284>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d009      	beq.n	8003acc <HAL_TIM_IC_Start_IT+0x22c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1a      	ldr	r2, [pc, #104]	@ (8003b28 <HAL_TIM_IC_Start_IT+0x288>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <HAL_TIM_IC_Start_IT+0x22c>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a19      	ldr	r2, [pc, #100]	@ (8003b2c <HAL_TIM_IC_Start_IT+0x28c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d115      	bne.n	8003af8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	4b17      	ldr	r3, [pc, #92]	@ (8003b30 <HAL_TIM_IC_Start_IT+0x290>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b06      	cmp	r3, #6
 8003adc:	d015      	beq.n	8003b0a <HAL_TIM_IC_Start_IT+0x26a>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae4:	d011      	beq.n	8003b0a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af6:	e008      	b.n	8003b0a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e000      	b.n	8003b0c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40000400 	.word	0x40000400
 8003b20:	40000800 	.word	0x40000800
 8003b24:	40000c00 	.word	0x40000c00
 8003b28:	40013400 	.word	0x40013400
 8003b2c:	40014000 	.word	0x40014000
 8003b30:	00010007 	.word	0x00010007

08003b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d020      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01b      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0202 	mvn.w	r2, #2
 8003b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fc fd4c 	bl	800061c <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fc fd16 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fc4d 	bl	800442c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d020      	beq.n	8003be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01b      	beq.n	8003be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0204 	mvn.w	r2, #4
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fc fd26 	bl	800061c <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fc fcf0 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fc27 	bl	800442c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d020      	beq.n	8003c30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01b      	beq.n	8003c30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0208 	mvn.w	r2, #8
 8003c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2204      	movs	r2, #4
 8003c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fc fd00 	bl	800061c <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fc fcca 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fc01 	bl	800442c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d020      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01b      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0210 	mvn.w	r2, #16
 8003c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2208      	movs	r2, #8
 8003c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc fcda 	bl	800061c <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fc fca4 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fbdb 	bl	800442c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00c      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0201 	mvn.w	r2, #1
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fc fc60 	bl	8000560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f001 fa4e 	bl	8005160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f001 fa46 	bl	8005174 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00c      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fb9a 	bl	8004440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0220 	mvn.w	r2, #32
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f001 fa0e 	bl	800514c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e066      	b.n	8003e24 <HAL_TIM_OC_ConfigChannel+0xec>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b14      	cmp	r3, #20
 8003d62:	d857      	bhi.n	8003e14 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003d64:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003dc1 	.word	0x08003dc1
 8003d70:	08003e15 	.word	0x08003e15
 8003d74:	08003e15 	.word	0x08003e15
 8003d78:	08003e15 	.word	0x08003e15
 8003d7c:	08003dcf 	.word	0x08003dcf
 8003d80:	08003e15 	.word	0x08003e15
 8003d84:	08003e15 	.word	0x08003e15
 8003d88:	08003e15 	.word	0x08003e15
 8003d8c:	08003ddd 	.word	0x08003ddd
 8003d90:	08003e15 	.word	0x08003e15
 8003d94:	08003e15 	.word	0x08003e15
 8003d98:	08003e15 	.word	0x08003e15
 8003d9c:	08003deb 	.word	0x08003deb
 8003da0:	08003e15 	.word	0x08003e15
 8003da4:	08003e15 	.word	0x08003e15
 8003da8:	08003e15 	.word	0x08003e15
 8003dac:	08003df9 	.word	0x08003df9
 8003db0:	08003e15 	.word	0x08003e15
 8003db4:	08003e15 	.word	0x08003e15
 8003db8:	08003e15 	.word	0x08003e15
 8003dbc:	08003e07 	.word	0x08003e07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fbea 	bl	80045a0 <TIM_OC1_SetConfig>
      break;
 8003dcc:	e025      	b.n	8003e1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fc73 	bl	80046c0 <TIM_OC2_SetConfig>
      break;
 8003dda:	e01e      	b.n	8003e1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fcf6 	bl	80047d4 <TIM_OC3_SetConfig>
      break;
 8003de8:	e017      	b.n	8003e1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fd77 	bl	80048e4 <TIM_OC4_SetConfig>
      break;
 8003df6:	e010      	b.n	8003e1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fdda 	bl	80049b8 <TIM_OC5_SetConfig>
      break;
 8003e04:	e009      	b.n	8003e1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fe37 	bl	8004a80 <TIM_OC6_SetConfig>
      break;
 8003e12:	e002      	b.n	8003e1a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	75fb      	strb	r3, [r7, #23]
      break;
 8003e18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e088      	b.n	8003f5c <HAL_TIM_IC_ConfigChannel+0x130>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d11b      	bne.n	8003e90 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003e68:	f000 ff04 	bl	8004c74 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 020c 	bic.w	r2, r2, #12
 8003e7a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6999      	ldr	r1, [r3, #24]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	619a      	str	r2, [r3, #24]
 8003e8e:	e060      	b.n	8003f52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d11c      	bne.n	8003ed0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003ea6:	f000 ff82 	bl	8004dae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003eb8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6999      	ldr	r1, [r3, #24]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	021a      	lsls	r2, r3, #8
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	619a      	str	r2, [r3, #24]
 8003ece:	e040      	b.n	8003f52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d11b      	bne.n	8003f0e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003ee6:	f000 ffcf 	bl	8004e88 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 020c 	bic.w	r2, r2, #12
 8003ef8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69d9      	ldr	r1, [r3, #28]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	61da      	str	r2, [r3, #28]
 8003f0c:	e021      	b.n	8003f52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b0c      	cmp	r3, #12
 8003f12:	d11c      	bne.n	8003f4e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003f24:	f000 ffec 	bl	8004f00 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69da      	ldr	r2, [r3, #28]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003f36:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69d9      	ldr	r1, [r3, #28]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	61da      	str	r2, [r3, #28]
 8003f4c:	e001      	b.n	8003f52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e0ff      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b14      	cmp	r3, #20
 8003f8e:	f200 80f0 	bhi.w	8004172 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f92:	a201      	add	r2, pc, #4	@ (adr r2, 8003f98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fed 	.word	0x08003fed
 8003f9c:	08004173 	.word	0x08004173
 8003fa0:	08004173 	.word	0x08004173
 8003fa4:	08004173 	.word	0x08004173
 8003fa8:	0800402d 	.word	0x0800402d
 8003fac:	08004173 	.word	0x08004173
 8003fb0:	08004173 	.word	0x08004173
 8003fb4:	08004173 	.word	0x08004173
 8003fb8:	0800406f 	.word	0x0800406f
 8003fbc:	08004173 	.word	0x08004173
 8003fc0:	08004173 	.word	0x08004173
 8003fc4:	08004173 	.word	0x08004173
 8003fc8:	080040af 	.word	0x080040af
 8003fcc:	08004173 	.word	0x08004173
 8003fd0:	08004173 	.word	0x08004173
 8003fd4:	08004173 	.word	0x08004173
 8003fd8:	080040f1 	.word	0x080040f1
 8003fdc:	08004173 	.word	0x08004173
 8003fe0:	08004173 	.word	0x08004173
 8003fe4:	08004173 	.word	0x08004173
 8003fe8:	08004131 	.word	0x08004131
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fad4 	bl	80045a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0208 	orr.w	r2, r2, #8
 8004006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0204 	bic.w	r2, r2, #4
 8004016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6999      	ldr	r1, [r3, #24]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	619a      	str	r2, [r3, #24]
      break;
 800402a:	e0a5      	b.n	8004178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fb44 	bl	80046c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6999      	ldr	r1, [r3, #24]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	021a      	lsls	r2, r3, #8
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	619a      	str	r2, [r3, #24]
      break;
 800406c:	e084      	b.n	8004178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fbad 	bl	80047d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0208 	orr.w	r2, r2, #8
 8004088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0204 	bic.w	r2, r2, #4
 8004098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69d9      	ldr	r1, [r3, #28]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	61da      	str	r2, [r3, #28]
      break;
 80040ac:	e064      	b.n	8004178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fc15 	bl	80048e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69d9      	ldr	r1, [r3, #28]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	021a      	lsls	r2, r3, #8
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	61da      	str	r2, [r3, #28]
      break;
 80040ee:	e043      	b.n	8004178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fc5e 	bl	80049b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0208 	orr.w	r2, r2, #8
 800410a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0204 	bic.w	r2, r2, #4
 800411a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800412e:	e023      	b.n	8004178 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fca2 	bl	8004a80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800414a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	021a      	lsls	r2, r3, #8
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004170:	e002      	b.n	8004178 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	75fb      	strb	r3, [r7, #23]
      break;
 8004176:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004180:	7dfb      	ldrb	r3, [r7, #23]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop

0800418c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_TIM_ConfigClockSource+0x1c>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e0b6      	b.n	8004316 <HAL_TIM_ConfigClockSource+0x18a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e4:	d03e      	beq.n	8004264 <HAL_TIM_ConfigClockSource+0xd8>
 80041e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ea:	f200 8087 	bhi.w	80042fc <HAL_TIM_ConfigClockSource+0x170>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f2:	f000 8086 	beq.w	8004302 <HAL_TIM_ConfigClockSource+0x176>
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fa:	d87f      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x170>
 80041fc:	2b70      	cmp	r3, #112	@ 0x70
 80041fe:	d01a      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xaa>
 8004200:	2b70      	cmp	r3, #112	@ 0x70
 8004202:	d87b      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x170>
 8004204:	2b60      	cmp	r3, #96	@ 0x60
 8004206:	d050      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0x11e>
 8004208:	2b60      	cmp	r3, #96	@ 0x60
 800420a:	d877      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x170>
 800420c:	2b50      	cmp	r3, #80	@ 0x50
 800420e:	d03c      	beq.n	800428a <HAL_TIM_ConfigClockSource+0xfe>
 8004210:	2b50      	cmp	r3, #80	@ 0x50
 8004212:	d873      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x170>
 8004214:	2b40      	cmp	r3, #64	@ 0x40
 8004216:	d058      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x13e>
 8004218:	2b40      	cmp	r3, #64	@ 0x40
 800421a:	d86f      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x170>
 800421c:	2b30      	cmp	r3, #48	@ 0x30
 800421e:	d064      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15e>
 8004220:	2b30      	cmp	r3, #48	@ 0x30
 8004222:	d86b      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x170>
 8004224:	2b20      	cmp	r3, #32
 8004226:	d060      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15e>
 8004228:	2b20      	cmp	r3, #32
 800422a:	d867      	bhi.n	80042fc <HAL_TIM_ConfigClockSource+0x170>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d05c      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15e>
 8004230:	2b10      	cmp	r3, #16
 8004232:	d05a      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x15e>
 8004234:	e062      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004246:	f000 feb3 	bl	8004fb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	609a      	str	r2, [r3, #8]
      break;
 8004262:	e04f      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004274:	f000 fe9c 	bl	8004fb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004286:	609a      	str	r2, [r3, #8]
      break;
 8004288:	e03c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004296:	461a      	mov	r2, r3
 8004298:	f000 fd5a 	bl	8004d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2150      	movs	r1, #80	@ 0x50
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fe69 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 80042a8:	e02c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042b6:	461a      	mov	r2, r3
 80042b8:	f000 fdb6 	bl	8004e28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2160      	movs	r1, #96	@ 0x60
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fe59 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 80042c8:	e01c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d6:	461a      	mov	r2, r3
 80042d8:	f000 fd3a 	bl	8004d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2140      	movs	r1, #64	@ 0x40
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fe49 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 80042e8:	e00c      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f000 fe40 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 80042fa:	e003      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004300:	e000      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004314:	7bfb      	ldrb	r3, [r7, #15]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004332:	2302      	movs	r3, #2
 8004334:	e031      	b.n	800439a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004346:	6839      	ldr	r1, [r7, #0]
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fbff 	bl	8004b4c <TIM_SlaveTimer_SetConfig>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e018      	b.n	800439a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004376:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004386:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d831      	bhi.n	800441c <HAL_TIM_ReadCapturedValue+0x78>
 80043b8:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	0800441d 	.word	0x0800441d
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	0800441d 	.word	0x0800441d
 80043d0:	080043ff 	.word	0x080043ff
 80043d4:	0800441d 	.word	0x0800441d
 80043d8:	0800441d 	.word	0x0800441d
 80043dc:	0800441d 	.word	0x0800441d
 80043e0:	08004409 	.word	0x08004409
 80043e4:	0800441d 	.word	0x0800441d
 80043e8:	0800441d 	.word	0x0800441d
 80043ec:	0800441d 	.word	0x0800441d
 80043f0:	08004413 	.word	0x08004413
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fa:	60fb      	str	r3, [r7, #12]

      break;
 80043fc:	e00f      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	60fb      	str	r3, [r7, #12]

      break;
 8004406:	e00a      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440e:	60fb      	str	r3, [r7, #12]

      break;
 8004410:	e005      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	60fb      	str	r3, [r7, #12]

      break;
 800441a:	e000      	b.n	800441e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800441c:	bf00      	nop
  }

  return tmpreg;
 800441e:	68fb      	ldr	r3, [r7, #12]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7f1b      	ldrb	r3, [r3, #28]
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a40      	ldr	r2, [pc, #256]	@ (8004580 <TIM_Base_SetConfig+0x114>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800448a:	d00f      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a3d      	ldr	r2, [pc, #244]	@ (8004584 <TIM_Base_SetConfig+0x118>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00b      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a3c      	ldr	r2, [pc, #240]	@ (8004588 <TIM_Base_SetConfig+0x11c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d007      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3b      	ldr	r2, [pc, #236]	@ (800458c <TIM_Base_SetConfig+0x120>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3a      	ldr	r2, [pc, #232]	@ (8004590 <TIM_Base_SetConfig+0x124>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d108      	bne.n	80044be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004580 <TIM_Base_SetConfig+0x114>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01f      	beq.n	8004506 <TIM_Base_SetConfig+0x9a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044cc:	d01b      	beq.n	8004506 <TIM_Base_SetConfig+0x9a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004584 <TIM_Base_SetConfig+0x118>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d017      	beq.n	8004506 <TIM_Base_SetConfig+0x9a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004588 <TIM_Base_SetConfig+0x11c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <TIM_Base_SetConfig+0x9a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2a      	ldr	r2, [pc, #168]	@ (800458c <TIM_Base_SetConfig+0x120>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00f      	beq.n	8004506 <TIM_Base_SetConfig+0x9a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a29      	ldr	r2, [pc, #164]	@ (8004590 <TIM_Base_SetConfig+0x124>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00b      	beq.n	8004506 <TIM_Base_SetConfig+0x9a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a28      	ldr	r2, [pc, #160]	@ (8004594 <TIM_Base_SetConfig+0x128>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d007      	beq.n	8004506 <TIM_Base_SetConfig+0x9a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a27      	ldr	r2, [pc, #156]	@ (8004598 <TIM_Base_SetConfig+0x12c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d003      	beq.n	8004506 <TIM_Base_SetConfig+0x9a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a26      	ldr	r2, [pc, #152]	@ (800459c <TIM_Base_SetConfig+0x130>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d108      	bne.n	8004518 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a10      	ldr	r2, [pc, #64]	@ (8004580 <TIM_Base_SetConfig+0x114>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00f      	beq.n	8004564 <TIM_Base_SetConfig+0xf8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a12      	ldr	r2, [pc, #72]	@ (8004590 <TIM_Base_SetConfig+0x124>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00b      	beq.n	8004564 <TIM_Base_SetConfig+0xf8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a11      	ldr	r2, [pc, #68]	@ (8004594 <TIM_Base_SetConfig+0x128>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d007      	beq.n	8004564 <TIM_Base_SetConfig+0xf8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a10      	ldr	r2, [pc, #64]	@ (8004598 <TIM_Base_SetConfig+0x12c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_Base_SetConfig+0xf8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a0f      	ldr	r2, [pc, #60]	@ (800459c <TIM_Base_SetConfig+0x130>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d103      	bne.n	800456c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	615a      	str	r2, [r3, #20]
}
 8004572:	bf00      	nop
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800
 800458c:	40000c00 	.word	0x40000c00
 8004590:	40013400 	.word	0x40013400
 8004594:	40014000 	.word	0x40014000
 8004598:	40014400 	.word	0x40014400
 800459c:	40014800 	.word	0x40014800

080045a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f023 0201 	bic.w	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f023 0302 	bic.w	r3, r3, #2
 80045ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a2c      	ldr	r2, [pc, #176]	@ (80046ac <TIM_OC1_SetConfig+0x10c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00f      	beq.n	8004620 <TIM_OC1_SetConfig+0x80>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a2b      	ldr	r2, [pc, #172]	@ (80046b0 <TIM_OC1_SetConfig+0x110>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00b      	beq.n	8004620 <TIM_OC1_SetConfig+0x80>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a2a      	ldr	r2, [pc, #168]	@ (80046b4 <TIM_OC1_SetConfig+0x114>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d007      	beq.n	8004620 <TIM_OC1_SetConfig+0x80>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a29      	ldr	r2, [pc, #164]	@ (80046b8 <TIM_OC1_SetConfig+0x118>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_OC1_SetConfig+0x80>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a28      	ldr	r2, [pc, #160]	@ (80046bc <TIM_OC1_SetConfig+0x11c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d10c      	bne.n	800463a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 0308 	bic.w	r3, r3, #8
 8004626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a1b      	ldr	r2, [pc, #108]	@ (80046ac <TIM_OC1_SetConfig+0x10c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00f      	beq.n	8004662 <TIM_OC1_SetConfig+0xc2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a1a      	ldr	r2, [pc, #104]	@ (80046b0 <TIM_OC1_SetConfig+0x110>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00b      	beq.n	8004662 <TIM_OC1_SetConfig+0xc2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a19      	ldr	r2, [pc, #100]	@ (80046b4 <TIM_OC1_SetConfig+0x114>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d007      	beq.n	8004662 <TIM_OC1_SetConfig+0xc2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a18      	ldr	r2, [pc, #96]	@ (80046b8 <TIM_OC1_SetConfig+0x118>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d003      	beq.n	8004662 <TIM_OC1_SetConfig+0xc2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a17      	ldr	r2, [pc, #92]	@ (80046bc <TIM_OC1_SetConfig+0x11c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d111      	bne.n	8004686 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	621a      	str	r2, [r3, #32]
}
 80046a0:	bf00      	nop
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	40013400 	.word	0x40013400
 80046b4:	40014000 	.word	0x40014000
 80046b8:	40014400 	.word	0x40014400
 80046bc:	40014800 	.word	0x40014800

080046c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	f023 0210 	bic.w	r2, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 0320 	bic.w	r3, r3, #32
 800470e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a28      	ldr	r2, [pc, #160]	@ (80047c0 <TIM_OC2_SetConfig+0x100>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_OC2_SetConfig+0x6c>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a27      	ldr	r2, [pc, #156]	@ (80047c4 <TIM_OC2_SetConfig+0x104>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10d      	bne.n	8004748 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a1d      	ldr	r2, [pc, #116]	@ (80047c0 <TIM_OC2_SetConfig+0x100>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00f      	beq.n	8004770 <TIM_OC2_SetConfig+0xb0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a1c      	ldr	r2, [pc, #112]	@ (80047c4 <TIM_OC2_SetConfig+0x104>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00b      	beq.n	8004770 <TIM_OC2_SetConfig+0xb0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a1b      	ldr	r2, [pc, #108]	@ (80047c8 <TIM_OC2_SetConfig+0x108>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d007      	beq.n	8004770 <TIM_OC2_SetConfig+0xb0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a1a      	ldr	r2, [pc, #104]	@ (80047cc <TIM_OC2_SetConfig+0x10c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_OC2_SetConfig+0xb0>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a19      	ldr	r2, [pc, #100]	@ (80047d0 <TIM_OC2_SetConfig+0x110>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d113      	bne.n	8004798 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800477e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40013400 	.word	0x40013400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800

080047d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a27      	ldr	r2, [pc, #156]	@ (80048d0 <TIM_OC3_SetConfig+0xfc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_OC3_SetConfig+0x6a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a26      	ldr	r2, [pc, #152]	@ (80048d4 <TIM_OC3_SetConfig+0x100>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d10d      	bne.n	800485a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a1c      	ldr	r2, [pc, #112]	@ (80048d0 <TIM_OC3_SetConfig+0xfc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00f      	beq.n	8004882 <TIM_OC3_SetConfig+0xae>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a1b      	ldr	r2, [pc, #108]	@ (80048d4 <TIM_OC3_SetConfig+0x100>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00b      	beq.n	8004882 <TIM_OC3_SetConfig+0xae>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a1a      	ldr	r2, [pc, #104]	@ (80048d8 <TIM_OC3_SetConfig+0x104>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <TIM_OC3_SetConfig+0xae>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a19      	ldr	r2, [pc, #100]	@ (80048dc <TIM_OC3_SetConfig+0x108>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_OC3_SetConfig+0xae>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a18      	ldr	r2, [pc, #96]	@ (80048e0 <TIM_OC3_SetConfig+0x10c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d113      	bne.n	80048aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	621a      	str	r2, [r3, #32]
}
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	40012c00 	.word	0x40012c00
 80048d4:	40013400 	.word	0x40013400
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40014400 	.word	0x40014400
 80048e0:	40014800 	.word	0x40014800

080048e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800491e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	021b      	lsls	r3, r3, #8
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	031b      	lsls	r3, r3, #12
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a18      	ldr	r2, [pc, #96]	@ (80049a4 <TIM_OC4_SetConfig+0xc0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00f      	beq.n	8004968 <TIM_OC4_SetConfig+0x84>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a17      	ldr	r2, [pc, #92]	@ (80049a8 <TIM_OC4_SetConfig+0xc4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00b      	beq.n	8004968 <TIM_OC4_SetConfig+0x84>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a16      	ldr	r2, [pc, #88]	@ (80049ac <TIM_OC4_SetConfig+0xc8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d007      	beq.n	8004968 <TIM_OC4_SetConfig+0x84>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a15      	ldr	r2, [pc, #84]	@ (80049b0 <TIM_OC4_SetConfig+0xcc>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_OC4_SetConfig+0x84>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a14      	ldr	r2, [pc, #80]	@ (80049b4 <TIM_OC4_SetConfig+0xd0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d109      	bne.n	800497c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800496e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	019b      	lsls	r3, r3, #6
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	40013400 	.word	0x40013400
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40014400 	.word	0x40014400
 80049b4:	40014800 	.word	0x40014800

080049b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80049fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a17      	ldr	r2, [pc, #92]	@ (8004a6c <TIM_OC5_SetConfig+0xb4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00f      	beq.n	8004a32 <TIM_OC5_SetConfig+0x7a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a16      	ldr	r2, [pc, #88]	@ (8004a70 <TIM_OC5_SetConfig+0xb8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00b      	beq.n	8004a32 <TIM_OC5_SetConfig+0x7a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a15      	ldr	r2, [pc, #84]	@ (8004a74 <TIM_OC5_SetConfig+0xbc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d007      	beq.n	8004a32 <TIM_OC5_SetConfig+0x7a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a14      	ldr	r2, [pc, #80]	@ (8004a78 <TIM_OC5_SetConfig+0xc0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_OC5_SetConfig+0x7a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a13      	ldr	r2, [pc, #76]	@ (8004a7c <TIM_OC5_SetConfig+0xc4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d109      	bne.n	8004a46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40013400 	.word	0x40013400
 8004a74:	40014000 	.word	0x40014000
 8004a78:	40014400 	.word	0x40014400
 8004a7c:	40014800 	.word	0x40014800

08004a80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	051b      	lsls	r3, r3, #20
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a18      	ldr	r2, [pc, #96]	@ (8004b38 <TIM_OC6_SetConfig+0xb8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00f      	beq.n	8004afc <TIM_OC6_SetConfig+0x7c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a17      	ldr	r2, [pc, #92]	@ (8004b3c <TIM_OC6_SetConfig+0xbc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00b      	beq.n	8004afc <TIM_OC6_SetConfig+0x7c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a16      	ldr	r2, [pc, #88]	@ (8004b40 <TIM_OC6_SetConfig+0xc0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d007      	beq.n	8004afc <TIM_OC6_SetConfig+0x7c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a15      	ldr	r2, [pc, #84]	@ (8004b44 <TIM_OC6_SetConfig+0xc4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_OC6_SetConfig+0x7c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a14      	ldr	r2, [pc, #80]	@ (8004b48 <TIM_OC6_SetConfig+0xc8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d109      	bne.n	8004b10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	029b      	lsls	r3, r3, #10
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40013400 	.word	0x40013400
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800

08004b4c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b68:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b7a:	f023 0307 	bic.w	r3, r3, #7
 8004b7e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b70      	cmp	r3, #112	@ 0x70
 8004b98:	d01a      	beq.n	8004bd0 <TIM_SlaveTimer_SetConfig+0x84>
 8004b9a:	2b70      	cmp	r3, #112	@ 0x70
 8004b9c:	d860      	bhi.n	8004c60 <TIM_SlaveTimer_SetConfig+0x114>
 8004b9e:	2b60      	cmp	r3, #96	@ 0x60
 8004ba0:	d054      	beq.n	8004c4c <TIM_SlaveTimer_SetConfig+0x100>
 8004ba2:	2b60      	cmp	r3, #96	@ 0x60
 8004ba4:	d85c      	bhi.n	8004c60 <TIM_SlaveTimer_SetConfig+0x114>
 8004ba6:	2b50      	cmp	r3, #80	@ 0x50
 8004ba8:	d046      	beq.n	8004c38 <TIM_SlaveTimer_SetConfig+0xec>
 8004baa:	2b50      	cmp	r3, #80	@ 0x50
 8004bac:	d858      	bhi.n	8004c60 <TIM_SlaveTimer_SetConfig+0x114>
 8004bae:	2b40      	cmp	r3, #64	@ 0x40
 8004bb0:	d019      	beq.n	8004be6 <TIM_SlaveTimer_SetConfig+0x9a>
 8004bb2:	2b40      	cmp	r3, #64	@ 0x40
 8004bb4:	d854      	bhi.n	8004c60 <TIM_SlaveTimer_SetConfig+0x114>
 8004bb6:	2b30      	cmp	r3, #48	@ 0x30
 8004bb8:	d055      	beq.n	8004c66 <TIM_SlaveTimer_SetConfig+0x11a>
 8004bba:	2b30      	cmp	r3, #48	@ 0x30
 8004bbc:	d850      	bhi.n	8004c60 <TIM_SlaveTimer_SetConfig+0x114>
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d051      	beq.n	8004c66 <TIM_SlaveTimer_SetConfig+0x11a>
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d84c      	bhi.n	8004c60 <TIM_SlaveTimer_SetConfig+0x114>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d04d      	beq.n	8004c66 <TIM_SlaveTimer_SetConfig+0x11a>
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d04b      	beq.n	8004c66 <TIM_SlaveTimer_SetConfig+0x11a>
 8004bce:	e047      	b.n	8004c60 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004be0:	f000 f9e6 	bl	8004fb0 <TIM_ETR_SetConfig>
      break;
 8004be4:	e040      	b.n	8004c68 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d101      	bne.n	8004bf2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e03b      	b.n	8004c6a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6a1a      	ldr	r2, [r3, #32]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c18:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
      break;
 8004c36:	e017      	b.n	8004c68 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c44:	461a      	mov	r2, r3
 8004c46:	f000 f883 	bl	8004d50 <TIM_TI1_ConfigInputStage>
      break;
 8004c4a:	e00d      	b.n	8004c68 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f000 f8e5 	bl	8004e28 <TIM_TI2_ConfigInputStage>
      break;
 8004c5e:	e003      	b.n	8004c68 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	75fb      	strb	r3, [r7, #23]
      break;
 8004c64:	e000      	b.n	8004c68 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004c66:	bf00      	nop
  }

  return status;
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f023 0201 	bic.w	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a26      	ldr	r2, [pc, #152]	@ (8004d38 <TIM_TI1_SetConfig+0xc4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d017      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x5e>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca8:	d013      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x5e>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a23      	ldr	r2, [pc, #140]	@ (8004d3c <TIM_TI1_SetConfig+0xc8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00f      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x5e>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a22      	ldr	r2, [pc, #136]	@ (8004d40 <TIM_TI1_SetConfig+0xcc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x5e>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a21      	ldr	r2, [pc, #132]	@ (8004d44 <TIM_TI1_SetConfig+0xd0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x5e>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a20      	ldr	r2, [pc, #128]	@ (8004d48 <TIM_TI1_SetConfig+0xd4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_TI1_SetConfig+0x5e>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d4c <TIM_TI1_SetConfig+0xd8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <TIM_TI1_SetConfig+0x62>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <TIM_TI1_SetConfig+0x64>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	e003      	b.n	8004cf6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f023 030a 	bic.w	r3, r3, #10
 8004d10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f003 030a 	and.w	r3, r3, #10
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40000c00 	.word	0x40000c00
 8004d48:	40013400 	.word	0x40013400
 8004d4c:	40014000 	.word	0x40014000

08004d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 030a 	bic.w	r3, r3, #10
 8004d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b087      	sub	sp, #28
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0210 	bic.w	r2, r3, #16
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	031b      	lsls	r3, r3, #12
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	621a      	str	r2, [r3, #32]
}
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	f023 0210 	bic.w	r2, r3, #16
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	031b      	lsls	r3, r3, #12
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	621a      	str	r2, [r3, #32]
}
 8004e7c:	bf00      	nop
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f023 0303 	bic.w	r3, r3, #3
 8004eb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ec4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	621a      	str	r2, [r3, #32]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	031b      	lsls	r3, r3, #12
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004f52:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	031b      	lsls	r3, r3, #12
 8004f58:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f043 0307 	orr.w	r3, r3, #7
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	021a      	lsls	r2, r3, #8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	2201      	movs	r2, #1
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1a      	ldr	r2, [r3, #32]
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	43db      	mvns	r3, r3
 8005012:	401a      	ands	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	fa01 f303 	lsl.w	r3, r1, r3
 8005028:	431a      	orrs	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005050:	2302      	movs	r3, #2
 8005052:	e068      	b.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2e      	ldr	r2, [pc, #184]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d004      	beq.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2d      	ldr	r2, [pc, #180]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d108      	bne.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800508e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01d      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c6:	d018      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1b      	ldr	r2, [pc, #108]	@ (800513c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a18      	ldr	r2, [pc, #96]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a13      	ldr	r2, [pc, #76]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a14      	ldr	r2, [pc, #80]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d10c      	bne.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	4313      	orrs	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40012c00 	.word	0x40012c00
 8005138:	40013400 	.word	0x40013400
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40014000 	.word	0x40014000

0800514c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e040      	b.n	800521c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fb fe9c 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2224      	movs	r2, #36	@ 0x24
 80051b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fb6a 	bl	80058a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f8af 	bl	8005338 <UART_SetConfig>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e01b      	b.n	800521c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fbe9 	bl	80059ec <UART_CheckIdleState>
 800521a:	4603      	mov	r3, r0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08a      	sub	sp, #40	@ 0x28
 8005228:	af02      	add	r7, sp, #8
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005238:	2b20      	cmp	r3, #32
 800523a:	d177      	bne.n	800532c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <HAL_UART_Transmit+0x24>
 8005242:	88fb      	ldrh	r3, [r7, #6]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e070      	b.n	800532e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2221      	movs	r2, #33	@ 0x21
 8005258:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800525a:	f7fc f837 	bl	80012cc <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005278:	d108      	bne.n	800528c <HAL_UART_Transmit+0x68>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d104      	bne.n	800528c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	e003      	b.n	8005294 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005290:	2300      	movs	r3, #0
 8005292:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005294:	e02f      	b.n	80052f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2200      	movs	r2, #0
 800529e:	2180      	movs	r1, #128	@ 0x80
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fc4b 	bl	8005b3c <UART_WaitOnFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e03b      	b.n	800532e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10b      	bne.n	80052d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	881a      	ldrh	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c8:	b292      	uxth	r2, r2
 80052ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	3302      	adds	r3, #2
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	e007      	b.n	80052e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	3301      	adds	r3, #1
 80052e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1c9      	bne.n	8005296 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2200      	movs	r2, #0
 800530a:	2140      	movs	r1, #64	@ 0x40
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 fc15 	bl	8005b3c <UART_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e005      	b.n	800532e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e000      	b.n	800532e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
  }
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800533c:	b08a      	sub	sp, #40	@ 0x28
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	431a      	orrs	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	4313      	orrs	r3, r2
 800535e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4ba4      	ldr	r3, [pc, #656]	@ (80055f8 <UART_SetConfig+0x2c0>)
 8005368:	4013      	ands	r3, r2
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005370:	430b      	orrs	r3, r1
 8005372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a99      	ldr	r2, [pc, #612]	@ (80055fc <UART_SetConfig+0x2c4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a0:	4313      	orrs	r3, r2
 80053a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b4:	430a      	orrs	r2, r1
 80053b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a90      	ldr	r2, [pc, #576]	@ (8005600 <UART_SetConfig+0x2c8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d126      	bne.n	8005410 <UART_SetConfig+0xd8>
 80053c2:	4b90      	ldr	r3, [pc, #576]	@ (8005604 <UART_SetConfig+0x2cc>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d81b      	bhi.n	8005408 <UART_SetConfig+0xd0>
 80053d0:	a201      	add	r2, pc, #4	@ (adr r2, 80053d8 <UART_SetConfig+0xa0>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	080053e9 	.word	0x080053e9
 80053dc:	080053f9 	.word	0x080053f9
 80053e0:	080053f1 	.word	0x080053f1
 80053e4:	08005401 	.word	0x08005401
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ee:	e116      	b.n	800561e <UART_SetConfig+0x2e6>
 80053f0:	2302      	movs	r3, #2
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053f6:	e112      	b.n	800561e <UART_SetConfig+0x2e6>
 80053f8:	2304      	movs	r3, #4
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053fe:	e10e      	b.n	800561e <UART_SetConfig+0x2e6>
 8005400:	2308      	movs	r3, #8
 8005402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005406:	e10a      	b.n	800561e <UART_SetConfig+0x2e6>
 8005408:	2310      	movs	r3, #16
 800540a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800540e:	e106      	b.n	800561e <UART_SetConfig+0x2e6>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a7c      	ldr	r2, [pc, #496]	@ (8005608 <UART_SetConfig+0x2d0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d138      	bne.n	800548c <UART_SetConfig+0x154>
 800541a:	4b7a      	ldr	r3, [pc, #488]	@ (8005604 <UART_SetConfig+0x2cc>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005420:	f003 030c 	and.w	r3, r3, #12
 8005424:	2b0c      	cmp	r3, #12
 8005426:	d82d      	bhi.n	8005484 <UART_SetConfig+0x14c>
 8005428:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <UART_SetConfig+0xf8>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005465 	.word	0x08005465
 8005434:	08005485 	.word	0x08005485
 8005438:	08005485 	.word	0x08005485
 800543c:	08005485 	.word	0x08005485
 8005440:	08005475 	.word	0x08005475
 8005444:	08005485 	.word	0x08005485
 8005448:	08005485 	.word	0x08005485
 800544c:	08005485 	.word	0x08005485
 8005450:	0800546d 	.word	0x0800546d
 8005454:	08005485 	.word	0x08005485
 8005458:	08005485 	.word	0x08005485
 800545c:	08005485 	.word	0x08005485
 8005460:	0800547d 	.word	0x0800547d
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800546a:	e0d8      	b.n	800561e <UART_SetConfig+0x2e6>
 800546c:	2302      	movs	r3, #2
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005472:	e0d4      	b.n	800561e <UART_SetConfig+0x2e6>
 8005474:	2304      	movs	r3, #4
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547a:	e0d0      	b.n	800561e <UART_SetConfig+0x2e6>
 800547c:	2308      	movs	r3, #8
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005482:	e0cc      	b.n	800561e <UART_SetConfig+0x2e6>
 8005484:	2310      	movs	r3, #16
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800548a:	e0c8      	b.n	800561e <UART_SetConfig+0x2e6>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a5e      	ldr	r2, [pc, #376]	@ (800560c <UART_SetConfig+0x2d4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d125      	bne.n	80054e2 <UART_SetConfig+0x1aa>
 8005496:	4b5b      	ldr	r3, [pc, #364]	@ (8005604 <UART_SetConfig+0x2cc>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054a0:	2b30      	cmp	r3, #48	@ 0x30
 80054a2:	d016      	beq.n	80054d2 <UART_SetConfig+0x19a>
 80054a4:	2b30      	cmp	r3, #48	@ 0x30
 80054a6:	d818      	bhi.n	80054da <UART_SetConfig+0x1a2>
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d00a      	beq.n	80054c2 <UART_SetConfig+0x18a>
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d814      	bhi.n	80054da <UART_SetConfig+0x1a2>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <UART_SetConfig+0x182>
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d008      	beq.n	80054ca <UART_SetConfig+0x192>
 80054b8:	e00f      	b.n	80054da <UART_SetConfig+0x1a2>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054c0:	e0ad      	b.n	800561e <UART_SetConfig+0x2e6>
 80054c2:	2302      	movs	r3, #2
 80054c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054c8:	e0a9      	b.n	800561e <UART_SetConfig+0x2e6>
 80054ca:	2304      	movs	r3, #4
 80054cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054d0:	e0a5      	b.n	800561e <UART_SetConfig+0x2e6>
 80054d2:	2308      	movs	r3, #8
 80054d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054d8:	e0a1      	b.n	800561e <UART_SetConfig+0x2e6>
 80054da:	2310      	movs	r3, #16
 80054dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054e0:	e09d      	b.n	800561e <UART_SetConfig+0x2e6>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a4a      	ldr	r2, [pc, #296]	@ (8005610 <UART_SetConfig+0x2d8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d125      	bne.n	8005538 <UART_SetConfig+0x200>
 80054ec:	4b45      	ldr	r3, [pc, #276]	@ (8005604 <UART_SetConfig+0x2cc>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80054f8:	d016      	beq.n	8005528 <UART_SetConfig+0x1f0>
 80054fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80054fc:	d818      	bhi.n	8005530 <UART_SetConfig+0x1f8>
 80054fe:	2b80      	cmp	r3, #128	@ 0x80
 8005500:	d00a      	beq.n	8005518 <UART_SetConfig+0x1e0>
 8005502:	2b80      	cmp	r3, #128	@ 0x80
 8005504:	d814      	bhi.n	8005530 <UART_SetConfig+0x1f8>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <UART_SetConfig+0x1d8>
 800550a:	2b40      	cmp	r3, #64	@ 0x40
 800550c:	d008      	beq.n	8005520 <UART_SetConfig+0x1e8>
 800550e:	e00f      	b.n	8005530 <UART_SetConfig+0x1f8>
 8005510:	2300      	movs	r3, #0
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005516:	e082      	b.n	800561e <UART_SetConfig+0x2e6>
 8005518:	2302      	movs	r3, #2
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800551e:	e07e      	b.n	800561e <UART_SetConfig+0x2e6>
 8005520:	2304      	movs	r3, #4
 8005522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005526:	e07a      	b.n	800561e <UART_SetConfig+0x2e6>
 8005528:	2308      	movs	r3, #8
 800552a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800552e:	e076      	b.n	800561e <UART_SetConfig+0x2e6>
 8005530:	2310      	movs	r3, #16
 8005532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005536:	e072      	b.n	800561e <UART_SetConfig+0x2e6>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a35      	ldr	r2, [pc, #212]	@ (8005614 <UART_SetConfig+0x2dc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d12a      	bne.n	8005598 <UART_SetConfig+0x260>
 8005542:	4b30      	ldr	r3, [pc, #192]	@ (8005604 <UART_SetConfig+0x2cc>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005548:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800554c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005550:	d01a      	beq.n	8005588 <UART_SetConfig+0x250>
 8005552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005556:	d81b      	bhi.n	8005590 <UART_SetConfig+0x258>
 8005558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800555c:	d00c      	beq.n	8005578 <UART_SetConfig+0x240>
 800555e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005562:	d815      	bhi.n	8005590 <UART_SetConfig+0x258>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <UART_SetConfig+0x238>
 8005568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800556c:	d008      	beq.n	8005580 <UART_SetConfig+0x248>
 800556e:	e00f      	b.n	8005590 <UART_SetConfig+0x258>
 8005570:	2300      	movs	r3, #0
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005576:	e052      	b.n	800561e <UART_SetConfig+0x2e6>
 8005578:	2302      	movs	r3, #2
 800557a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800557e:	e04e      	b.n	800561e <UART_SetConfig+0x2e6>
 8005580:	2304      	movs	r3, #4
 8005582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005586:	e04a      	b.n	800561e <UART_SetConfig+0x2e6>
 8005588:	2308      	movs	r3, #8
 800558a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800558e:	e046      	b.n	800561e <UART_SetConfig+0x2e6>
 8005590:	2310      	movs	r3, #16
 8005592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005596:	e042      	b.n	800561e <UART_SetConfig+0x2e6>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a17      	ldr	r2, [pc, #92]	@ (80055fc <UART_SetConfig+0x2c4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d13a      	bne.n	8005618 <UART_SetConfig+0x2e0>
 80055a2:	4b18      	ldr	r3, [pc, #96]	@ (8005604 <UART_SetConfig+0x2cc>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055b0:	d01a      	beq.n	80055e8 <UART_SetConfig+0x2b0>
 80055b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055b6:	d81b      	bhi.n	80055f0 <UART_SetConfig+0x2b8>
 80055b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055bc:	d00c      	beq.n	80055d8 <UART_SetConfig+0x2a0>
 80055be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c2:	d815      	bhi.n	80055f0 <UART_SetConfig+0x2b8>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <UART_SetConfig+0x298>
 80055c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055cc:	d008      	beq.n	80055e0 <UART_SetConfig+0x2a8>
 80055ce:	e00f      	b.n	80055f0 <UART_SetConfig+0x2b8>
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055d6:	e022      	b.n	800561e <UART_SetConfig+0x2e6>
 80055d8:	2302      	movs	r3, #2
 80055da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055de:	e01e      	b.n	800561e <UART_SetConfig+0x2e6>
 80055e0:	2304      	movs	r3, #4
 80055e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055e6:	e01a      	b.n	800561e <UART_SetConfig+0x2e6>
 80055e8:	2308      	movs	r3, #8
 80055ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ee:	e016      	b.n	800561e <UART_SetConfig+0x2e6>
 80055f0:	2310      	movs	r3, #16
 80055f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f6:	e012      	b.n	800561e <UART_SetConfig+0x2e6>
 80055f8:	efff69f3 	.word	0xefff69f3
 80055fc:	40008000 	.word	0x40008000
 8005600:	40013800 	.word	0x40013800
 8005604:	40021000 	.word	0x40021000
 8005608:	40004400 	.word	0x40004400
 800560c:	40004800 	.word	0x40004800
 8005610:	40004c00 	.word	0x40004c00
 8005614:	40005000 	.word	0x40005000
 8005618:	2310      	movs	r3, #16
 800561a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a9f      	ldr	r2, [pc, #636]	@ (80058a0 <UART_SetConfig+0x568>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d17a      	bne.n	800571e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005628:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800562c:	2b08      	cmp	r3, #8
 800562e:	d824      	bhi.n	800567a <UART_SetConfig+0x342>
 8005630:	a201      	add	r2, pc, #4	@ (adr r2, 8005638 <UART_SetConfig+0x300>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	0800565d 	.word	0x0800565d
 800563c:	0800567b 	.word	0x0800567b
 8005640:	08005665 	.word	0x08005665
 8005644:	0800567b 	.word	0x0800567b
 8005648:	0800566b 	.word	0x0800566b
 800564c:	0800567b 	.word	0x0800567b
 8005650:	0800567b 	.word	0x0800567b
 8005654:	0800567b 	.word	0x0800567b
 8005658:	08005673 	.word	0x08005673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800565c:	f7fc ff18 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 8005660:	61f8      	str	r0, [r7, #28]
        break;
 8005662:	e010      	b.n	8005686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005664:	4b8f      	ldr	r3, [pc, #572]	@ (80058a4 <UART_SetConfig+0x56c>)
 8005666:	61fb      	str	r3, [r7, #28]
        break;
 8005668:	e00d      	b.n	8005686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566a:	f7fc fe79 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 800566e:	61f8      	str	r0, [r7, #28]
        break;
 8005670:	e009      	b.n	8005686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005676:	61fb      	str	r3, [r7, #28]
        break;
 8005678:	e005      	b.n	8005686 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005684:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 80fb 	beq.w	8005884 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	4413      	add	r3, r2
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	429a      	cmp	r2, r3
 800569c:	d305      	bcc.n	80056aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d903      	bls.n	80056b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80056b0:	e0e8      	b.n	8005884 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	2200      	movs	r2, #0
 80056b6:	461c      	mov	r4, r3
 80056b8:	4615      	mov	r5, r2
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	022b      	lsls	r3, r5, #8
 80056c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80056c8:	0222      	lsls	r2, r4, #8
 80056ca:	68f9      	ldr	r1, [r7, #12]
 80056cc:	6849      	ldr	r1, [r1, #4]
 80056ce:	0849      	lsrs	r1, r1, #1
 80056d0:	2000      	movs	r0, #0
 80056d2:	4688      	mov	r8, r1
 80056d4:	4681      	mov	r9, r0
 80056d6:	eb12 0a08 	adds.w	sl, r2, r8
 80056da:	eb43 0b09 	adc.w	fp, r3, r9
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ec:	4650      	mov	r0, sl
 80056ee:	4659      	mov	r1, fp
 80056f0:	f7fa fdbe 	bl	8000270 <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4613      	mov	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005702:	d308      	bcc.n	8005716 <UART_SetConfig+0x3de>
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800570a:	d204      	bcs.n	8005716 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	60da      	str	r2, [r3, #12]
 8005714:	e0b6      	b.n	8005884 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800571c:	e0b2      	b.n	8005884 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005726:	d15e      	bne.n	80057e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005728:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800572c:	2b08      	cmp	r3, #8
 800572e:	d828      	bhi.n	8005782 <UART_SetConfig+0x44a>
 8005730:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <UART_SetConfig+0x400>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	0800575d 	.word	0x0800575d
 800573c:	08005765 	.word	0x08005765
 8005740:	0800576d 	.word	0x0800576d
 8005744:	08005783 	.word	0x08005783
 8005748:	08005773 	.word	0x08005773
 800574c:	08005783 	.word	0x08005783
 8005750:	08005783 	.word	0x08005783
 8005754:	08005783 	.word	0x08005783
 8005758:	0800577b 	.word	0x0800577b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800575c:	f7fc fe98 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 8005760:	61f8      	str	r0, [r7, #28]
        break;
 8005762:	e014      	b.n	800578e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005764:	f7fc feaa 	bl	80024bc <HAL_RCC_GetPCLK2Freq>
 8005768:	61f8      	str	r0, [r7, #28]
        break;
 800576a:	e010      	b.n	800578e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800576c:	4b4d      	ldr	r3, [pc, #308]	@ (80058a4 <UART_SetConfig+0x56c>)
 800576e:	61fb      	str	r3, [r7, #28]
        break;
 8005770:	e00d      	b.n	800578e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005772:	f7fc fdf5 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8005776:	61f8      	str	r0, [r7, #28]
        break;
 8005778:	e009      	b.n	800578e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800577e:	61fb      	str	r3, [r7, #28]
        break;
 8005780:	e005      	b.n	800578e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800578c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d077      	beq.n	8005884 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	005a      	lsls	r2, r3, #1
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	085b      	lsrs	r3, r3, #1
 800579e:	441a      	add	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b0f      	cmp	r3, #15
 80057ae:	d916      	bls.n	80057de <UART_SetConfig+0x4a6>
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b6:	d212      	bcs.n	80057de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f023 030f 	bic.w	r3, r3, #15
 80057c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	8afb      	ldrh	r3, [r7, #22]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	8afa      	ldrh	r2, [r7, #22]
 80057da:	60da      	str	r2, [r3, #12]
 80057dc:	e052      	b.n	8005884 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057e4:	e04e      	b.n	8005884 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d827      	bhi.n	800583e <UART_SetConfig+0x506>
 80057ee:	a201      	add	r2, pc, #4	@ (adr r2, 80057f4 <UART_SetConfig+0x4bc>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005819 	.word	0x08005819
 80057f8:	08005821 	.word	0x08005821
 80057fc:	08005829 	.word	0x08005829
 8005800:	0800583f 	.word	0x0800583f
 8005804:	0800582f 	.word	0x0800582f
 8005808:	0800583f 	.word	0x0800583f
 800580c:	0800583f 	.word	0x0800583f
 8005810:	0800583f 	.word	0x0800583f
 8005814:	08005837 	.word	0x08005837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005818:	f7fc fe3a 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 800581c:	61f8      	str	r0, [r7, #28]
        break;
 800581e:	e014      	b.n	800584a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7fc fe4c 	bl	80024bc <HAL_RCC_GetPCLK2Freq>
 8005824:	61f8      	str	r0, [r7, #28]
        break;
 8005826:	e010      	b.n	800584a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005828:	4b1e      	ldr	r3, [pc, #120]	@ (80058a4 <UART_SetConfig+0x56c>)
 800582a:	61fb      	str	r3, [r7, #28]
        break;
 800582c:	e00d      	b.n	800584a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582e:	f7fc fd97 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 8005832:	61f8      	str	r0, [r7, #28]
        break;
 8005834:	e009      	b.n	800584a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800583a:	61fb      	str	r3, [r7, #28]
        break;
 800583c:	e005      	b.n	800584a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005848:	bf00      	nop
    }

    if (pclk != 0U)
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d019      	beq.n	8005884 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	085a      	lsrs	r2, r3, #1
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	441a      	add	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005862:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b0f      	cmp	r3, #15
 8005868:	d909      	bls.n	800587e <UART_SetConfig+0x546>
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005870:	d205      	bcs.n	800587e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60da      	str	r2, [r3, #12]
 800587c:	e002      	b.n	8005884 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005890:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005894:	4618      	mov	r0, r3
 8005896:	3728      	adds	r7, #40	@ 0x28
 8005898:	46bd      	mov	sp, r7
 800589a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800589e:	bf00      	nop
 80058a0:	40008000 	.word	0x40008000
 80058a4:	00f42400 	.word	0x00f42400

080058a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01a      	beq.n	80059be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059a6:	d10a      	bne.n	80059be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	605a      	str	r2, [r3, #4]
  }
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b098      	sub	sp, #96	@ 0x60
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059fc:	f7fb fc66 	bl	80012cc <HAL_GetTick>
 8005a00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d12e      	bne.n	8005a6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f88c 	bl	8005b3c <UART_WaitOnFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d021      	beq.n	8005a6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e6      	bne.n	8005a2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e062      	b.n	8005b34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d149      	bne.n	8005b10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a84:	2200      	movs	r2, #0
 8005a86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f856 	bl	8005b3c <UART_WaitOnFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d03c      	beq.n	8005b10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e6      	bne.n	8005a96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3308      	adds	r3, #8
 8005ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ae8:	61fa      	str	r2, [r7, #28]
 8005aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	69b9      	ldr	r1, [r7, #24]
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	617b      	str	r3, [r7, #20]
   return(result);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e5      	bne.n	8005ac8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e011      	b.n	8005b34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3758      	adds	r7, #88	@ 0x58
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b4c:	e049      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b54:	d045      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b56:	f7fb fbb9 	bl	80012cc <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d302      	bcc.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e048      	b.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d031      	beq.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d110      	bne.n	8005bae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2208      	movs	r2, #8
 8005b92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f838 	bl	8005c0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e029      	b.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bbc:	d111      	bne.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f81e 	bl	8005c0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e00f      	b.n	8005c02 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4013      	ands	r3, r2
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	bf0c      	ite	eq
 8005bf2:	2301      	moveq	r3, #1
 8005bf4:	2300      	movne	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d0a6      	beq.n	8005b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b095      	sub	sp, #84	@ 0x54
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c30:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e6      	bne.n	8005c12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f023 0301 	bic.w	r3, r3, #1
 8005c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3308      	adds	r3, #8
 8005c62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e5      	bne.n	8005c44 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d118      	bne.n	8005cb2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f023 0310 	bic.w	r3, r3, #16
 8005c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6979      	ldr	r1, [r7, #20]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	613b      	str	r3, [r7, #16]
   return(result);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e6      	bne.n	8005c80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005cc6:	bf00      	nop
 8005cc8:	3754      	adds	r7, #84	@ 0x54
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
	...

08005cd4 <std>:
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	b510      	push	{r4, lr}
 8005cd8:	4604      	mov	r4, r0
 8005cda:	e9c0 3300 	strd	r3, r3, [r0]
 8005cde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ce2:	6083      	str	r3, [r0, #8]
 8005ce4:	8181      	strh	r1, [r0, #12]
 8005ce6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ce8:	81c2      	strh	r2, [r0, #14]
 8005cea:	6183      	str	r3, [r0, #24]
 8005cec:	4619      	mov	r1, r3
 8005cee:	2208      	movs	r2, #8
 8005cf0:	305c      	adds	r0, #92	@ 0x5c
 8005cf2:	f000 f906 	bl	8005f02 <memset>
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <std+0x58>)
 8005cf8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005d30 <std+0x5c>)
 8005cfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005d34 <std+0x60>)
 8005d00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <std+0x64>)
 8005d04:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d06:	4b0d      	ldr	r3, [pc, #52]	@ (8005d3c <std+0x68>)
 8005d08:	6224      	str	r4, [r4, #32]
 8005d0a:	429c      	cmp	r4, r3
 8005d0c:	d006      	beq.n	8005d1c <std+0x48>
 8005d0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d12:	4294      	cmp	r4, r2
 8005d14:	d002      	beq.n	8005d1c <std+0x48>
 8005d16:	33d0      	adds	r3, #208	@ 0xd0
 8005d18:	429c      	cmp	r4, r3
 8005d1a:	d105      	bne.n	8005d28 <std+0x54>
 8005d1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d24:	f000 b966 	b.w	8005ff4 <__retarget_lock_init_recursive>
 8005d28:	bd10      	pop	{r4, pc}
 8005d2a:	bf00      	nop
 8005d2c:	08005e7d 	.word	0x08005e7d
 8005d30:	08005e9f 	.word	0x08005e9f
 8005d34:	08005ed7 	.word	0x08005ed7
 8005d38:	08005efb 	.word	0x08005efb
 8005d3c:	20000248 	.word	0x20000248

08005d40 <stdio_exit_handler>:
 8005d40:	4a02      	ldr	r2, [pc, #8]	@ (8005d4c <stdio_exit_handler+0xc>)
 8005d42:	4903      	ldr	r1, [pc, #12]	@ (8005d50 <stdio_exit_handler+0x10>)
 8005d44:	4803      	ldr	r0, [pc, #12]	@ (8005d54 <stdio_exit_handler+0x14>)
 8005d46:	f000 b869 	b.w	8005e1c <_fwalk_sglue>
 8005d4a:	bf00      	nop
 8005d4c:	2000000c 	.word	0x2000000c
 8005d50:	08006895 	.word	0x08006895
 8005d54:	2000001c 	.word	0x2000001c

08005d58 <cleanup_stdio>:
 8005d58:	6841      	ldr	r1, [r0, #4]
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d8c <cleanup_stdio+0x34>)
 8005d5c:	4299      	cmp	r1, r3
 8005d5e:	b510      	push	{r4, lr}
 8005d60:	4604      	mov	r4, r0
 8005d62:	d001      	beq.n	8005d68 <cleanup_stdio+0x10>
 8005d64:	f000 fd96 	bl	8006894 <_fflush_r>
 8005d68:	68a1      	ldr	r1, [r4, #8]
 8005d6a:	4b09      	ldr	r3, [pc, #36]	@ (8005d90 <cleanup_stdio+0x38>)
 8005d6c:	4299      	cmp	r1, r3
 8005d6e:	d002      	beq.n	8005d76 <cleanup_stdio+0x1e>
 8005d70:	4620      	mov	r0, r4
 8005d72:	f000 fd8f 	bl	8006894 <_fflush_r>
 8005d76:	68e1      	ldr	r1, [r4, #12]
 8005d78:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <cleanup_stdio+0x3c>)
 8005d7a:	4299      	cmp	r1, r3
 8005d7c:	d004      	beq.n	8005d88 <cleanup_stdio+0x30>
 8005d7e:	4620      	mov	r0, r4
 8005d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d84:	f000 bd86 	b.w	8006894 <_fflush_r>
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000248 	.word	0x20000248
 8005d90:	200002b0 	.word	0x200002b0
 8005d94:	20000318 	.word	0x20000318

08005d98 <global_stdio_init.part.0>:
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc8 <global_stdio_init.part.0+0x30>)
 8005d9c:	4c0b      	ldr	r4, [pc, #44]	@ (8005dcc <global_stdio_init.part.0+0x34>)
 8005d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd0 <global_stdio_init.part.0+0x38>)
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	4620      	mov	r0, r4
 8005da4:	2200      	movs	r2, #0
 8005da6:	2104      	movs	r1, #4
 8005da8:	f7ff ff94 	bl	8005cd4 <std>
 8005dac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005db0:	2201      	movs	r2, #1
 8005db2:	2109      	movs	r1, #9
 8005db4:	f7ff ff8e 	bl	8005cd4 <std>
 8005db8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc2:	2112      	movs	r1, #18
 8005dc4:	f7ff bf86 	b.w	8005cd4 <std>
 8005dc8:	20000380 	.word	0x20000380
 8005dcc:	20000248 	.word	0x20000248
 8005dd0:	08005d41 	.word	0x08005d41

08005dd4 <__sfp_lock_acquire>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	@ (8005ddc <__sfp_lock_acquire+0x8>)
 8005dd6:	f000 b90e 	b.w	8005ff6 <__retarget_lock_acquire_recursive>
 8005dda:	bf00      	nop
 8005ddc:	20000389 	.word	0x20000389

08005de0 <__sfp_lock_release>:
 8005de0:	4801      	ldr	r0, [pc, #4]	@ (8005de8 <__sfp_lock_release+0x8>)
 8005de2:	f000 b909 	b.w	8005ff8 <__retarget_lock_release_recursive>
 8005de6:	bf00      	nop
 8005de8:	20000389 	.word	0x20000389

08005dec <__sinit>:
 8005dec:	b510      	push	{r4, lr}
 8005dee:	4604      	mov	r4, r0
 8005df0:	f7ff fff0 	bl	8005dd4 <__sfp_lock_acquire>
 8005df4:	6a23      	ldr	r3, [r4, #32]
 8005df6:	b11b      	cbz	r3, 8005e00 <__sinit+0x14>
 8005df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dfc:	f7ff bff0 	b.w	8005de0 <__sfp_lock_release>
 8005e00:	4b04      	ldr	r3, [pc, #16]	@ (8005e14 <__sinit+0x28>)
 8005e02:	6223      	str	r3, [r4, #32]
 8005e04:	4b04      	ldr	r3, [pc, #16]	@ (8005e18 <__sinit+0x2c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f5      	bne.n	8005df8 <__sinit+0xc>
 8005e0c:	f7ff ffc4 	bl	8005d98 <global_stdio_init.part.0>
 8005e10:	e7f2      	b.n	8005df8 <__sinit+0xc>
 8005e12:	bf00      	nop
 8005e14:	08005d59 	.word	0x08005d59
 8005e18:	20000380 	.word	0x20000380

08005e1c <_fwalk_sglue>:
 8005e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e20:	4607      	mov	r7, r0
 8005e22:	4688      	mov	r8, r1
 8005e24:	4614      	mov	r4, r2
 8005e26:	2600      	movs	r6, #0
 8005e28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e2c:	f1b9 0901 	subs.w	r9, r9, #1
 8005e30:	d505      	bpl.n	8005e3e <_fwalk_sglue+0x22>
 8005e32:	6824      	ldr	r4, [r4, #0]
 8005e34:	2c00      	cmp	r4, #0
 8005e36:	d1f7      	bne.n	8005e28 <_fwalk_sglue+0xc>
 8005e38:	4630      	mov	r0, r6
 8005e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d907      	bls.n	8005e54 <_fwalk_sglue+0x38>
 8005e44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	d003      	beq.n	8005e54 <_fwalk_sglue+0x38>
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	4638      	mov	r0, r7
 8005e50:	47c0      	blx	r8
 8005e52:	4306      	orrs	r6, r0
 8005e54:	3568      	adds	r5, #104	@ 0x68
 8005e56:	e7e9      	b.n	8005e2c <_fwalk_sglue+0x10>

08005e58 <iprintf>:
 8005e58:	b40f      	push	{r0, r1, r2, r3}
 8005e5a:	b507      	push	{r0, r1, r2, lr}
 8005e5c:	4906      	ldr	r1, [pc, #24]	@ (8005e78 <iprintf+0x20>)
 8005e5e:	ab04      	add	r3, sp, #16
 8005e60:	6808      	ldr	r0, [r1, #0]
 8005e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e66:	6881      	ldr	r1, [r0, #8]
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	f000 f9e9 	bl	8006240 <_vfiprintf_r>
 8005e6e:	b003      	add	sp, #12
 8005e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e74:	b004      	add	sp, #16
 8005e76:	4770      	bx	lr
 8005e78:	20000018 	.word	0x20000018

08005e7c <__sread>:
 8005e7c:	b510      	push	{r4, lr}
 8005e7e:	460c      	mov	r4, r1
 8005e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e84:	f000 f868 	bl	8005f58 <_read_r>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	bfab      	itete	ge
 8005e8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e90:	181b      	addge	r3, r3, r0
 8005e92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e96:	bfac      	ite	ge
 8005e98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e9a:	81a3      	strhlt	r3, [r4, #12]
 8005e9c:	bd10      	pop	{r4, pc}

08005e9e <__swrite>:
 8005e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea2:	461f      	mov	r7, r3
 8005ea4:	898b      	ldrh	r3, [r1, #12]
 8005ea6:	05db      	lsls	r3, r3, #23
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	4616      	mov	r6, r2
 8005eae:	d505      	bpl.n	8005ebc <__swrite+0x1e>
 8005eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f000 f83c 	bl	8005f34 <_lseek_r>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	4632      	mov	r2, r6
 8005eca:	463b      	mov	r3, r7
 8005ecc:	4628      	mov	r0, r5
 8005ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed2:	f000 b853 	b.w	8005f7c <_write_r>

08005ed6 <__sseek>:
 8005ed6:	b510      	push	{r4, lr}
 8005ed8:	460c      	mov	r4, r1
 8005eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ede:	f000 f829 	bl	8005f34 <_lseek_r>
 8005ee2:	1c43      	adds	r3, r0, #1
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	bf15      	itete	ne
 8005ee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005eea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005eee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ef2:	81a3      	strheq	r3, [r4, #12]
 8005ef4:	bf18      	it	ne
 8005ef6:	81a3      	strhne	r3, [r4, #12]
 8005ef8:	bd10      	pop	{r4, pc}

08005efa <__sclose>:
 8005efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efe:	f000 b809 	b.w	8005f14 <_close_r>

08005f02 <memset>:
 8005f02:	4402      	add	r2, r0
 8005f04:	4603      	mov	r3, r0
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d100      	bne.n	8005f0c <memset+0xa>
 8005f0a:	4770      	bx	lr
 8005f0c:	f803 1b01 	strb.w	r1, [r3], #1
 8005f10:	e7f9      	b.n	8005f06 <memset+0x4>
	...

08005f14 <_close_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4d06      	ldr	r5, [pc, #24]	@ (8005f30 <_close_r+0x1c>)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	f7fb f8c5 	bl	80010ae <_close>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_close_r+0x1a>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_close_r+0x1a>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	20000384 	.word	0x20000384

08005f34 <_lseek_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d07      	ldr	r5, [pc, #28]	@ (8005f54 <_lseek_r+0x20>)
 8005f38:	4604      	mov	r4, r0
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	2200      	movs	r2, #0
 8005f40:	602a      	str	r2, [r5, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f7fb f8da 	bl	80010fc <_lseek>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_lseek_r+0x1e>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_lseek_r+0x1e>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	20000384 	.word	0x20000384

08005f58 <_read_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4d07      	ldr	r5, [pc, #28]	@ (8005f78 <_read_r+0x20>)
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	4608      	mov	r0, r1
 8005f60:	4611      	mov	r1, r2
 8005f62:	2200      	movs	r2, #0
 8005f64:	602a      	str	r2, [r5, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f7fb f868 	bl	800103c <_read>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_read_r+0x1e>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_read_r+0x1e>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	20000384 	.word	0x20000384

08005f7c <_write_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4d07      	ldr	r5, [pc, #28]	@ (8005f9c <_write_r+0x20>)
 8005f80:	4604      	mov	r4, r0
 8005f82:	4608      	mov	r0, r1
 8005f84:	4611      	mov	r1, r2
 8005f86:	2200      	movs	r2, #0
 8005f88:	602a      	str	r2, [r5, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f7fb f873 	bl	8001076 <_write>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	d102      	bne.n	8005f9a <_write_r+0x1e>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	b103      	cbz	r3, 8005f9a <_write_r+0x1e>
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	20000384 	.word	0x20000384

08005fa0 <__errno>:
 8005fa0:	4b01      	ldr	r3, [pc, #4]	@ (8005fa8 <__errno+0x8>)
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20000018 	.word	0x20000018

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4d0d      	ldr	r5, [pc, #52]	@ (8005fe4 <__libc_init_array+0x38>)
 8005fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8005fe8 <__libc_init_array+0x3c>)
 8005fb2:	1b64      	subs	r4, r4, r5
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	2600      	movs	r6, #0
 8005fb8:	42a6      	cmp	r6, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8005fec <__libc_init_array+0x40>)
 8005fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8005ff0 <__libc_init_array+0x44>)
 8005fc0:	f000 fdb8 	bl	8006b34 <_init>
 8005fc4:	1b64      	subs	r4, r4, r5
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	2600      	movs	r6, #0
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd4:	4798      	blx	r3
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fde:	4798      	blx	r3
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	08006be0 	.word	0x08006be0
 8005fe8:	08006be0 	.word	0x08006be0
 8005fec:	08006be0 	.word	0x08006be0
 8005ff0:	08006be4 	.word	0x08006be4

08005ff4 <__retarget_lock_init_recursive>:
 8005ff4:	4770      	bx	lr

08005ff6 <__retarget_lock_acquire_recursive>:
 8005ff6:	4770      	bx	lr

08005ff8 <__retarget_lock_release_recursive>:
 8005ff8:	4770      	bx	lr
	...

08005ffc <_free_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4605      	mov	r5, r0
 8006000:	2900      	cmp	r1, #0
 8006002:	d041      	beq.n	8006088 <_free_r+0x8c>
 8006004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006008:	1f0c      	subs	r4, r1, #4
 800600a:	2b00      	cmp	r3, #0
 800600c:	bfb8      	it	lt
 800600e:	18e4      	addlt	r4, r4, r3
 8006010:	f000 f8e0 	bl	80061d4 <__malloc_lock>
 8006014:	4a1d      	ldr	r2, [pc, #116]	@ (800608c <_free_r+0x90>)
 8006016:	6813      	ldr	r3, [r2, #0]
 8006018:	b933      	cbnz	r3, 8006028 <_free_r+0x2c>
 800601a:	6063      	str	r3, [r4, #4]
 800601c:	6014      	str	r4, [r2, #0]
 800601e:	4628      	mov	r0, r5
 8006020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006024:	f000 b8dc 	b.w	80061e0 <__malloc_unlock>
 8006028:	42a3      	cmp	r3, r4
 800602a:	d908      	bls.n	800603e <_free_r+0x42>
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	1821      	adds	r1, r4, r0
 8006030:	428b      	cmp	r3, r1
 8006032:	bf01      	itttt	eq
 8006034:	6819      	ldreq	r1, [r3, #0]
 8006036:	685b      	ldreq	r3, [r3, #4]
 8006038:	1809      	addeq	r1, r1, r0
 800603a:	6021      	streq	r1, [r4, #0]
 800603c:	e7ed      	b.n	800601a <_free_r+0x1e>
 800603e:	461a      	mov	r2, r3
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	b10b      	cbz	r3, 8006048 <_free_r+0x4c>
 8006044:	42a3      	cmp	r3, r4
 8006046:	d9fa      	bls.n	800603e <_free_r+0x42>
 8006048:	6811      	ldr	r1, [r2, #0]
 800604a:	1850      	adds	r0, r2, r1
 800604c:	42a0      	cmp	r0, r4
 800604e:	d10b      	bne.n	8006068 <_free_r+0x6c>
 8006050:	6820      	ldr	r0, [r4, #0]
 8006052:	4401      	add	r1, r0
 8006054:	1850      	adds	r0, r2, r1
 8006056:	4283      	cmp	r3, r0
 8006058:	6011      	str	r1, [r2, #0]
 800605a:	d1e0      	bne.n	800601e <_free_r+0x22>
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	6053      	str	r3, [r2, #4]
 8006062:	4408      	add	r0, r1
 8006064:	6010      	str	r0, [r2, #0]
 8006066:	e7da      	b.n	800601e <_free_r+0x22>
 8006068:	d902      	bls.n	8006070 <_free_r+0x74>
 800606a:	230c      	movs	r3, #12
 800606c:	602b      	str	r3, [r5, #0]
 800606e:	e7d6      	b.n	800601e <_free_r+0x22>
 8006070:	6820      	ldr	r0, [r4, #0]
 8006072:	1821      	adds	r1, r4, r0
 8006074:	428b      	cmp	r3, r1
 8006076:	bf04      	itt	eq
 8006078:	6819      	ldreq	r1, [r3, #0]
 800607a:	685b      	ldreq	r3, [r3, #4]
 800607c:	6063      	str	r3, [r4, #4]
 800607e:	bf04      	itt	eq
 8006080:	1809      	addeq	r1, r1, r0
 8006082:	6021      	streq	r1, [r4, #0]
 8006084:	6054      	str	r4, [r2, #4]
 8006086:	e7ca      	b.n	800601e <_free_r+0x22>
 8006088:	bd38      	pop	{r3, r4, r5, pc}
 800608a:	bf00      	nop
 800608c:	20000390 	.word	0x20000390

08006090 <sbrk_aligned>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	4e0f      	ldr	r6, [pc, #60]	@ (80060d0 <sbrk_aligned+0x40>)
 8006094:	460c      	mov	r4, r1
 8006096:	6831      	ldr	r1, [r6, #0]
 8006098:	4605      	mov	r5, r0
 800609a:	b911      	cbnz	r1, 80060a2 <sbrk_aligned+0x12>
 800609c:	f000 fcb6 	bl	8006a0c <_sbrk_r>
 80060a0:	6030      	str	r0, [r6, #0]
 80060a2:	4621      	mov	r1, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 fcb1 	bl	8006a0c <_sbrk_r>
 80060aa:	1c43      	adds	r3, r0, #1
 80060ac:	d103      	bne.n	80060b6 <sbrk_aligned+0x26>
 80060ae:	f04f 34ff 	mov.w	r4, #4294967295
 80060b2:	4620      	mov	r0, r4
 80060b4:	bd70      	pop	{r4, r5, r6, pc}
 80060b6:	1cc4      	adds	r4, r0, #3
 80060b8:	f024 0403 	bic.w	r4, r4, #3
 80060bc:	42a0      	cmp	r0, r4
 80060be:	d0f8      	beq.n	80060b2 <sbrk_aligned+0x22>
 80060c0:	1a21      	subs	r1, r4, r0
 80060c2:	4628      	mov	r0, r5
 80060c4:	f000 fca2 	bl	8006a0c <_sbrk_r>
 80060c8:	3001      	adds	r0, #1
 80060ca:	d1f2      	bne.n	80060b2 <sbrk_aligned+0x22>
 80060cc:	e7ef      	b.n	80060ae <sbrk_aligned+0x1e>
 80060ce:	bf00      	nop
 80060d0:	2000038c 	.word	0x2000038c

080060d4 <_malloc_r>:
 80060d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d8:	1ccd      	adds	r5, r1, #3
 80060da:	f025 0503 	bic.w	r5, r5, #3
 80060de:	3508      	adds	r5, #8
 80060e0:	2d0c      	cmp	r5, #12
 80060e2:	bf38      	it	cc
 80060e4:	250c      	movcc	r5, #12
 80060e6:	2d00      	cmp	r5, #0
 80060e8:	4606      	mov	r6, r0
 80060ea:	db01      	blt.n	80060f0 <_malloc_r+0x1c>
 80060ec:	42a9      	cmp	r1, r5
 80060ee:	d904      	bls.n	80060fa <_malloc_r+0x26>
 80060f0:	230c      	movs	r3, #12
 80060f2:	6033      	str	r3, [r6, #0]
 80060f4:	2000      	movs	r0, #0
 80060f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061d0 <_malloc_r+0xfc>
 80060fe:	f000 f869 	bl	80061d4 <__malloc_lock>
 8006102:	f8d8 3000 	ldr.w	r3, [r8]
 8006106:	461c      	mov	r4, r3
 8006108:	bb44      	cbnz	r4, 800615c <_malloc_r+0x88>
 800610a:	4629      	mov	r1, r5
 800610c:	4630      	mov	r0, r6
 800610e:	f7ff ffbf 	bl	8006090 <sbrk_aligned>
 8006112:	1c43      	adds	r3, r0, #1
 8006114:	4604      	mov	r4, r0
 8006116:	d158      	bne.n	80061ca <_malloc_r+0xf6>
 8006118:	f8d8 4000 	ldr.w	r4, [r8]
 800611c:	4627      	mov	r7, r4
 800611e:	2f00      	cmp	r7, #0
 8006120:	d143      	bne.n	80061aa <_malloc_r+0xd6>
 8006122:	2c00      	cmp	r4, #0
 8006124:	d04b      	beq.n	80061be <_malloc_r+0xea>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	4639      	mov	r1, r7
 800612a:	4630      	mov	r0, r6
 800612c:	eb04 0903 	add.w	r9, r4, r3
 8006130:	f000 fc6c 	bl	8006a0c <_sbrk_r>
 8006134:	4581      	cmp	r9, r0
 8006136:	d142      	bne.n	80061be <_malloc_r+0xea>
 8006138:	6821      	ldr	r1, [r4, #0]
 800613a:	1a6d      	subs	r5, r5, r1
 800613c:	4629      	mov	r1, r5
 800613e:	4630      	mov	r0, r6
 8006140:	f7ff ffa6 	bl	8006090 <sbrk_aligned>
 8006144:	3001      	adds	r0, #1
 8006146:	d03a      	beq.n	80061be <_malloc_r+0xea>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	442b      	add	r3, r5
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	f8d8 3000 	ldr.w	r3, [r8]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	bb62      	cbnz	r2, 80061b0 <_malloc_r+0xdc>
 8006156:	f8c8 7000 	str.w	r7, [r8]
 800615a:	e00f      	b.n	800617c <_malloc_r+0xa8>
 800615c:	6822      	ldr	r2, [r4, #0]
 800615e:	1b52      	subs	r2, r2, r5
 8006160:	d420      	bmi.n	80061a4 <_malloc_r+0xd0>
 8006162:	2a0b      	cmp	r2, #11
 8006164:	d917      	bls.n	8006196 <_malloc_r+0xc2>
 8006166:	1961      	adds	r1, r4, r5
 8006168:	42a3      	cmp	r3, r4
 800616a:	6025      	str	r5, [r4, #0]
 800616c:	bf18      	it	ne
 800616e:	6059      	strne	r1, [r3, #4]
 8006170:	6863      	ldr	r3, [r4, #4]
 8006172:	bf08      	it	eq
 8006174:	f8c8 1000 	streq.w	r1, [r8]
 8006178:	5162      	str	r2, [r4, r5]
 800617a:	604b      	str	r3, [r1, #4]
 800617c:	4630      	mov	r0, r6
 800617e:	f000 f82f 	bl	80061e0 <__malloc_unlock>
 8006182:	f104 000b 	add.w	r0, r4, #11
 8006186:	1d23      	adds	r3, r4, #4
 8006188:	f020 0007 	bic.w	r0, r0, #7
 800618c:	1ac2      	subs	r2, r0, r3
 800618e:	bf1c      	itt	ne
 8006190:	1a1b      	subne	r3, r3, r0
 8006192:	50a3      	strne	r3, [r4, r2]
 8006194:	e7af      	b.n	80060f6 <_malloc_r+0x22>
 8006196:	6862      	ldr	r2, [r4, #4]
 8006198:	42a3      	cmp	r3, r4
 800619a:	bf0c      	ite	eq
 800619c:	f8c8 2000 	streq.w	r2, [r8]
 80061a0:	605a      	strne	r2, [r3, #4]
 80061a2:	e7eb      	b.n	800617c <_malloc_r+0xa8>
 80061a4:	4623      	mov	r3, r4
 80061a6:	6864      	ldr	r4, [r4, #4]
 80061a8:	e7ae      	b.n	8006108 <_malloc_r+0x34>
 80061aa:	463c      	mov	r4, r7
 80061ac:	687f      	ldr	r7, [r7, #4]
 80061ae:	e7b6      	b.n	800611e <_malloc_r+0x4a>
 80061b0:	461a      	mov	r2, r3
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	d1fb      	bne.n	80061b0 <_malloc_r+0xdc>
 80061b8:	2300      	movs	r3, #0
 80061ba:	6053      	str	r3, [r2, #4]
 80061bc:	e7de      	b.n	800617c <_malloc_r+0xa8>
 80061be:	230c      	movs	r3, #12
 80061c0:	6033      	str	r3, [r6, #0]
 80061c2:	4630      	mov	r0, r6
 80061c4:	f000 f80c 	bl	80061e0 <__malloc_unlock>
 80061c8:	e794      	b.n	80060f4 <_malloc_r+0x20>
 80061ca:	6005      	str	r5, [r0, #0]
 80061cc:	e7d6      	b.n	800617c <_malloc_r+0xa8>
 80061ce:	bf00      	nop
 80061d0:	20000390 	.word	0x20000390

080061d4 <__malloc_lock>:
 80061d4:	4801      	ldr	r0, [pc, #4]	@ (80061dc <__malloc_lock+0x8>)
 80061d6:	f7ff bf0e 	b.w	8005ff6 <__retarget_lock_acquire_recursive>
 80061da:	bf00      	nop
 80061dc:	20000388 	.word	0x20000388

080061e0 <__malloc_unlock>:
 80061e0:	4801      	ldr	r0, [pc, #4]	@ (80061e8 <__malloc_unlock+0x8>)
 80061e2:	f7ff bf09 	b.w	8005ff8 <__retarget_lock_release_recursive>
 80061e6:	bf00      	nop
 80061e8:	20000388 	.word	0x20000388

080061ec <__sfputc_r>:
 80061ec:	6893      	ldr	r3, [r2, #8]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	b410      	push	{r4}
 80061f4:	6093      	str	r3, [r2, #8]
 80061f6:	da08      	bge.n	800620a <__sfputc_r+0x1e>
 80061f8:	6994      	ldr	r4, [r2, #24]
 80061fa:	42a3      	cmp	r3, r4
 80061fc:	db01      	blt.n	8006202 <__sfputc_r+0x16>
 80061fe:	290a      	cmp	r1, #10
 8006200:	d103      	bne.n	800620a <__sfputc_r+0x1e>
 8006202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006206:	f000 bb6d 	b.w	80068e4 <__swbuf_r>
 800620a:	6813      	ldr	r3, [r2, #0]
 800620c:	1c58      	adds	r0, r3, #1
 800620e:	6010      	str	r0, [r2, #0]
 8006210:	7019      	strb	r1, [r3, #0]
 8006212:	4608      	mov	r0, r1
 8006214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006218:	4770      	bx	lr

0800621a <__sfputs_r>:
 800621a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621c:	4606      	mov	r6, r0
 800621e:	460f      	mov	r7, r1
 8006220:	4614      	mov	r4, r2
 8006222:	18d5      	adds	r5, r2, r3
 8006224:	42ac      	cmp	r4, r5
 8006226:	d101      	bne.n	800622c <__sfputs_r+0x12>
 8006228:	2000      	movs	r0, #0
 800622a:	e007      	b.n	800623c <__sfputs_r+0x22>
 800622c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006230:	463a      	mov	r2, r7
 8006232:	4630      	mov	r0, r6
 8006234:	f7ff ffda 	bl	80061ec <__sfputc_r>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d1f3      	bne.n	8006224 <__sfputs_r+0xa>
 800623c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006240 <_vfiprintf_r>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	460d      	mov	r5, r1
 8006246:	b09d      	sub	sp, #116	@ 0x74
 8006248:	4614      	mov	r4, r2
 800624a:	4698      	mov	r8, r3
 800624c:	4606      	mov	r6, r0
 800624e:	b118      	cbz	r0, 8006258 <_vfiprintf_r+0x18>
 8006250:	6a03      	ldr	r3, [r0, #32]
 8006252:	b90b      	cbnz	r3, 8006258 <_vfiprintf_r+0x18>
 8006254:	f7ff fdca 	bl	8005dec <__sinit>
 8006258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800625a:	07d9      	lsls	r1, r3, #31
 800625c:	d405      	bmi.n	800626a <_vfiprintf_r+0x2a>
 800625e:	89ab      	ldrh	r3, [r5, #12]
 8006260:	059a      	lsls	r2, r3, #22
 8006262:	d402      	bmi.n	800626a <_vfiprintf_r+0x2a>
 8006264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006266:	f7ff fec6 	bl	8005ff6 <__retarget_lock_acquire_recursive>
 800626a:	89ab      	ldrh	r3, [r5, #12]
 800626c:	071b      	lsls	r3, r3, #28
 800626e:	d501      	bpl.n	8006274 <_vfiprintf_r+0x34>
 8006270:	692b      	ldr	r3, [r5, #16]
 8006272:	b99b      	cbnz	r3, 800629c <_vfiprintf_r+0x5c>
 8006274:	4629      	mov	r1, r5
 8006276:	4630      	mov	r0, r6
 8006278:	f000 fb72 	bl	8006960 <__swsetup_r>
 800627c:	b170      	cbz	r0, 800629c <_vfiprintf_r+0x5c>
 800627e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006280:	07dc      	lsls	r4, r3, #31
 8006282:	d504      	bpl.n	800628e <_vfiprintf_r+0x4e>
 8006284:	f04f 30ff 	mov.w	r0, #4294967295
 8006288:	b01d      	add	sp, #116	@ 0x74
 800628a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628e:	89ab      	ldrh	r3, [r5, #12]
 8006290:	0598      	lsls	r0, r3, #22
 8006292:	d4f7      	bmi.n	8006284 <_vfiprintf_r+0x44>
 8006294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006296:	f7ff feaf 	bl	8005ff8 <__retarget_lock_release_recursive>
 800629a:	e7f3      	b.n	8006284 <_vfiprintf_r+0x44>
 800629c:	2300      	movs	r3, #0
 800629e:	9309      	str	r3, [sp, #36]	@ 0x24
 80062a0:	2320      	movs	r3, #32
 80062a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80062aa:	2330      	movs	r3, #48	@ 0x30
 80062ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800645c <_vfiprintf_r+0x21c>
 80062b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062b4:	f04f 0901 	mov.w	r9, #1
 80062b8:	4623      	mov	r3, r4
 80062ba:	469a      	mov	sl, r3
 80062bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c0:	b10a      	cbz	r2, 80062c6 <_vfiprintf_r+0x86>
 80062c2:	2a25      	cmp	r2, #37	@ 0x25
 80062c4:	d1f9      	bne.n	80062ba <_vfiprintf_r+0x7a>
 80062c6:	ebba 0b04 	subs.w	fp, sl, r4
 80062ca:	d00b      	beq.n	80062e4 <_vfiprintf_r+0xa4>
 80062cc:	465b      	mov	r3, fp
 80062ce:	4622      	mov	r2, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	4630      	mov	r0, r6
 80062d4:	f7ff ffa1 	bl	800621a <__sfputs_r>
 80062d8:	3001      	adds	r0, #1
 80062da:	f000 80a7 	beq.w	800642c <_vfiprintf_r+0x1ec>
 80062de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062e0:	445a      	add	r2, fp
 80062e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80062e4:	f89a 3000 	ldrb.w	r3, [sl]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 809f 	beq.w	800642c <_vfiprintf_r+0x1ec>
 80062ee:	2300      	movs	r3, #0
 80062f0:	f04f 32ff 	mov.w	r2, #4294967295
 80062f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062f8:	f10a 0a01 	add.w	sl, sl, #1
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	9307      	str	r3, [sp, #28]
 8006300:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006304:	931a      	str	r3, [sp, #104]	@ 0x68
 8006306:	4654      	mov	r4, sl
 8006308:	2205      	movs	r2, #5
 800630a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630e:	4853      	ldr	r0, [pc, #332]	@ (800645c <_vfiprintf_r+0x21c>)
 8006310:	f7f9 ff5e 	bl	80001d0 <memchr>
 8006314:	9a04      	ldr	r2, [sp, #16]
 8006316:	b9d8      	cbnz	r0, 8006350 <_vfiprintf_r+0x110>
 8006318:	06d1      	lsls	r1, r2, #27
 800631a:	bf44      	itt	mi
 800631c:	2320      	movmi	r3, #32
 800631e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006322:	0713      	lsls	r3, r2, #28
 8006324:	bf44      	itt	mi
 8006326:	232b      	movmi	r3, #43	@ 0x2b
 8006328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800632c:	f89a 3000 	ldrb.w	r3, [sl]
 8006330:	2b2a      	cmp	r3, #42	@ 0x2a
 8006332:	d015      	beq.n	8006360 <_vfiprintf_r+0x120>
 8006334:	9a07      	ldr	r2, [sp, #28]
 8006336:	4654      	mov	r4, sl
 8006338:	2000      	movs	r0, #0
 800633a:	f04f 0c0a 	mov.w	ip, #10
 800633e:	4621      	mov	r1, r4
 8006340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006344:	3b30      	subs	r3, #48	@ 0x30
 8006346:	2b09      	cmp	r3, #9
 8006348:	d94b      	bls.n	80063e2 <_vfiprintf_r+0x1a2>
 800634a:	b1b0      	cbz	r0, 800637a <_vfiprintf_r+0x13a>
 800634c:	9207      	str	r2, [sp, #28]
 800634e:	e014      	b.n	800637a <_vfiprintf_r+0x13a>
 8006350:	eba0 0308 	sub.w	r3, r0, r8
 8006354:	fa09 f303 	lsl.w	r3, r9, r3
 8006358:	4313      	orrs	r3, r2
 800635a:	9304      	str	r3, [sp, #16]
 800635c:	46a2      	mov	sl, r4
 800635e:	e7d2      	b.n	8006306 <_vfiprintf_r+0xc6>
 8006360:	9b03      	ldr	r3, [sp, #12]
 8006362:	1d19      	adds	r1, r3, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	9103      	str	r1, [sp, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	bfbb      	ittet	lt
 800636c:	425b      	neglt	r3, r3
 800636e:	f042 0202 	orrlt.w	r2, r2, #2
 8006372:	9307      	strge	r3, [sp, #28]
 8006374:	9307      	strlt	r3, [sp, #28]
 8006376:	bfb8      	it	lt
 8006378:	9204      	strlt	r2, [sp, #16]
 800637a:	7823      	ldrb	r3, [r4, #0]
 800637c:	2b2e      	cmp	r3, #46	@ 0x2e
 800637e:	d10a      	bne.n	8006396 <_vfiprintf_r+0x156>
 8006380:	7863      	ldrb	r3, [r4, #1]
 8006382:	2b2a      	cmp	r3, #42	@ 0x2a
 8006384:	d132      	bne.n	80063ec <_vfiprintf_r+0x1ac>
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	1d1a      	adds	r2, r3, #4
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	9203      	str	r2, [sp, #12]
 800638e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006392:	3402      	adds	r4, #2
 8006394:	9305      	str	r3, [sp, #20]
 8006396:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800646c <_vfiprintf_r+0x22c>
 800639a:	7821      	ldrb	r1, [r4, #0]
 800639c:	2203      	movs	r2, #3
 800639e:	4650      	mov	r0, sl
 80063a0:	f7f9 ff16 	bl	80001d0 <memchr>
 80063a4:	b138      	cbz	r0, 80063b6 <_vfiprintf_r+0x176>
 80063a6:	9b04      	ldr	r3, [sp, #16]
 80063a8:	eba0 000a 	sub.w	r0, r0, sl
 80063ac:	2240      	movs	r2, #64	@ 0x40
 80063ae:	4082      	lsls	r2, r0
 80063b0:	4313      	orrs	r3, r2
 80063b2:	3401      	adds	r4, #1
 80063b4:	9304      	str	r3, [sp, #16]
 80063b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ba:	4829      	ldr	r0, [pc, #164]	@ (8006460 <_vfiprintf_r+0x220>)
 80063bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063c0:	2206      	movs	r2, #6
 80063c2:	f7f9 ff05 	bl	80001d0 <memchr>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d03f      	beq.n	800644a <_vfiprintf_r+0x20a>
 80063ca:	4b26      	ldr	r3, [pc, #152]	@ (8006464 <_vfiprintf_r+0x224>)
 80063cc:	bb1b      	cbnz	r3, 8006416 <_vfiprintf_r+0x1d6>
 80063ce:	9b03      	ldr	r3, [sp, #12]
 80063d0:	3307      	adds	r3, #7
 80063d2:	f023 0307 	bic.w	r3, r3, #7
 80063d6:	3308      	adds	r3, #8
 80063d8:	9303      	str	r3, [sp, #12]
 80063da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063dc:	443b      	add	r3, r7
 80063de:	9309      	str	r3, [sp, #36]	@ 0x24
 80063e0:	e76a      	b.n	80062b8 <_vfiprintf_r+0x78>
 80063e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063e6:	460c      	mov	r4, r1
 80063e8:	2001      	movs	r0, #1
 80063ea:	e7a8      	b.n	800633e <_vfiprintf_r+0xfe>
 80063ec:	2300      	movs	r3, #0
 80063ee:	3401      	adds	r4, #1
 80063f0:	9305      	str	r3, [sp, #20]
 80063f2:	4619      	mov	r1, r3
 80063f4:	f04f 0c0a 	mov.w	ip, #10
 80063f8:	4620      	mov	r0, r4
 80063fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063fe:	3a30      	subs	r2, #48	@ 0x30
 8006400:	2a09      	cmp	r2, #9
 8006402:	d903      	bls.n	800640c <_vfiprintf_r+0x1cc>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0c6      	beq.n	8006396 <_vfiprintf_r+0x156>
 8006408:	9105      	str	r1, [sp, #20]
 800640a:	e7c4      	b.n	8006396 <_vfiprintf_r+0x156>
 800640c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006410:	4604      	mov	r4, r0
 8006412:	2301      	movs	r3, #1
 8006414:	e7f0      	b.n	80063f8 <_vfiprintf_r+0x1b8>
 8006416:	ab03      	add	r3, sp, #12
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	462a      	mov	r2, r5
 800641c:	4b12      	ldr	r3, [pc, #72]	@ (8006468 <_vfiprintf_r+0x228>)
 800641e:	a904      	add	r1, sp, #16
 8006420:	4630      	mov	r0, r6
 8006422:	f3af 8000 	nop.w
 8006426:	4607      	mov	r7, r0
 8006428:	1c78      	adds	r0, r7, #1
 800642a:	d1d6      	bne.n	80063da <_vfiprintf_r+0x19a>
 800642c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800642e:	07d9      	lsls	r1, r3, #31
 8006430:	d405      	bmi.n	800643e <_vfiprintf_r+0x1fe>
 8006432:	89ab      	ldrh	r3, [r5, #12]
 8006434:	059a      	lsls	r2, r3, #22
 8006436:	d402      	bmi.n	800643e <_vfiprintf_r+0x1fe>
 8006438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800643a:	f7ff fddd 	bl	8005ff8 <__retarget_lock_release_recursive>
 800643e:	89ab      	ldrh	r3, [r5, #12]
 8006440:	065b      	lsls	r3, r3, #25
 8006442:	f53f af1f 	bmi.w	8006284 <_vfiprintf_r+0x44>
 8006446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006448:	e71e      	b.n	8006288 <_vfiprintf_r+0x48>
 800644a:	ab03      	add	r3, sp, #12
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	462a      	mov	r2, r5
 8006450:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <_vfiprintf_r+0x228>)
 8006452:	a904      	add	r1, sp, #16
 8006454:	4630      	mov	r0, r6
 8006456:	f000 f879 	bl	800654c <_printf_i>
 800645a:	e7e4      	b.n	8006426 <_vfiprintf_r+0x1e6>
 800645c:	08006ba4 	.word	0x08006ba4
 8006460:	08006bae 	.word	0x08006bae
 8006464:	00000000 	.word	0x00000000
 8006468:	0800621b 	.word	0x0800621b
 800646c:	08006baa 	.word	0x08006baa

08006470 <_printf_common>:
 8006470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006474:	4616      	mov	r6, r2
 8006476:	4698      	mov	r8, r3
 8006478:	688a      	ldr	r2, [r1, #8]
 800647a:	690b      	ldr	r3, [r1, #16]
 800647c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006480:	4293      	cmp	r3, r2
 8006482:	bfb8      	it	lt
 8006484:	4613      	movlt	r3, r2
 8006486:	6033      	str	r3, [r6, #0]
 8006488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800648c:	4607      	mov	r7, r0
 800648e:	460c      	mov	r4, r1
 8006490:	b10a      	cbz	r2, 8006496 <_printf_common+0x26>
 8006492:	3301      	adds	r3, #1
 8006494:	6033      	str	r3, [r6, #0]
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	0699      	lsls	r1, r3, #26
 800649a:	bf42      	ittt	mi
 800649c:	6833      	ldrmi	r3, [r6, #0]
 800649e:	3302      	addmi	r3, #2
 80064a0:	6033      	strmi	r3, [r6, #0]
 80064a2:	6825      	ldr	r5, [r4, #0]
 80064a4:	f015 0506 	ands.w	r5, r5, #6
 80064a8:	d106      	bne.n	80064b8 <_printf_common+0x48>
 80064aa:	f104 0a19 	add.w	sl, r4, #25
 80064ae:	68e3      	ldr	r3, [r4, #12]
 80064b0:	6832      	ldr	r2, [r6, #0]
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	42ab      	cmp	r3, r5
 80064b6:	dc26      	bgt.n	8006506 <_printf_common+0x96>
 80064b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064bc:	6822      	ldr	r2, [r4, #0]
 80064be:	3b00      	subs	r3, #0
 80064c0:	bf18      	it	ne
 80064c2:	2301      	movne	r3, #1
 80064c4:	0692      	lsls	r2, r2, #26
 80064c6:	d42b      	bmi.n	8006520 <_printf_common+0xb0>
 80064c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064cc:	4641      	mov	r1, r8
 80064ce:	4638      	mov	r0, r7
 80064d0:	47c8      	blx	r9
 80064d2:	3001      	adds	r0, #1
 80064d4:	d01e      	beq.n	8006514 <_printf_common+0xa4>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	6922      	ldr	r2, [r4, #16]
 80064da:	f003 0306 	and.w	r3, r3, #6
 80064de:	2b04      	cmp	r3, #4
 80064e0:	bf02      	ittt	eq
 80064e2:	68e5      	ldreq	r5, [r4, #12]
 80064e4:	6833      	ldreq	r3, [r6, #0]
 80064e6:	1aed      	subeq	r5, r5, r3
 80064e8:	68a3      	ldr	r3, [r4, #8]
 80064ea:	bf0c      	ite	eq
 80064ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064f0:	2500      	movne	r5, #0
 80064f2:	4293      	cmp	r3, r2
 80064f4:	bfc4      	itt	gt
 80064f6:	1a9b      	subgt	r3, r3, r2
 80064f8:	18ed      	addgt	r5, r5, r3
 80064fa:	2600      	movs	r6, #0
 80064fc:	341a      	adds	r4, #26
 80064fe:	42b5      	cmp	r5, r6
 8006500:	d11a      	bne.n	8006538 <_printf_common+0xc8>
 8006502:	2000      	movs	r0, #0
 8006504:	e008      	b.n	8006518 <_printf_common+0xa8>
 8006506:	2301      	movs	r3, #1
 8006508:	4652      	mov	r2, sl
 800650a:	4641      	mov	r1, r8
 800650c:	4638      	mov	r0, r7
 800650e:	47c8      	blx	r9
 8006510:	3001      	adds	r0, #1
 8006512:	d103      	bne.n	800651c <_printf_common+0xac>
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800651c:	3501      	adds	r5, #1
 800651e:	e7c6      	b.n	80064ae <_printf_common+0x3e>
 8006520:	18e1      	adds	r1, r4, r3
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	2030      	movs	r0, #48	@ 0x30
 8006526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800652a:	4422      	add	r2, r4
 800652c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006534:	3302      	adds	r3, #2
 8006536:	e7c7      	b.n	80064c8 <_printf_common+0x58>
 8006538:	2301      	movs	r3, #1
 800653a:	4622      	mov	r2, r4
 800653c:	4641      	mov	r1, r8
 800653e:	4638      	mov	r0, r7
 8006540:	47c8      	blx	r9
 8006542:	3001      	adds	r0, #1
 8006544:	d0e6      	beq.n	8006514 <_printf_common+0xa4>
 8006546:	3601      	adds	r6, #1
 8006548:	e7d9      	b.n	80064fe <_printf_common+0x8e>
	...

0800654c <_printf_i>:
 800654c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006550:	7e0f      	ldrb	r7, [r1, #24]
 8006552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006554:	2f78      	cmp	r7, #120	@ 0x78
 8006556:	4691      	mov	r9, r2
 8006558:	4680      	mov	r8, r0
 800655a:	460c      	mov	r4, r1
 800655c:	469a      	mov	sl, r3
 800655e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006562:	d807      	bhi.n	8006574 <_printf_i+0x28>
 8006564:	2f62      	cmp	r7, #98	@ 0x62
 8006566:	d80a      	bhi.n	800657e <_printf_i+0x32>
 8006568:	2f00      	cmp	r7, #0
 800656a:	f000 80d2 	beq.w	8006712 <_printf_i+0x1c6>
 800656e:	2f58      	cmp	r7, #88	@ 0x58
 8006570:	f000 80b9 	beq.w	80066e6 <_printf_i+0x19a>
 8006574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800657c:	e03a      	b.n	80065f4 <_printf_i+0xa8>
 800657e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006582:	2b15      	cmp	r3, #21
 8006584:	d8f6      	bhi.n	8006574 <_printf_i+0x28>
 8006586:	a101      	add	r1, pc, #4	@ (adr r1, 800658c <_printf_i+0x40>)
 8006588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800658c:	080065e5 	.word	0x080065e5
 8006590:	080065f9 	.word	0x080065f9
 8006594:	08006575 	.word	0x08006575
 8006598:	08006575 	.word	0x08006575
 800659c:	08006575 	.word	0x08006575
 80065a0:	08006575 	.word	0x08006575
 80065a4:	080065f9 	.word	0x080065f9
 80065a8:	08006575 	.word	0x08006575
 80065ac:	08006575 	.word	0x08006575
 80065b0:	08006575 	.word	0x08006575
 80065b4:	08006575 	.word	0x08006575
 80065b8:	080066f9 	.word	0x080066f9
 80065bc:	08006623 	.word	0x08006623
 80065c0:	080066b3 	.word	0x080066b3
 80065c4:	08006575 	.word	0x08006575
 80065c8:	08006575 	.word	0x08006575
 80065cc:	0800671b 	.word	0x0800671b
 80065d0:	08006575 	.word	0x08006575
 80065d4:	08006623 	.word	0x08006623
 80065d8:	08006575 	.word	0x08006575
 80065dc:	08006575 	.word	0x08006575
 80065e0:	080066bb 	.word	0x080066bb
 80065e4:	6833      	ldr	r3, [r6, #0]
 80065e6:	1d1a      	adds	r2, r3, #4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6032      	str	r2, [r6, #0]
 80065ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065f4:	2301      	movs	r3, #1
 80065f6:	e09d      	b.n	8006734 <_printf_i+0x1e8>
 80065f8:	6833      	ldr	r3, [r6, #0]
 80065fa:	6820      	ldr	r0, [r4, #0]
 80065fc:	1d19      	adds	r1, r3, #4
 80065fe:	6031      	str	r1, [r6, #0]
 8006600:	0606      	lsls	r6, r0, #24
 8006602:	d501      	bpl.n	8006608 <_printf_i+0xbc>
 8006604:	681d      	ldr	r5, [r3, #0]
 8006606:	e003      	b.n	8006610 <_printf_i+0xc4>
 8006608:	0645      	lsls	r5, r0, #25
 800660a:	d5fb      	bpl.n	8006604 <_printf_i+0xb8>
 800660c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006610:	2d00      	cmp	r5, #0
 8006612:	da03      	bge.n	800661c <_printf_i+0xd0>
 8006614:	232d      	movs	r3, #45	@ 0x2d
 8006616:	426d      	negs	r5, r5
 8006618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800661c:	4859      	ldr	r0, [pc, #356]	@ (8006784 <_printf_i+0x238>)
 800661e:	230a      	movs	r3, #10
 8006620:	e011      	b.n	8006646 <_printf_i+0xfa>
 8006622:	6821      	ldr	r1, [r4, #0]
 8006624:	6833      	ldr	r3, [r6, #0]
 8006626:	0608      	lsls	r0, r1, #24
 8006628:	f853 5b04 	ldr.w	r5, [r3], #4
 800662c:	d402      	bmi.n	8006634 <_printf_i+0xe8>
 800662e:	0649      	lsls	r1, r1, #25
 8006630:	bf48      	it	mi
 8006632:	b2ad      	uxthmi	r5, r5
 8006634:	2f6f      	cmp	r7, #111	@ 0x6f
 8006636:	4853      	ldr	r0, [pc, #332]	@ (8006784 <_printf_i+0x238>)
 8006638:	6033      	str	r3, [r6, #0]
 800663a:	bf14      	ite	ne
 800663c:	230a      	movne	r3, #10
 800663e:	2308      	moveq	r3, #8
 8006640:	2100      	movs	r1, #0
 8006642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006646:	6866      	ldr	r6, [r4, #4]
 8006648:	60a6      	str	r6, [r4, #8]
 800664a:	2e00      	cmp	r6, #0
 800664c:	bfa2      	ittt	ge
 800664e:	6821      	ldrge	r1, [r4, #0]
 8006650:	f021 0104 	bicge.w	r1, r1, #4
 8006654:	6021      	strge	r1, [r4, #0]
 8006656:	b90d      	cbnz	r5, 800665c <_printf_i+0x110>
 8006658:	2e00      	cmp	r6, #0
 800665a:	d04b      	beq.n	80066f4 <_printf_i+0x1a8>
 800665c:	4616      	mov	r6, r2
 800665e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006662:	fb03 5711 	mls	r7, r3, r1, r5
 8006666:	5dc7      	ldrb	r7, [r0, r7]
 8006668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800666c:	462f      	mov	r7, r5
 800666e:	42bb      	cmp	r3, r7
 8006670:	460d      	mov	r5, r1
 8006672:	d9f4      	bls.n	800665e <_printf_i+0x112>
 8006674:	2b08      	cmp	r3, #8
 8006676:	d10b      	bne.n	8006690 <_printf_i+0x144>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	07df      	lsls	r7, r3, #31
 800667c:	d508      	bpl.n	8006690 <_printf_i+0x144>
 800667e:	6923      	ldr	r3, [r4, #16]
 8006680:	6861      	ldr	r1, [r4, #4]
 8006682:	4299      	cmp	r1, r3
 8006684:	bfde      	ittt	le
 8006686:	2330      	movle	r3, #48	@ 0x30
 8006688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800668c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006690:	1b92      	subs	r2, r2, r6
 8006692:	6122      	str	r2, [r4, #16]
 8006694:	f8cd a000 	str.w	sl, [sp]
 8006698:	464b      	mov	r3, r9
 800669a:	aa03      	add	r2, sp, #12
 800669c:	4621      	mov	r1, r4
 800669e:	4640      	mov	r0, r8
 80066a0:	f7ff fee6 	bl	8006470 <_printf_common>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d14a      	bne.n	800673e <_printf_i+0x1f2>
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	b004      	add	sp, #16
 80066ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	f043 0320 	orr.w	r3, r3, #32
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	4833      	ldr	r0, [pc, #204]	@ (8006788 <_printf_i+0x23c>)
 80066bc:	2778      	movs	r7, #120	@ 0x78
 80066be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	6831      	ldr	r1, [r6, #0]
 80066c6:	061f      	lsls	r7, r3, #24
 80066c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80066cc:	d402      	bmi.n	80066d4 <_printf_i+0x188>
 80066ce:	065f      	lsls	r7, r3, #25
 80066d0:	bf48      	it	mi
 80066d2:	b2ad      	uxthmi	r5, r5
 80066d4:	6031      	str	r1, [r6, #0]
 80066d6:	07d9      	lsls	r1, r3, #31
 80066d8:	bf44      	itt	mi
 80066da:	f043 0320 	orrmi.w	r3, r3, #32
 80066de:	6023      	strmi	r3, [r4, #0]
 80066e0:	b11d      	cbz	r5, 80066ea <_printf_i+0x19e>
 80066e2:	2310      	movs	r3, #16
 80066e4:	e7ac      	b.n	8006640 <_printf_i+0xf4>
 80066e6:	4827      	ldr	r0, [pc, #156]	@ (8006784 <_printf_i+0x238>)
 80066e8:	e7e9      	b.n	80066be <_printf_i+0x172>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	f023 0320 	bic.w	r3, r3, #32
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	e7f6      	b.n	80066e2 <_printf_i+0x196>
 80066f4:	4616      	mov	r6, r2
 80066f6:	e7bd      	b.n	8006674 <_printf_i+0x128>
 80066f8:	6833      	ldr	r3, [r6, #0]
 80066fa:	6825      	ldr	r5, [r4, #0]
 80066fc:	6961      	ldr	r1, [r4, #20]
 80066fe:	1d18      	adds	r0, r3, #4
 8006700:	6030      	str	r0, [r6, #0]
 8006702:	062e      	lsls	r6, r5, #24
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	d501      	bpl.n	800670c <_printf_i+0x1c0>
 8006708:	6019      	str	r1, [r3, #0]
 800670a:	e002      	b.n	8006712 <_printf_i+0x1c6>
 800670c:	0668      	lsls	r0, r5, #25
 800670e:	d5fb      	bpl.n	8006708 <_printf_i+0x1bc>
 8006710:	8019      	strh	r1, [r3, #0]
 8006712:	2300      	movs	r3, #0
 8006714:	6123      	str	r3, [r4, #16]
 8006716:	4616      	mov	r6, r2
 8006718:	e7bc      	b.n	8006694 <_printf_i+0x148>
 800671a:	6833      	ldr	r3, [r6, #0]
 800671c:	1d1a      	adds	r2, r3, #4
 800671e:	6032      	str	r2, [r6, #0]
 8006720:	681e      	ldr	r6, [r3, #0]
 8006722:	6862      	ldr	r2, [r4, #4]
 8006724:	2100      	movs	r1, #0
 8006726:	4630      	mov	r0, r6
 8006728:	f7f9 fd52 	bl	80001d0 <memchr>
 800672c:	b108      	cbz	r0, 8006732 <_printf_i+0x1e6>
 800672e:	1b80      	subs	r0, r0, r6
 8006730:	6060      	str	r0, [r4, #4]
 8006732:	6863      	ldr	r3, [r4, #4]
 8006734:	6123      	str	r3, [r4, #16]
 8006736:	2300      	movs	r3, #0
 8006738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800673c:	e7aa      	b.n	8006694 <_printf_i+0x148>
 800673e:	6923      	ldr	r3, [r4, #16]
 8006740:	4632      	mov	r2, r6
 8006742:	4649      	mov	r1, r9
 8006744:	4640      	mov	r0, r8
 8006746:	47d0      	blx	sl
 8006748:	3001      	adds	r0, #1
 800674a:	d0ad      	beq.n	80066a8 <_printf_i+0x15c>
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	079b      	lsls	r3, r3, #30
 8006750:	d413      	bmi.n	800677a <_printf_i+0x22e>
 8006752:	68e0      	ldr	r0, [r4, #12]
 8006754:	9b03      	ldr	r3, [sp, #12]
 8006756:	4298      	cmp	r0, r3
 8006758:	bfb8      	it	lt
 800675a:	4618      	movlt	r0, r3
 800675c:	e7a6      	b.n	80066ac <_printf_i+0x160>
 800675e:	2301      	movs	r3, #1
 8006760:	4632      	mov	r2, r6
 8006762:	4649      	mov	r1, r9
 8006764:	4640      	mov	r0, r8
 8006766:	47d0      	blx	sl
 8006768:	3001      	adds	r0, #1
 800676a:	d09d      	beq.n	80066a8 <_printf_i+0x15c>
 800676c:	3501      	adds	r5, #1
 800676e:	68e3      	ldr	r3, [r4, #12]
 8006770:	9903      	ldr	r1, [sp, #12]
 8006772:	1a5b      	subs	r3, r3, r1
 8006774:	42ab      	cmp	r3, r5
 8006776:	dcf2      	bgt.n	800675e <_printf_i+0x212>
 8006778:	e7eb      	b.n	8006752 <_printf_i+0x206>
 800677a:	2500      	movs	r5, #0
 800677c:	f104 0619 	add.w	r6, r4, #25
 8006780:	e7f5      	b.n	800676e <_printf_i+0x222>
 8006782:	bf00      	nop
 8006784:	08006bb5 	.word	0x08006bb5
 8006788:	08006bc6 	.word	0x08006bc6

0800678c <__sflush_r>:
 800678c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006794:	0716      	lsls	r6, r2, #28
 8006796:	4605      	mov	r5, r0
 8006798:	460c      	mov	r4, r1
 800679a:	d454      	bmi.n	8006846 <__sflush_r+0xba>
 800679c:	684b      	ldr	r3, [r1, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	dc02      	bgt.n	80067a8 <__sflush_r+0x1c>
 80067a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	dd48      	ble.n	800683a <__sflush_r+0xae>
 80067a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067aa:	2e00      	cmp	r6, #0
 80067ac:	d045      	beq.n	800683a <__sflush_r+0xae>
 80067ae:	2300      	movs	r3, #0
 80067b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80067b4:	682f      	ldr	r7, [r5, #0]
 80067b6:	6a21      	ldr	r1, [r4, #32]
 80067b8:	602b      	str	r3, [r5, #0]
 80067ba:	d030      	beq.n	800681e <__sflush_r+0x92>
 80067bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	0759      	lsls	r1, r3, #29
 80067c2:	d505      	bpl.n	80067d0 <__sflush_r+0x44>
 80067c4:	6863      	ldr	r3, [r4, #4]
 80067c6:	1ad2      	subs	r2, r2, r3
 80067c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80067ca:	b10b      	cbz	r3, 80067d0 <__sflush_r+0x44>
 80067cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067ce:	1ad2      	subs	r2, r2, r3
 80067d0:	2300      	movs	r3, #0
 80067d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067d4:	6a21      	ldr	r1, [r4, #32]
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b0      	blx	r6
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	d106      	bne.n	80067ee <__sflush_r+0x62>
 80067e0:	6829      	ldr	r1, [r5, #0]
 80067e2:	291d      	cmp	r1, #29
 80067e4:	d82b      	bhi.n	800683e <__sflush_r+0xb2>
 80067e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006890 <__sflush_r+0x104>)
 80067e8:	410a      	asrs	r2, r1
 80067ea:	07d6      	lsls	r6, r2, #31
 80067ec:	d427      	bmi.n	800683e <__sflush_r+0xb2>
 80067ee:	2200      	movs	r2, #0
 80067f0:	6062      	str	r2, [r4, #4]
 80067f2:	04d9      	lsls	r1, r3, #19
 80067f4:	6922      	ldr	r2, [r4, #16]
 80067f6:	6022      	str	r2, [r4, #0]
 80067f8:	d504      	bpl.n	8006804 <__sflush_r+0x78>
 80067fa:	1c42      	adds	r2, r0, #1
 80067fc:	d101      	bne.n	8006802 <__sflush_r+0x76>
 80067fe:	682b      	ldr	r3, [r5, #0]
 8006800:	b903      	cbnz	r3, 8006804 <__sflush_r+0x78>
 8006802:	6560      	str	r0, [r4, #84]	@ 0x54
 8006804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006806:	602f      	str	r7, [r5, #0]
 8006808:	b1b9      	cbz	r1, 800683a <__sflush_r+0xae>
 800680a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800680e:	4299      	cmp	r1, r3
 8006810:	d002      	beq.n	8006818 <__sflush_r+0x8c>
 8006812:	4628      	mov	r0, r5
 8006814:	f7ff fbf2 	bl	8005ffc <_free_r>
 8006818:	2300      	movs	r3, #0
 800681a:	6363      	str	r3, [r4, #52]	@ 0x34
 800681c:	e00d      	b.n	800683a <__sflush_r+0xae>
 800681e:	2301      	movs	r3, #1
 8006820:	4628      	mov	r0, r5
 8006822:	47b0      	blx	r6
 8006824:	4602      	mov	r2, r0
 8006826:	1c50      	adds	r0, r2, #1
 8006828:	d1c9      	bne.n	80067be <__sflush_r+0x32>
 800682a:	682b      	ldr	r3, [r5, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0c6      	beq.n	80067be <__sflush_r+0x32>
 8006830:	2b1d      	cmp	r3, #29
 8006832:	d001      	beq.n	8006838 <__sflush_r+0xac>
 8006834:	2b16      	cmp	r3, #22
 8006836:	d11e      	bne.n	8006876 <__sflush_r+0xea>
 8006838:	602f      	str	r7, [r5, #0]
 800683a:	2000      	movs	r0, #0
 800683c:	e022      	b.n	8006884 <__sflush_r+0xf8>
 800683e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006842:	b21b      	sxth	r3, r3
 8006844:	e01b      	b.n	800687e <__sflush_r+0xf2>
 8006846:	690f      	ldr	r7, [r1, #16]
 8006848:	2f00      	cmp	r7, #0
 800684a:	d0f6      	beq.n	800683a <__sflush_r+0xae>
 800684c:	0793      	lsls	r3, r2, #30
 800684e:	680e      	ldr	r6, [r1, #0]
 8006850:	bf08      	it	eq
 8006852:	694b      	ldreq	r3, [r1, #20]
 8006854:	600f      	str	r7, [r1, #0]
 8006856:	bf18      	it	ne
 8006858:	2300      	movne	r3, #0
 800685a:	eba6 0807 	sub.w	r8, r6, r7
 800685e:	608b      	str	r3, [r1, #8]
 8006860:	f1b8 0f00 	cmp.w	r8, #0
 8006864:	dde9      	ble.n	800683a <__sflush_r+0xae>
 8006866:	6a21      	ldr	r1, [r4, #32]
 8006868:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800686a:	4643      	mov	r3, r8
 800686c:	463a      	mov	r2, r7
 800686e:	4628      	mov	r0, r5
 8006870:	47b0      	blx	r6
 8006872:	2800      	cmp	r0, #0
 8006874:	dc08      	bgt.n	8006888 <__sflush_r+0xfc>
 8006876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800687a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800687e:	81a3      	strh	r3, [r4, #12]
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006888:	4407      	add	r7, r0
 800688a:	eba8 0800 	sub.w	r8, r8, r0
 800688e:	e7e7      	b.n	8006860 <__sflush_r+0xd4>
 8006890:	dfbffffe 	.word	0xdfbffffe

08006894 <_fflush_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	690b      	ldr	r3, [r1, #16]
 8006898:	4605      	mov	r5, r0
 800689a:	460c      	mov	r4, r1
 800689c:	b913      	cbnz	r3, 80068a4 <_fflush_r+0x10>
 800689e:	2500      	movs	r5, #0
 80068a0:	4628      	mov	r0, r5
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	b118      	cbz	r0, 80068ae <_fflush_r+0x1a>
 80068a6:	6a03      	ldr	r3, [r0, #32]
 80068a8:	b90b      	cbnz	r3, 80068ae <_fflush_r+0x1a>
 80068aa:	f7ff fa9f 	bl	8005dec <__sinit>
 80068ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f3      	beq.n	800689e <_fflush_r+0xa>
 80068b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068b8:	07d0      	lsls	r0, r2, #31
 80068ba:	d404      	bmi.n	80068c6 <_fflush_r+0x32>
 80068bc:	0599      	lsls	r1, r3, #22
 80068be:	d402      	bmi.n	80068c6 <_fflush_r+0x32>
 80068c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068c2:	f7ff fb98 	bl	8005ff6 <__retarget_lock_acquire_recursive>
 80068c6:	4628      	mov	r0, r5
 80068c8:	4621      	mov	r1, r4
 80068ca:	f7ff ff5f 	bl	800678c <__sflush_r>
 80068ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068d0:	07da      	lsls	r2, r3, #31
 80068d2:	4605      	mov	r5, r0
 80068d4:	d4e4      	bmi.n	80068a0 <_fflush_r+0xc>
 80068d6:	89a3      	ldrh	r3, [r4, #12]
 80068d8:	059b      	lsls	r3, r3, #22
 80068da:	d4e1      	bmi.n	80068a0 <_fflush_r+0xc>
 80068dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068de:	f7ff fb8b 	bl	8005ff8 <__retarget_lock_release_recursive>
 80068e2:	e7dd      	b.n	80068a0 <_fflush_r+0xc>

080068e4 <__swbuf_r>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	460e      	mov	r6, r1
 80068e8:	4614      	mov	r4, r2
 80068ea:	4605      	mov	r5, r0
 80068ec:	b118      	cbz	r0, 80068f6 <__swbuf_r+0x12>
 80068ee:	6a03      	ldr	r3, [r0, #32]
 80068f0:	b90b      	cbnz	r3, 80068f6 <__swbuf_r+0x12>
 80068f2:	f7ff fa7b 	bl	8005dec <__sinit>
 80068f6:	69a3      	ldr	r3, [r4, #24]
 80068f8:	60a3      	str	r3, [r4, #8]
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	071a      	lsls	r2, r3, #28
 80068fe:	d501      	bpl.n	8006904 <__swbuf_r+0x20>
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	b943      	cbnz	r3, 8006916 <__swbuf_r+0x32>
 8006904:	4621      	mov	r1, r4
 8006906:	4628      	mov	r0, r5
 8006908:	f000 f82a 	bl	8006960 <__swsetup_r>
 800690c:	b118      	cbz	r0, 8006916 <__swbuf_r+0x32>
 800690e:	f04f 37ff 	mov.w	r7, #4294967295
 8006912:	4638      	mov	r0, r7
 8006914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	6922      	ldr	r2, [r4, #16]
 800691a:	1a98      	subs	r0, r3, r2
 800691c:	6963      	ldr	r3, [r4, #20]
 800691e:	b2f6      	uxtb	r6, r6
 8006920:	4283      	cmp	r3, r0
 8006922:	4637      	mov	r7, r6
 8006924:	dc05      	bgt.n	8006932 <__swbuf_r+0x4e>
 8006926:	4621      	mov	r1, r4
 8006928:	4628      	mov	r0, r5
 800692a:	f7ff ffb3 	bl	8006894 <_fflush_r>
 800692e:	2800      	cmp	r0, #0
 8006930:	d1ed      	bne.n	800690e <__swbuf_r+0x2a>
 8006932:	68a3      	ldr	r3, [r4, #8]
 8006934:	3b01      	subs	r3, #1
 8006936:	60a3      	str	r3, [r4, #8]
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	6022      	str	r2, [r4, #0]
 800693e:	701e      	strb	r6, [r3, #0]
 8006940:	6962      	ldr	r2, [r4, #20]
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	429a      	cmp	r2, r3
 8006946:	d004      	beq.n	8006952 <__swbuf_r+0x6e>
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	07db      	lsls	r3, r3, #31
 800694c:	d5e1      	bpl.n	8006912 <__swbuf_r+0x2e>
 800694e:	2e0a      	cmp	r6, #10
 8006950:	d1df      	bne.n	8006912 <__swbuf_r+0x2e>
 8006952:	4621      	mov	r1, r4
 8006954:	4628      	mov	r0, r5
 8006956:	f7ff ff9d 	bl	8006894 <_fflush_r>
 800695a:	2800      	cmp	r0, #0
 800695c:	d0d9      	beq.n	8006912 <__swbuf_r+0x2e>
 800695e:	e7d6      	b.n	800690e <__swbuf_r+0x2a>

08006960 <__swsetup_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4b29      	ldr	r3, [pc, #164]	@ (8006a08 <__swsetup_r+0xa8>)
 8006964:	4605      	mov	r5, r0
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	460c      	mov	r4, r1
 800696a:	b118      	cbz	r0, 8006974 <__swsetup_r+0x14>
 800696c:	6a03      	ldr	r3, [r0, #32]
 800696e:	b90b      	cbnz	r3, 8006974 <__swsetup_r+0x14>
 8006970:	f7ff fa3c 	bl	8005dec <__sinit>
 8006974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006978:	0719      	lsls	r1, r3, #28
 800697a:	d422      	bmi.n	80069c2 <__swsetup_r+0x62>
 800697c:	06da      	lsls	r2, r3, #27
 800697e:	d407      	bmi.n	8006990 <__swsetup_r+0x30>
 8006980:	2209      	movs	r2, #9
 8006982:	602a      	str	r2, [r5, #0]
 8006984:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006988:	81a3      	strh	r3, [r4, #12]
 800698a:	f04f 30ff 	mov.w	r0, #4294967295
 800698e:	e033      	b.n	80069f8 <__swsetup_r+0x98>
 8006990:	0758      	lsls	r0, r3, #29
 8006992:	d512      	bpl.n	80069ba <__swsetup_r+0x5a>
 8006994:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006996:	b141      	cbz	r1, 80069aa <__swsetup_r+0x4a>
 8006998:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800699c:	4299      	cmp	r1, r3
 800699e:	d002      	beq.n	80069a6 <__swsetup_r+0x46>
 80069a0:	4628      	mov	r0, r5
 80069a2:	f7ff fb2b 	bl	8005ffc <_free_r>
 80069a6:	2300      	movs	r3, #0
 80069a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069b0:	81a3      	strh	r3, [r4, #12]
 80069b2:	2300      	movs	r3, #0
 80069b4:	6063      	str	r3, [r4, #4]
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f043 0308 	orr.w	r3, r3, #8
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	b94b      	cbnz	r3, 80069da <__swsetup_r+0x7a>
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80069cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d0:	d003      	beq.n	80069da <__swsetup_r+0x7a>
 80069d2:	4621      	mov	r1, r4
 80069d4:	4628      	mov	r0, r5
 80069d6:	f000 f84f 	bl	8006a78 <__smakebuf_r>
 80069da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069de:	f013 0201 	ands.w	r2, r3, #1
 80069e2:	d00a      	beq.n	80069fa <__swsetup_r+0x9a>
 80069e4:	2200      	movs	r2, #0
 80069e6:	60a2      	str	r2, [r4, #8]
 80069e8:	6962      	ldr	r2, [r4, #20]
 80069ea:	4252      	negs	r2, r2
 80069ec:	61a2      	str	r2, [r4, #24]
 80069ee:	6922      	ldr	r2, [r4, #16]
 80069f0:	b942      	cbnz	r2, 8006a04 <__swsetup_r+0xa4>
 80069f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069f6:	d1c5      	bne.n	8006984 <__swsetup_r+0x24>
 80069f8:	bd38      	pop	{r3, r4, r5, pc}
 80069fa:	0799      	lsls	r1, r3, #30
 80069fc:	bf58      	it	pl
 80069fe:	6962      	ldrpl	r2, [r4, #20]
 8006a00:	60a2      	str	r2, [r4, #8]
 8006a02:	e7f4      	b.n	80069ee <__swsetup_r+0x8e>
 8006a04:	2000      	movs	r0, #0
 8006a06:	e7f7      	b.n	80069f8 <__swsetup_r+0x98>
 8006a08:	20000018 	.word	0x20000018

08006a0c <_sbrk_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d06      	ldr	r5, [pc, #24]	@ (8006a28 <_sbrk_r+0x1c>)
 8006a10:	2300      	movs	r3, #0
 8006a12:	4604      	mov	r4, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	602b      	str	r3, [r5, #0]
 8006a18:	f7fa fb7e 	bl	8001118 <_sbrk>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d102      	bne.n	8006a26 <_sbrk_r+0x1a>
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	b103      	cbz	r3, 8006a26 <_sbrk_r+0x1a>
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	20000384 	.word	0x20000384

08006a2c <__swhatbuf_r>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	460c      	mov	r4, r1
 8006a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a34:	2900      	cmp	r1, #0
 8006a36:	b096      	sub	sp, #88	@ 0x58
 8006a38:	4615      	mov	r5, r2
 8006a3a:	461e      	mov	r6, r3
 8006a3c:	da0d      	bge.n	8006a5a <__swhatbuf_r+0x2e>
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a44:	f04f 0100 	mov.w	r1, #0
 8006a48:	bf14      	ite	ne
 8006a4a:	2340      	movne	r3, #64	@ 0x40
 8006a4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a50:	2000      	movs	r0, #0
 8006a52:	6031      	str	r1, [r6, #0]
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	b016      	add	sp, #88	@ 0x58
 8006a58:	bd70      	pop	{r4, r5, r6, pc}
 8006a5a:	466a      	mov	r2, sp
 8006a5c:	f000 f848 	bl	8006af0 <_fstat_r>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	dbec      	blt.n	8006a3e <__swhatbuf_r+0x12>
 8006a64:	9901      	ldr	r1, [sp, #4]
 8006a66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a6e:	4259      	negs	r1, r3
 8006a70:	4159      	adcs	r1, r3
 8006a72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a76:	e7eb      	b.n	8006a50 <__swhatbuf_r+0x24>

08006a78 <__smakebuf_r>:
 8006a78:	898b      	ldrh	r3, [r1, #12]
 8006a7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a7c:	079d      	lsls	r5, r3, #30
 8006a7e:	4606      	mov	r6, r0
 8006a80:	460c      	mov	r4, r1
 8006a82:	d507      	bpl.n	8006a94 <__smakebuf_r+0x1c>
 8006a84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	6163      	str	r3, [r4, #20]
 8006a90:	b003      	add	sp, #12
 8006a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a94:	ab01      	add	r3, sp, #4
 8006a96:	466a      	mov	r2, sp
 8006a98:	f7ff ffc8 	bl	8006a2c <__swhatbuf_r>
 8006a9c:	9f00      	ldr	r7, [sp, #0]
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	4639      	mov	r1, r7
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f7ff fb16 	bl	80060d4 <_malloc_r>
 8006aa8:	b948      	cbnz	r0, 8006abe <__smakebuf_r+0x46>
 8006aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aae:	059a      	lsls	r2, r3, #22
 8006ab0:	d4ee      	bmi.n	8006a90 <__smakebuf_r+0x18>
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	f043 0302 	orr.w	r3, r3, #2
 8006aba:	81a3      	strh	r3, [r4, #12]
 8006abc:	e7e2      	b.n	8006a84 <__smakebuf_r+0xc>
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	6020      	str	r0, [r4, #0]
 8006ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ac6:	81a3      	strh	r3, [r4, #12]
 8006ac8:	9b01      	ldr	r3, [sp, #4]
 8006aca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ace:	b15b      	cbz	r3, 8006ae8 <__smakebuf_r+0x70>
 8006ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f000 f81d 	bl	8006b14 <_isatty_r>
 8006ada:	b128      	cbz	r0, 8006ae8 <__smakebuf_r+0x70>
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	f023 0303 	bic.w	r3, r3, #3
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	81a3      	strh	r3, [r4, #12]
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	431d      	orrs	r5, r3
 8006aec:	81a5      	strh	r5, [r4, #12]
 8006aee:	e7cf      	b.n	8006a90 <__smakebuf_r+0x18>

08006af0 <_fstat_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4d07      	ldr	r5, [pc, #28]	@ (8006b10 <_fstat_r+0x20>)
 8006af4:	2300      	movs	r3, #0
 8006af6:	4604      	mov	r4, r0
 8006af8:	4608      	mov	r0, r1
 8006afa:	4611      	mov	r1, r2
 8006afc:	602b      	str	r3, [r5, #0]
 8006afe:	f7fa fae2 	bl	80010c6 <_fstat>
 8006b02:	1c43      	adds	r3, r0, #1
 8006b04:	d102      	bne.n	8006b0c <_fstat_r+0x1c>
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	b103      	cbz	r3, 8006b0c <_fstat_r+0x1c>
 8006b0a:	6023      	str	r3, [r4, #0]
 8006b0c:	bd38      	pop	{r3, r4, r5, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000384 	.word	0x20000384

08006b14 <_isatty_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4d06      	ldr	r5, [pc, #24]	@ (8006b30 <_isatty_r+0x1c>)
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4604      	mov	r4, r0
 8006b1c:	4608      	mov	r0, r1
 8006b1e:	602b      	str	r3, [r5, #0]
 8006b20:	f7fa fae1 	bl	80010e6 <_isatty>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	d102      	bne.n	8006b2e <_isatty_r+0x1a>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	b103      	cbz	r3, 8006b2e <_isatty_r+0x1a>
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
 8006b30:	20000384 	.word	0x20000384

08006b34 <_init>:
 8006b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b36:	bf00      	nop
 8006b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3a:	bc08      	pop	{r3}
 8006b3c:	469e      	mov	lr, r3
 8006b3e:	4770      	bx	lr

08006b40 <_fini>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	bf00      	nop
 8006b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b46:	bc08      	pop	{r3}
 8006b48:	469e      	mov	lr, r3
 8006b4a:	4770      	bx	lr
