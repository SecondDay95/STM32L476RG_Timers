
6_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006504  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006694  08006694  00007694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800671c  0800671c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  0800671c  0800671c  0000771c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006724  08006724  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006724  08006724  00007724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006728  08006728  00007728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800672c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000068  08006794  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08006794  00008390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010964  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d1  00000000  00000000  000189fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  0001acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c51  00000000  00000000  0001bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a76  00000000  00000000  0001c8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f8b  00000000  00000000  00044367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f49dd  00000000  00000000  000562f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014accf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b0  00000000  00000000  0014ad14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014f6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800667c 	.word	0x0800667c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800667c 	.word	0x0800667c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

//Funkcja wywolywana po pojawieniu sie przerwania po przepelnieniu dowolnego licznika
//(Po przepelnieniu licznika wywolywane jest przerwanie)
//Funkcja obslugujaca przerwania po przepelnieniu dowolnego licznika:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	//Jeżeli przerwanie wywolane zostalo po przepelnieniu sie licznika TIM6:
	if(htim == &htim6) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a10      	ldr	r2, [pc, #64]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d104      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x1a>
		//Miganie dioda opiera sie o timer sprzetowy TIM6 i system przerwan
		//Program glowny nie jest blokowany.
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000570:	2120      	movs	r1, #32
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f001 f92b 	bl	80017d0 <HAL_GPIO_TogglePin>
	}

	//Jeżeli przerwanie wywolane zostalo po przepelnieniu licznika TIM3:
	if(htim == &htim3) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a0c      	ldr	r2, [pc, #48]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d110      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x44>
		//Zapalenie 3 zewnetrznych diod na plytce stykowej:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2140      	movs	r1, #64	@ 0x40
 8000586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058a:	f001 f909 	bl	80017a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000596:	f001 f903 	bl	80017a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2101      	movs	r1, #1
 800059e:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005a0:	f001 f8fe 	bl	80017a0 <HAL_GPIO_WritePin>
	}

}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000168 	.word	0x20000168
 80005b0:	200000d0 	.word	0x200000d0
 80005b4:	48000400 	.word	0x48000400

080005b8 <HAL_TIM_OC_DelayElapsedCallback>:

//Funkcja obslugujaca przerwania generowanych przez poszczzegolne kanaly licznika
//(po przepelnieniu danego kanalu licznika - wartosc w parametrze pulse w konfiguracji):
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

	//Jezeli przerwanie zostalo wywolane przez kanaly licznika TIM3
	if(htim == &htim3) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d121      	bne.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
		switch(HAL_TIM_GetActiveChannel(&htim3)) {
 80005c8:	4812      	ldr	r0, [pc, #72]	@ (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005ca:	f003 fe9e 	bl	800430a <HAL_TIM_GetActiveChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d014      	beq.n	80005fe <HAL_TIM_OC_DelayElapsedCallback+0x46>
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	dc18      	bgt.n	800060a <HAL_TIM_OC_DelayElapsedCallback+0x52>
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d002      	beq.n	80005e2 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d007      	beq.n	80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x38>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_3:
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 80005e0:	e013      	b.n	800060a <HAL_TIM_OC_DelayElapsedCallback+0x52>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2140      	movs	r1, #64	@ 0x40
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ea:	f001 f8d9 	bl	80017a0 <HAL_GPIO_WritePin>
			break;
 80005ee:	e00d      	b.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2180      	movs	r1, #128	@ 0x80
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f8:	f001 f8d2 	bl	80017a0 <HAL_GPIO_WritePin>
			break;
 80005fc:	e006      	b.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000604:	f001 f8cc 	bl	80017a0 <HAL_GPIO_WritePin>
			break;
 8000608:	e000      	b.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
			break;
 800060a:	bf00      	nop
		}
	}
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000d0 	.word	0x200000d0
 8000618:	48000400 	.word	0x48000400

0800061c <__io_putchar>:
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
}

//Przekierowanie komunikatów wysylanych przez printf na UART:
int __io_putchar(int ch)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b0a      	cmp	r3, #10
 8000628:	d102      	bne.n	8000630 <__io_putchar+0x14>
    __io_putchar('\r');
 800062a:	200d      	movs	r0, #13
 800062c:	f7ff fff6 	bl	800061c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000630:	1d39      	adds	r1, r7, #4
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	2201      	movs	r2, #1
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <__io_putchar+0x2c>)
 800063a:	f004 fb97 	bl	8004d6c <HAL_UART_Transmit>

  return 1;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200001b4 	.word	0x200001b4

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fd74 	bl	800113e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f857 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 fa99 	bl	8000b90 <MX_GPIO_Init>
  MX_TIM6_Init();
 800065e:	f000 fa2f 	bl	8000ac0 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000662:	f000 f907 	bl	8000874 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000666:	f000 f997 	bl	8000998 <MX_TIM4_Init>
  MX_TIM2_Init();
 800066a:	f000 f8af 	bl	80007cc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800066e:	f000 fa5f 	bl	8000b30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Uruchomienie licznika TIM6:
  HAL_TIM_Base_Start_IT(&htim6);
 8000672:	4820      	ldr	r0, [pc, #128]	@ (80006f4 <main+0xa8>)
 8000674:	f002 fcc6 	bl	8003004 <HAL_TIM_Base_Start_IT>

  //Uruchomienie licznika TIM3:
  HAL_TIM_Base_Start_IT(&htim3);
 8000678:	481f      	ldr	r0, [pc, #124]	@ (80006f8 <main+0xac>)
 800067a:	f002 fcc3 	bl	8003004 <HAL_TIM_Base_Start_IT>
  //Uruchomienie kanalow licznika TIM3 w trybie przerwan (przerwania sa obslugiwane w funkcji
  //HAL_TIM_OC_DelayElapsedCallback:
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800067e:	2100      	movs	r1, #0
 8000680:	481d      	ldr	r0, [pc, #116]	@ (80006f8 <main+0xac>)
 8000682:	f002 fd91 	bl	80031a8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000686:	2104      	movs	r1, #4
 8000688:	481b      	ldr	r0, [pc, #108]	@ (80006f8 <main+0xac>)
 800068a:	f002 fd8d 	bl	80031a8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 800068e:	2108      	movs	r1, #8
 8000690:	4819      	ldr	r0, [pc, #100]	@ (80006f8 <main+0xac>)
 8000692:	f002 fd89 	bl	80031a8 <HAL_TIM_OC_Start_IT>

  //Uruchomienie licznika TIM4:
  HAL_TIM_Base_Start_IT(&htim4);
 8000696:	4819      	ldr	r0, [pc, #100]	@ (80006fc <main+0xb0>)
 8000698:	f002 fcb4 	bl	8003004 <HAL_TIM_Base_Start_IT>
  //Uruchomienie kanalow licznika TIM4 w trybie wyjscia PWM (kanaly licznika bezposrednio
  //steruja pinami). W konfiguracji sprzętowej (Pulse) mozna ustawic staly wspolczynnik
  //wypelnienia sygnalu PWM, natomiast w makrze __HAL_TIM_SET_COMPARE mozna sterowac
  //wspolczynnikiem wypelninia.:
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800069c:	2100      	movs	r1, #0
 800069e:	4817      	ldr	r0, [pc, #92]	@ (80006fc <main+0xb0>)
 80006a0:	f002 ff38 	bl	8003514 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80006a4:	2104      	movs	r1, #4
 80006a6:	4815      	ldr	r0, [pc, #84]	@ (80006fc <main+0xb0>)
 80006a8:	f002 ff34 	bl	8003514 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80006ac:	2108      	movs	r1, #8
 80006ae:	4813      	ldr	r0, [pc, #76]	@ (80006fc <main+0xb0>)
 80006b0:	f002 ff30 	bl	8003514 <HAL_TIM_PWM_Start>

  //Uruchomienie licznika TIM2:
  HAL_TIM_Base_Start(&htim2);
 80006b4:	4812      	ldr	r0, [pc, #72]	@ (8000700 <main+0xb4>)
 80006b6:	f002 fc3d 	bl	8002f34 <HAL_TIM_Base_Start>
  //Uruchomienie kanalu 1 licznika TIM2 w trybie wejscia dla sygnalu zewnetrznego w trybie przerwan:
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80006ba:	2100      	movs	r1, #0
 80006bc:	4810      	ldr	r0, [pc, #64]	@ (8000700 <main+0xb4>)
 80006be:	f003 f82f 	bl	8003720 <HAL_TIM_IC_Start_IT>

  //Uruchomienie timera TIM2 w trybie obsługi enkoderów (pomiaru pozycji enkodera):
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80006c2:	213c      	movs	r1, #60	@ 0x3c
 80006c4:	480e      	ldr	r0, [pc, #56]	@ (8000700 <main+0xb4>)
 80006c6:	f003 fa1b 	bl	8003b00 <HAL_TIM_Encoder_Start>
  int16_t prev_value = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	80fb      	strh	r3, [r7, #6]
		  captured_value = 0;
	  }
	  */

	  //Wyswietlanie pozycji enkodera:
	  int16_t value = __HAL_TIM_GET_COUNTER(&htim2);
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <main+0xb4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d4:	80bb      	strh	r3, [r7, #4]
	  if(value != prev_value) {
 80006d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d0f5      	beq.n	80006ce <main+0x82>

		  printf("value = %d\n", value);
 80006e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4806      	ldr	r0, [pc, #24]	@ (8000704 <main+0xb8>)
 80006ea:	f005 f959 	bl	80059a0 <iprintf>
		  prev_value = value;
 80006ee:	88bb      	ldrh	r3, [r7, #4]
 80006f0:	80fb      	strh	r3, [r7, #6]
  {
 80006f2:	e7ec      	b.n	80006ce <main+0x82>
 80006f4:	20000168 	.word	0x20000168
 80006f8:	200000d0 	.word	0x200000d0
 80006fc:	2000011c 	.word	0x2000011c
 8000700:	20000084 	.word	0x20000084
 8000704:	08006694 	.word	0x08006694

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b096      	sub	sp, #88	@ 0x58
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2244      	movs	r2, #68	@ 0x44
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f005 f997 	bl	8005a4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800072a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800072e:	f001 f887 	bl	8001840 <HAL_PWREx_ControlVoltageScaling>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000738:	f000 fa8a 	bl	8000c50 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800073c:	f001 f862 	bl	8001804 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000740:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <SystemClock_Config+0xc0>)
 8000742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000746:	4a20      	ldr	r2, [pc, #128]	@ (80007c8 <SystemClock_Config+0xc0>)
 8000748:	f023 0318 	bic.w	r3, r3, #24
 800074c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000750:	2314      	movs	r3, #20
 8000752:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000760:	2360      	movs	r3, #96	@ 0x60
 8000762:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000768:	2301      	movs	r3, #1
 800076a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800076c:	2301      	movs	r3, #1
 800076e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000770:	2328      	movs	r3, #40	@ 0x28
 8000772:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000774:	2307      	movs	r3, #7
 8000776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4618      	mov	r0, r3
 8000786:	f001 f8b1 	bl	80018ec <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000790:	f000 fa5e 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2303      	movs	r3, #3
 800079a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	2104      	movs	r1, #4
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fc79 	bl	80020a4 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007b8:	f000 fa4a 	bl	8000c50 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007bc:	f002 f980 	bl	8002ac0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007c0:	bf00      	nop
 80007c2:	3758      	adds	r7, #88	@ 0x58
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000

080007cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2224      	movs	r2, #36	@ 0x24
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f005 f935 	bl	8005a4a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ea:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_TIM2_Init+0xa4>)
 80007ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <MX_TIM2_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_TIM2_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <MX_TIM2_Init+0xa4>)
 8000800:	2227      	movs	r2, #39	@ 0x27
 8000802:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_TIM2_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080a:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_TIM2_Init+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000810:	2301      	movs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000818:	2301      	movs	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000828:	2301      	movs	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	@ (8000870 <MX_TIM2_Init+0xa4>)
 800083c:	f003 f8ba 	bl	80039b4 <HAL_TIM_Encoder_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000846:	f000 fa03 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <MX_TIM2_Init+0xa4>)
 8000858:	f004 f994 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000862:	f000 f9f5 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3730      	adds	r7, #48	@ 0x30
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000084 	.word	0x20000084

08000874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	@ 0x38
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000894:	463b      	mov	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000990 <MX_TIM3_Init+0x11c>)
 80008a8:	4a3a      	ldr	r2, [pc, #232]	@ (8000994 <MX_TIM3_Init+0x120>)
 80008aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80008ac:	4b38      	ldr	r3, [pc, #224]	@ (8000990 <MX_TIM3_Init+0x11c>)
 80008ae:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80008b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b4:	4b36      	ldr	r3, [pc, #216]	@ (8000990 <MX_TIM3_Init+0x11c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80008ba:	4b35      	ldr	r3, [pc, #212]	@ (8000990 <MX_TIM3_Init+0x11c>)
 80008bc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c2:	4b33      	ldr	r3, [pc, #204]	@ (8000990 <MX_TIM3_Init+0x11c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b31      	ldr	r3, [pc, #196]	@ (8000990 <MX_TIM3_Init+0x11c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ce:	4830      	ldr	r0, [pc, #192]	@ (8000990 <MX_TIM3_Init+0x11c>)
 80008d0:	f002 fad8 	bl	8002e84 <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80008da:	f000 f9b9 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4829      	ldr	r0, [pc, #164]	@ (8000990 <MX_TIM3_Init+0x11c>)
 80008ec:	f003 fc26 	bl	800413c <HAL_TIM_ConfigClockSource>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80008f6:	f000 f9ab 	bl	8000c50 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008fa:	4825      	ldr	r0, [pc, #148]	@ (8000990 <MX_TIM3_Init+0x11c>)
 80008fc:	f002 fbf2 	bl	80030e4 <HAL_TIM_OC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000906:	f000 f9a3 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	481d      	ldr	r0, [pc, #116]	@ (8000990 <MX_TIM3_Init+0x11c>)
 800091a:	f004 f933 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000924:	f000 f994 	bl	8000c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500;
 800092c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000930:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	4619      	mov	r1, r3
 8000940:	4813      	ldr	r0, [pc, #76]	@ (8000990 <MX_TIM3_Init+0x11c>)
 8000942:	f003 fa6d 	bl	8003e20 <HAL_TIM_OC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800094c:	f000 f980 	bl	8000c50 <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 8000950:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000954:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	2204      	movs	r2, #4
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <MX_TIM3_Init+0x11c>)
 800095e:	f003 fa5f 	bl	8003e20 <HAL_TIM_OC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000968:	f000 f972 	bl	8000c50 <Error_Handler>
  }
  sConfigOC.Pulse = 7500;
 800096c:	f641 534c 	movw	r3, #7500	@ 0x1d4c
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	2208      	movs	r2, #8
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_TIM3_Init+0x11c>)
 800097a:	f003 fa51 	bl	8003e20 <HAL_TIM_OC_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM3_Init+0x114>
  {
    Error_Handler();
 8000984:	f000 f964 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3738      	adds	r7, #56	@ 0x38
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000d0 	.word	0x200000d0
 8000994:	40000400 	.word	0x40000400

08000998 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	@ 0x38
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b8:	463b      	mov	r3, r7
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009ca:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 80009cc:	4a3b      	ldr	r2, [pc, #236]	@ (8000abc <MX_TIM4_Init+0x124>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80009d0:	4b39      	ldr	r3, [pc, #228]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 80009d2:	224f      	movs	r2, #79	@ 0x4f
 80009d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b38      	ldr	r3, [pc, #224]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80009dc:	4b36      	ldr	r3, [pc, #216]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 80009de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b34      	ldr	r3, [pc, #208]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ea:	4b33      	ldr	r3, [pc, #204]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009f0:	4831      	ldr	r0, [pc, #196]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 80009f2:	f002 fa47 	bl	8002e84 <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80009fc:	f000 f928 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	482a      	ldr	r0, [pc, #168]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 8000a0e:	f003 fb95 	bl	800413c <HAL_TIM_ConfigClockSource>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a18:	f000 f91a 	bl	8000c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a1c:	4826      	ldr	r0, [pc, #152]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 8000a1e:	f002 fd17 	bl	8003450 <HAL_TIM_PWM_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a28:	f000 f912 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	481f      	ldr	r0, [pc, #124]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 8000a3c:	f004 f8a2 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a46:	f000 f903 	bl	8000c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4a:	2360      	movs	r3, #96	@ 0x60
 8000a4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000a4e:	2332      	movs	r3, #50	@ 0x32
 8000a50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a52:	2302      	movs	r3, #2
 8000a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4815      	ldr	r0, [pc, #84]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 8000a62:	f003 fa57 	bl	8003f14 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000a6c:	f000 f8f0 	bl	8000c50 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8000a70:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a74:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	2204      	movs	r2, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 8000a7e:	f003 fa49 	bl	8003f14 <HAL_TIM_PWM_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8000a88:	f000 f8e2 	bl	8000c50 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8000a8c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a90:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	2208      	movs	r2, #8
 8000a96:	4619      	mov	r1, r3
 8000a98:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 8000a9a:	f003 fa3b 	bl	8003f14 <HAL_TIM_PWM_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8000aa4:	f000 f8d4 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <MX_TIM4_Init+0x120>)
 8000aaa:	f000 f991 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 8000aae:	bf00      	nop
 8000ab0:	3738      	adds	r7, #56	@ 0x38
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000011c 	.word	0x2000011c
 8000abc:	40000800 	.word	0x40000800

08000ac0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_TIM6_Init+0x68>)
 8000ad2:	4a16      	ldr	r2, [pc, #88]	@ (8000b2c <MX_TIM6_Init+0x6c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_TIM6_Init+0x68>)
 8000ad8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000adc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_TIM6_Init+0x68>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <MX_TIM6_Init+0x68>)
 8000ae6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000aea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_TIM6_Init+0x68>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000af2:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_TIM6_Init+0x68>)
 8000af4:	f002 f9c6 	bl	8002e84 <HAL_TIM_Base_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000afe:	f000 f8a7 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <MX_TIM6_Init+0x68>)
 8000b10:	f004 f838 	bl	8004b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000b1a:	f000 f899 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000168 	.word	0x20000168
 8000b2c:	40001000 	.word	0x40001000

08000b30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_USART2_UART_Init+0x58>)
 8000b36:	4a15      	ldr	r2, [pc, #84]	@ (8000b8c <MX_USART2_UART_Init+0x5c>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <MX_USART2_UART_Init+0x58>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_USART2_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_USART2_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_USART2_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_USART2_UART_Init+0x58>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <MX_USART2_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_USART2_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <MX_USART2_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_USART2_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_USART2_UART_Init+0x58>)
 8000b74:	f004 f8ac 	bl	8004cd0 <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b7e:	f000 f867 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001b4 	.word	0x200001b4
 8000b8c:	40004400 	.word	0x40004400

08000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <MX_GPIO_Init+0xb8>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	4a27      	ldr	r2, [pc, #156]	@ (8000c48 <MX_GPIO_Init+0xb8>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb2:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <MX_GPIO_Init+0xb8>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b22      	ldr	r3, [pc, #136]	@ (8000c48 <MX_GPIO_Init+0xb8>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	4a21      	ldr	r2, [pc, #132]	@ (8000c48 <MX_GPIO_Init+0xb8>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bca:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <MX_GPIO_Init+0xb8>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <MX_GPIO_Init+0xb8>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	4a1b      	ldr	r2, [pc, #108]	@ (8000c48 <MX_GPIO_Init+0xb8>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <MX_GPIO_Init+0xb8>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	21e0      	movs	r1, #224	@ 0xe0
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf6:	f000 fdd3 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4813      	ldr	r0, [pc, #76]	@ (8000c4c <MX_GPIO_Init+0xbc>)
 8000c00:	f000 fdce 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1_Pin|LED2_Pin;
 8000c04:	23e0      	movs	r3, #224	@ 0xe0
 8000c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1e:	f000 fc15 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	4804      	ldr	r0, [pc, #16]	@ (8000c4c <MX_GPIO_Init+0xbc>)
 8000c3a:	f000 fc07 	bl	800144c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48000400 	.word	0x48000400

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <Error_Handler+0x8>

08000c5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	@ 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cc4:	d128      	bne.n	8000d18 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cca:	4a15      	ldr	r2, [pc, #84]	@ (8000d20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cea:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d06:	2301      	movs	r3, #1
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d14:	f000 fb9a 	bl	800144c <HAL_GPIO_Init>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	@ 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a23      	ldr	r2, [pc, #140]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d114      	bne.n	8000d60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d36:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3a:	4a22      	ldr	r2, [pc, #136]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d42:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2109      	movs	r1, #9
 8000d52:	201d      	movs	r0, #29
 8000d54:	f000 fb43 	bl	80013de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d58:	201d      	movs	r0, #29
 8000d5a:	f000 fb5c 	bl	8001416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d5e:	e02a      	b.n	8000db6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a18      	ldr	r2, [pc, #96]	@ (8000dc8 <HAL_TIM_Base_MspInit+0xa4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d10c      	bne.n	8000d84 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6e:	4a15      	ldr	r2, [pc, #84]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
}
 8000d82:	e018      	b.n	8000db6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_TIM_Base_MspInit+0xa8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d113      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d92:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	210a      	movs	r1, #10
 8000daa:	2036      	movs	r0, #54	@ 0x36
 8000dac:	f000 fb17 	bl	80013de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000db0:	2036      	movs	r0, #54	@ 0x36
 8000db2:	f000 fb30 	bl	8001416 <HAL_NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40000800 	.word	0x40000800
 8000dcc:	40001000 	.word	0x40001000

08000dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a11      	ldr	r2, [pc, #68]	@ (8000e34 <HAL_TIM_MspPostInit+0x64>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d11c      	bne.n	8000e2c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a10      	ldr	r2, [pc, #64]	@ (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HAL_TIM_MspPostInit+0x68>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000e0a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000e0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <HAL_TIM_MspPostInit+0x6c>)
 8000e28:	f000 fb10 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40000800 	.word	0x40000800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0ac      	sub	sp, #176	@ 0xb0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2288      	movs	r2, #136	@ 0x88
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 fdf2 	bl	8005a4a <memset>
  if(huart->Instance==USART2)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a21      	ldr	r2, [pc, #132]	@ (8000ef0 <HAL_UART_MspInit+0xb0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d13b      	bne.n	8000ee8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fb35 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e88:	f7ff fee2 	bl	8000c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e90:	4a18      	ldr	r2, [pc, #96]	@ (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea8:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee4:	f000 fab2 	bl	800144c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ee8:	bf00      	nop
 8000eea:	37b0      	adds	r7, #176	@ 0xb0
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40004400 	.word	0x40004400
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <NMI_Handler+0x4>

08000f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <MemManage_Handler+0x4>

08000f10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4e:	f000 f94b 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <TIM3_IRQHandler+0x10>)
 8000f5e:	f002 fe5d 	bl	8003c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000d0 	.word	0x200000d0

08000f6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <TIM6_DAC_IRQHandler+0x10>)
 8000f72:	f002 fe53 	bl	8003c1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000168 	.word	0x20000168

08000f80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	e00a      	b.n	8000fa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f92:	f3af 8000 	nop.w
 8000f96:	4601      	mov	r1, r0
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	60ba      	str	r2, [r7, #8]
 8000f9e:	b2ca      	uxtb	r2, r1
 8000fa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbf0      	blt.n	8000f92 <_read+0x12>
  }

  return len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e009      	b.n	8000fe0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fb21 	bl	800061c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dbf1      	blt.n	8000fcc <_write+0x12>
  }
  return len;
 8000fe8:	687b      	ldr	r3, [r7, #4]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_close>:

int _close(int file)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800101a:	605a      	str	r2, [r3, #4]
  return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_isatty>:

int _isatty(int file)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	@ (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f004 fd2c 	bl	8005ae8 <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20018000 	.word	0x20018000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	2000023c 	.word	0x2000023c
 80010c4:	20000390 	.word	0x20000390

080010c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001124 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f0:	f7ff ffea 	bl	80010c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	@ (8001128 <LoopForever+0x6>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	@ (800112c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <LoopForever+0xe>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <LoopForever+0x12>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	@ (8001138 <LoopForever+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111a:	f004 fceb 	bl	8005af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800111e:	f7ff fa95 	bl	800064c <main>

08001122 <LoopForever>:

LoopForever:
    b LoopForever
 8001122:	e7fe      	b.n	8001122 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001124:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001130:	0800672c 	.word	0x0800672c
  ldr r2, =_sbss
 8001134:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001138:	20000390 	.word	0x20000390

0800113c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_2_IRQHandler>

0800113e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f93d 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800114e:	200f      	movs	r0, #15
 8001150:	f000 f80e 	bl	8001170 <HAL_InitTick>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	e001      	b.n	8001164 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001160:	f7ff fd7c 	bl	8000c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001164:	79fb      	ldrb	r3, [r7, #7]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <HAL_InitTick+0x6c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d023      	beq.n	80011cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_InitTick+0x70>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <HAL_InitTick+0x6c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f949 	bl	8001432 <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10f      	bne.n	80011c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d809      	bhi.n	80011c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 f913 	bl	80013de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b8:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_InitTick+0x74>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e007      	b.n	80011d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e004      	b.n	80011d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	e001      	b.n	80011d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000004 	.word	0x20000004

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008
 800120c:	20000240 	.word	0x20000240

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000240 	.word	0x20000240

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	@ (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4907      	ldr	r1, [pc, #28]	@ (80012c4 <__NVIC_EnableIRQ+0x38>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	@ (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	@ (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	@ 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff8e 	bl	80012c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff29 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff3e 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff8e 	bl	800131c <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5d 	bl	80012c8 <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff31 	bl	800128c <__NVIC_EnableIRQ>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffa2 	bl	8001384 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145a:	e17f      	b.n	800175c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8171 	beq.w	8001756 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d005      	beq.n	800148c <HAL_GPIO_Init+0x40>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d130      	bne.n	80014ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014c2:	2201      	movs	r2, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 0201 	and.w	r2, r3, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d118      	bne.n	800152c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001500:	2201      	movs	r2, #1
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	08db      	lsrs	r3, r3, #3
 8001516:	f003 0201 	and.w	r2, r3, #1
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b03      	cmp	r3, #3
 8001536:	d017      	beq.n	8001568 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d123      	bne.n	80015bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	08da      	lsrs	r2, r3, #3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3208      	adds	r2, #8
 800157c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	220f      	movs	r2, #15
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	691a      	ldr	r2, [r3, #16]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	08da      	lsrs	r2, r3, #3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3208      	adds	r2, #8
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0203 	and.w	r2, r3, #3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80ac 	beq.w	8001756 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b5f      	ldr	r3, [pc, #380]	@ (800177c <HAL_GPIO_Init+0x330>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001602:	4a5e      	ldr	r2, [pc, #376]	@ (800177c <HAL_GPIO_Init+0x330>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6613      	str	r3, [r2, #96]	@ 0x60
 800160a:	4b5c      	ldr	r3, [pc, #368]	@ (800177c <HAL_GPIO_Init+0x330>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001616:	4a5a      	ldr	r2, [pc, #360]	@ (8001780 <HAL_GPIO_Init+0x334>)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	220f      	movs	r2, #15
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001640:	d025      	beq.n	800168e <HAL_GPIO_Init+0x242>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4f      	ldr	r2, [pc, #316]	@ (8001784 <HAL_GPIO_Init+0x338>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d01f      	beq.n	800168a <HAL_GPIO_Init+0x23e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4e      	ldr	r2, [pc, #312]	@ (8001788 <HAL_GPIO_Init+0x33c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d019      	beq.n	8001686 <HAL_GPIO_Init+0x23a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4d      	ldr	r2, [pc, #308]	@ (800178c <HAL_GPIO_Init+0x340>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d013      	beq.n	8001682 <HAL_GPIO_Init+0x236>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4c      	ldr	r2, [pc, #304]	@ (8001790 <HAL_GPIO_Init+0x344>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d00d      	beq.n	800167e <HAL_GPIO_Init+0x232>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4b      	ldr	r2, [pc, #300]	@ (8001794 <HAL_GPIO_Init+0x348>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d007      	beq.n	800167a <HAL_GPIO_Init+0x22e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4a      	ldr	r2, [pc, #296]	@ (8001798 <HAL_GPIO_Init+0x34c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <HAL_GPIO_Init+0x22a>
 8001672:	2306      	movs	r3, #6
 8001674:	e00c      	b.n	8001690 <HAL_GPIO_Init+0x244>
 8001676:	2307      	movs	r3, #7
 8001678:	e00a      	b.n	8001690 <HAL_GPIO_Init+0x244>
 800167a:	2305      	movs	r3, #5
 800167c:	e008      	b.n	8001690 <HAL_GPIO_Init+0x244>
 800167e:	2304      	movs	r3, #4
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x244>
 8001682:	2303      	movs	r3, #3
 8001684:	e004      	b.n	8001690 <HAL_GPIO_Init+0x244>
 8001686:	2302      	movs	r3, #2
 8001688:	e002      	b.n	8001690 <HAL_GPIO_Init+0x244>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x244>
 800168e:	2300      	movs	r3, #0
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	f002 0203 	and.w	r2, r2, #3
 8001696:	0092      	lsls	r2, r2, #2
 8001698:	4093      	lsls	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016a0:	4937      	ldr	r1, [pc, #220]	@ (8001780 <HAL_GPIO_Init+0x334>)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ae:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <HAL_GPIO_Init+0x350>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016d2:	4a32      	ldr	r2, [pc, #200]	@ (800179c <HAL_GPIO_Init+0x350>)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016d8:	4b30      	ldr	r3, [pc, #192]	@ (800179c <HAL_GPIO_Init+0x350>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016fc:	4a27      	ldr	r2, [pc, #156]	@ (800179c <HAL_GPIO_Init+0x350>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001702:	4b26      	ldr	r3, [pc, #152]	@ (800179c <HAL_GPIO_Init+0x350>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001726:	4a1d      	ldr	r2, [pc, #116]	@ (800179c <HAL_GPIO_Init+0x350>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <HAL_GPIO_Init+0x350>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001750:	4a12      	ldr	r2, [pc, #72]	@ (800179c <HAL_GPIO_Init+0x350>)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	f47f ae78 	bne.w	800145c <HAL_GPIO_Init+0x10>
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	371c      	adds	r7, #28
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000
 8001784:	48000400 	.word	0x48000400
 8001788:	48000800 	.word	0x48000800
 800178c:	48000c00 	.word	0x48000c00
 8001790:	48001000 	.word	0x48001000
 8001794:	48001400 	.word	0x48001400
 8001798:	48001800 	.word	0x48001800
 800179c:	40010400 	.word	0x40010400

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4013      	ands	r3, r2
 80017e8:	041a      	lsls	r2, r3, #16
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43d9      	mvns	r1, r3
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	400b      	ands	r3, r1
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800180e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40007000 	.word	0x40007000

08001824 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <HAL_PWREx_GetVoltageRange+0x18>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40007000 	.word	0x40007000

08001840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800184e:	d130      	bne.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001850:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800185c:	d038      	beq.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001866:	4a1e      	ldr	r2, [pc, #120]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001868:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800186e:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2232      	movs	r2, #50	@ 0x32
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	4a1b      	ldr	r2, [pc, #108]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	0c9b      	lsrs	r3, r3, #18
 8001880:	3301      	adds	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001884:	e002      	b.n	800188c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3b01      	subs	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800188c:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001898:	d102      	bne.n	80018a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f2      	bne.n	8001886 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018a0:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ac:	d110      	bne.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e00f      	b.n	80018d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018be:	d007      	beq.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018c0:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018c8:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40007000 	.word	0x40007000
 80018e4:	20000000 	.word	0x20000000
 80018e8:	431bde83 	.word	0x431bde83

080018ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e3ca      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fe:	4b97      	ldr	r3, [pc, #604]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001908:	4b94      	ldr	r3, [pc, #592]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80e4 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_RCC_OscConfig+0x4a>
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2b0c      	cmp	r3, #12
 800192a:	f040 808b 	bne.w	8001a44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2b01      	cmp	r3, #1
 8001932:	f040 8087 	bne.w	8001a44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001936:	4b89      	ldr	r3, [pc, #548]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <HAL_RCC_OscConfig+0x62>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e3a2      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1a      	ldr	r2, [r3, #32]
 8001952:	4b82      	ldr	r3, [pc, #520]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_RCC_OscConfig+0x7c>
 800195e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001966:	e005      	b.n	8001974 <HAL_RCC_OscConfig+0x88>
 8001968:	4b7c      	ldr	r3, [pc, #496]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 800196a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001974:	4293      	cmp	r3, r2
 8001976:	d223      	bcs.n	80019c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fd55 	bl	800242c <RCC_SetFlashLatencyFromMSIRange>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e383      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198c:	4b73      	ldr	r3, [pc, #460]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a72      	ldr	r2, [pc, #456]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b70      	ldr	r3, [pc, #448]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	496d      	ldr	r1, [pc, #436]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019aa:	4b6c      	ldr	r3, [pc, #432]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	4968      	ldr	r1, [pc, #416]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
 80019be:	e025      	b.n	8001a0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c0:	4b66      	ldr	r3, [pc, #408]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a65      	ldr	r2, [pc, #404]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4960      	ldr	r1, [pc, #384]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019de:	4b5f      	ldr	r3, [pc, #380]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	495b      	ldr	r1, [pc, #364]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fd15 	bl	800242c <RCC_SetFlashLatencyFromMSIRange>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e343      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a0c:	f000 fc4a 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b52      	ldr	r3, [pc, #328]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	4950      	ldr	r1, [pc, #320]	@ (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	4a4e      	ldr	r2, [pc, #312]	@ (8001b64 <HAL_RCC_OscConfig+0x278>)
 8001a2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fb9d 	bl	8001170 <HAL_InitTick>
 8001a36:	4603      	mov	r3, r0
 8001a38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d052      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	e327      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d032      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a4c:	4b43      	ldr	r3, [pc, #268]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a42      	ldr	r2, [pc, #264]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fbda 	bl	8001210 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a60:	f7ff fbd6 	bl	8001210 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e310      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a72:	4b3a      	ldr	r3, [pc, #232]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7e:	4b37      	ldr	r3, [pc, #220]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a36      	ldr	r2, [pc, #216]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4931      	ldr	r1, [pc, #196]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	492c      	ldr	r1, [pc, #176]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
 8001ab0:	e01a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a29      	ldr	r2, [pc, #164]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001abe:	f7ff fba7 	bl	8001210 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac6:	f7ff fba3 	bl	8001210 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e2dd      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad8:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x1da>
 8001ae4:	e000      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ae6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d074      	beq.n	8001bde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d005      	beq.n	8001b06 <HAL_RCC_OscConfig+0x21a>
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	d10e      	bne.n	8001b1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d10b      	bne.n	8001b1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d064      	beq.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d160      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e2ba      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x24a>
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	e026      	b.n	8001b84 <HAL_RCC_OscConfig+0x298>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b3e:	d115      	bne.n	8001b6c <HAL_RCC_OscConfig+0x280>
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a02      	ldr	r2, [pc, #8]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e014      	b.n	8001b84 <HAL_RCC_OscConfig+0x298>
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	080066a0 	.word	0x080066a0
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	4ba0      	ldr	r3, [pc, #640]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a9f      	ldr	r2, [pc, #636]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b9d      	ldr	r3, [pc, #628]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a9c      	ldr	r2, [pc, #624]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fb40 	bl	8001210 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fb3c 	bl	8001210 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e276      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba6:	4b92      	ldr	r3, [pc, #584]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2a8>
 8001bb2:	e014      	b.n	8001bde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fb2c 	bl	8001210 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fb28 	bl	8001210 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	@ 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e262      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bce:	4b88      	ldr	r3, [pc, #544]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2d0>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d060      	beq.n	8001cac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_OscConfig+0x310>
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d119      	bne.n	8001c2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d116      	bne.n	8001c2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfc:	4b7c      	ldr	r3, [pc, #496]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_OscConfig+0x328>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e23f      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b76      	ldr	r3, [pc, #472]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	061b      	lsls	r3, r3, #24
 8001c22:	4973      	ldr	r1, [pc, #460]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c28:	e040      	b.n	8001cac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d023      	beq.n	8001c7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c32:	4b6f      	ldr	r3, [pc, #444]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a6e      	ldr	r2, [pc, #440]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fae7 	bl	8001210 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c46:	f7ff fae3 	bl	8001210 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e21d      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c58:	4b65      	ldr	r3, [pc, #404]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	4b62      	ldr	r3, [pc, #392]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	061b      	lsls	r3, r3, #24
 8001c72:	495f      	ldr	r1, [pc, #380]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
 8001c78:	e018      	b.n	8001cac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff fac3 	bl	8001210 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fabf 	bl	8001210 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e1f9      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca0:	4b53      	ldr	r3, [pc, #332]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d03c      	beq.n	8001d32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc6:	4a4a      	ldr	r2, [pc, #296]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fa9e 	bl	8001210 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fa9a 	bl	8001210 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1d4      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cea:	4b41      	ldr	r3, [pc, #260]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ef      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x3ec>
 8001cf8:	e01b      	b.n	8001d32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d00:	4a3b      	ldr	r2, [pc, #236]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fa81 	bl	8001210 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d12:	f7ff fa7d 	bl	8001210 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e1b7      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d24:	4b32      	ldr	r3, [pc, #200]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1ef      	bne.n	8001d12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 80a6 	beq.w	8001e8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d44:	4b2a      	ldr	r3, [pc, #168]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10d      	bne.n	8001d6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	4a26      	ldr	r2, [pc, #152]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5c:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6c:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <HAL_RCC_OscConfig+0x508>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d118      	bne.n	8001daa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d78:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <HAL_RCC_OscConfig+0x508>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001df4 <HAL_RCC_OscConfig+0x508>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d84:	f7ff fa44 	bl	8001210 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8c:	f7ff fa40 	bl	8001210 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e17a      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_RCC_OscConfig+0x508>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x4d8>
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db8:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dc2:	e029      	b.n	8001e18 <HAL_RCC_OscConfig+0x52c>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d115      	bne.n	8001df8 <HAL_RCC_OscConfig+0x50c>
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd2:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de2:	4a03      	ldr	r2, [pc, #12]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dec:	e014      	b.n	8001e18 <HAL_RCC_OscConfig+0x52c>
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40007000 	.word	0x40007000
 8001df8:	4b9c      	ldr	r3, [pc, #624]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfe:	4a9b      	ldr	r2, [pc, #620]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e08:	4b98      	ldr	r3, [pc, #608]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0e:	4a97      	ldr	r2, [pc, #604]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e10:	f023 0304 	bic.w	r3, r3, #4
 8001e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d016      	beq.n	8001e4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff f9f6 	bl	8001210 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7ff f9f2 	bl	8001210 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e12a      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ed      	beq.n	8001e28 <HAL_RCC_OscConfig+0x53c>
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7ff f9df 	bl	8001210 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7ff f9db 	bl	8001210 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e113      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e6c:	4b7f      	ldr	r3, [pc, #508]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ed      	bne.n	8001e56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e80:	4b7a      	ldr	r3, [pc, #488]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e84:	4a79      	ldr	r2, [pc, #484]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80fe 	beq.w	8002092 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	f040 80d0 	bne.w	8002040 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ea0:	4b72      	ldr	r3, [pc, #456]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d130      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d127      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d11f      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ee0:	2a07      	cmp	r2, #7
 8001ee2:	bf14      	ite	ne
 8001ee4:	2201      	movne	r2, #1
 8001ee6:	2200      	moveq	r2, #0
 8001ee8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d113      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef8:	085b      	lsrs	r3, r3, #1
 8001efa:	3b01      	subs	r3, #1
 8001efc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d109      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d06e      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	2b0c      	cmp	r3, #12
 8001f1a:	d069      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f1c:	4b53      	ldr	r3, [pc, #332]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d105      	bne.n	8001f34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f28:	4b50      	ldr	r3, [pc, #320]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0ad      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f38:	4b4c      	ldr	r3, [pc, #304]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f44:	f7ff f964 	bl	8001210 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff f960 	bl	8001210 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e09a      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5e:	4b43      	ldr	r3, [pc, #268]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6a:	4b40      	ldr	r3, [pc, #256]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	4b40      	ldr	r3, [pc, #256]	@ (8002070 <HAL_RCC_OscConfig+0x784>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f7a:	3a01      	subs	r2, #1
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f84:	0212      	lsls	r2, r2, #8
 8001f86:	4311      	orrs	r1, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f8c:	0852      	lsrs	r2, r2, #1
 8001f8e:	3a01      	subs	r2, #1
 8001f90:	0552      	lsls	r2, r2, #21
 8001f92:	4311      	orrs	r1, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f98:	0852      	lsrs	r2, r2, #1
 8001f9a:	3a01      	subs	r2, #1
 8001f9c:	0652      	lsls	r2, r2, #25
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fa4:	0912      	lsrs	r2, r2, #4
 8001fa6:	0452      	lsls	r2, r2, #17
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	4930      	ldr	r1, [pc, #192]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fc8:	f7ff f922 	bl	8001210 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff f91e 	bl	8001210 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e058      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe2:	4b22      	ldr	r3, [pc, #136]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fee:	e050      	b.n	8002092 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e04f      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d148      	bne.n	8002092 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002000:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8002006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800200a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800200c:	4b17      	ldr	r3, [pc, #92]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a16      	ldr	r2, [pc, #88]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8002012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002016:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002018:	f7ff f8fa 	bl	8001210 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff f8f6 	bl	8001210 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e030      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002032:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x734>
 800203e:	e028      	b.n	8002092 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d023      	beq.n	800208e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a08      	ldr	r2, [pc, #32]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 800204c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7ff f8dd 	bl	8001210 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002058:	e00c      	b.n	8002074 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7ff f8d9 	bl	8001210 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d905      	bls.n	8002074 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e013      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
 800206c:	40021000 	.word	0x40021000
 8002070:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_OscConfig+0x7b0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ec      	bne.n	800205a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_RCC_OscConfig+0x7b0>)
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	4905      	ldr	r1, [pc, #20]	@ (800209c <HAL_RCC_OscConfig+0x7b0>)
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_RCC_OscConfig+0x7b4>)
 8002088:	4013      	ands	r3, r2
 800208a:	60cb      	str	r3, [r1, #12]
 800208c:	e001      	b.n	8002092 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	feeefffc 	.word	0xfeeefffc

080020a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0e7      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b8:	4b75      	ldr	r3, [pc, #468]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d910      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b72      	ldr	r3, [pc, #456]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0207 	bic.w	r2, r3, #7
 80020ce:	4970      	ldr	r1, [pc, #448]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0cf      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d010      	beq.n	8002116 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	4b66      	ldr	r3, [pc, #408]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002100:	429a      	cmp	r2, r3
 8002102:	d908      	bls.n	8002116 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	4b63      	ldr	r3, [pc, #396]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4960      	ldr	r1, [pc, #384]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d04c      	beq.n	80021bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	4b5a      	ldr	r3, [pc, #360]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d121      	bne.n	800217a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0a6      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002142:	4b54      	ldr	r3, [pc, #336]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d115      	bne.n	800217a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e09a      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800215a:	4b4e      	ldr	r3, [pc, #312]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e08e      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216a:	4b4a      	ldr	r3, [pc, #296]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e086      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800217a:	4b46      	ldr	r3, [pc, #280]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f023 0203 	bic.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4943      	ldr	r1, [pc, #268]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800218c:	f7ff f840 	bl	8001210 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	e00a      	b.n	80021aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002194:	f7ff f83c 	bl	8001210 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e06e      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 020c 	and.w	r2, r3, #12
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1eb      	bne.n	8002194 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d010      	beq.n	80021ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d208      	bcs.n	80021ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	492b      	ldr	r1, [pc, #172]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ea:	4b29      	ldr	r3, [pc, #164]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d210      	bcs.n	800221a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f8:	4b25      	ldr	r3, [pc, #148]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 0207 	bic.w	r2, r3, #7
 8002200:	4923      	ldr	r1, [pc, #140]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002208:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e036      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002226:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	4918      	ldr	r1, [pc, #96]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002244:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4910      	ldr	r1, [pc, #64]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002254:	4313      	orrs	r3, r2
 8002256:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002258:	f000 f824 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	490b      	ldr	r1, [pc, #44]	@ (8002298 <HAL_RCC_ClockConfig+0x1f4>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	4a09      	ldr	r2, [pc, #36]	@ (800229c <HAL_RCC_ClockConfig+0x1f8>)
 8002276:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002278:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <HAL_RCC_ClockConfig+0x1fc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe ff77 	bl	8001170 <HAL_InitTick>
 8002282:	4603      	mov	r3, r0
 8002284:	72fb      	strb	r3, [r7, #11]

  return status;
 8002286:	7afb      	ldrb	r3, [r7, #11]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40022000 	.word	0x40022000
 8002294:	40021000 	.word	0x40021000
 8002298:	080066a0 	.word	0x080066a0
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000004 	.word	0x20000004

080022a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b2:	4b3e      	ldr	r3, [pc, #248]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022bc:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x34>
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d121      	bne.n	8002316 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d11e      	bne.n	8002316 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022d8:	4b34      	ldr	r3, [pc, #208]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022e4:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e005      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022f4:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002300:	4a2b      	ldr	r2, [pc, #172]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002308:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002314:	e00a      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d102      	bne.n	8002322 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800231c:	4b25      	ldr	r3, [pc, #148]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	e004      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d101      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002328:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800232a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d134      	bne.n	800239c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002332:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0xa6>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d003      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0xac>
 8002348:	e005      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800234a:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800234c:	617b      	str	r3, [r7, #20]
      break;
 800234e:	e005      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002350:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002352:	617b      	str	r3, [r7, #20]
      break;
 8002354:	e002      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	617b      	str	r3, [r7, #20]
      break;
 800235a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	3301      	adds	r3, #1
 8002368:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	fb03 f202 	mul.w	r2, r3, r2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002382:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	0e5b      	lsrs	r3, r3, #25
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	3301      	adds	r3, #1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800239c:	69bb      	ldr	r3, [r7, #24]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	@ 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	080066b8 	.word	0x080066b8
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	007a1200 	.word	0x007a1200

080023bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023d8:	f7ff fff0 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4904      	ldr	r1, [pc, #16]	@ (80023fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	080066b0 	.word	0x080066b0

08002400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002404:	f7ff ffda 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	0adb      	lsrs	r3, r3, #11
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4904      	ldr	r1, [pc, #16]	@ (8002428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	080066b0 	.word	0x080066b0

0800242c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002438:	4b2a      	ldr	r3, [pc, #168]	@ (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002444:	f7ff f9ee 	bl	8001824 <HAL_PWREx_GetVoltageRange>
 8002448:	6178      	str	r0, [r7, #20]
 800244a:	e014      	b.n	8002476 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	4b25      	ldr	r3, [pc, #148]	@ (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002450:	4a24      	ldr	r2, [pc, #144]	@ (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002456:	6593      	str	r3, [r2, #88]	@ 0x58
 8002458:	4b22      	ldr	r3, [pc, #136]	@ (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002464:	f7ff f9de 	bl	8001824 <HAL_PWREx_GetVoltageRange>
 8002468:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	4a1d      	ldr	r2, [pc, #116]	@ (80024e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002474:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800247c:	d10b      	bne.n	8002496 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b80      	cmp	r3, #128	@ 0x80
 8002482:	d919      	bls.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2ba0      	cmp	r3, #160	@ 0xa0
 8002488:	d902      	bls.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800248a:	2302      	movs	r3, #2
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	e013      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002490:	2301      	movs	r3, #1
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	e010      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b80      	cmp	r3, #128	@ 0x80
 800249a:	d902      	bls.n	80024a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800249c:	2303      	movs	r3, #3
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	e00a      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b80      	cmp	r3, #128	@ 0x80
 80024a6:	d102      	bne.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024a8:	2302      	movs	r3, #2
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e004      	b.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b70      	cmp	r3, #112	@ 0x70
 80024b2:	d101      	bne.n	80024b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024b4:	2301      	movs	r3, #1
 80024b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 0207 	bic.w	r2, r3, #7
 80024c0:	4909      	ldr	r1, [pc, #36]	@ (80024e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024c8:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d001      	beq.n	80024da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40022000 	.word	0x40022000

080024ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024f4:	2300      	movs	r3, #0
 80024f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f8:	2300      	movs	r3, #0
 80024fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002504:	2b00      	cmp	r3, #0
 8002506:	d041      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800250c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002510:	d02a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002512:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002516:	d824      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002518:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800251c:	d008      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800251e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002522:	d81e      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002528:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800252c:	d010      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800252e:	e018      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002530:	4b86      	ldr	r3, [pc, #536]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a85      	ldr	r2, [pc, #532]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800253c:	e015      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f000 facb 	bl	8002ae0 <RCCEx_PLLSAI1_Config>
 800254a:	4603      	mov	r3, r0
 800254c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800254e:	e00c      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3320      	adds	r3, #32
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fbb6 	bl	8002cc8 <RCCEx_PLLSAI2_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002560:	e003      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	74fb      	strb	r3, [r7, #19]
      break;
 8002566:	e000      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002570:	4b76      	ldr	r3, [pc, #472]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002576:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800257e:	4973      	ldr	r1, [pc, #460]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002586:	e001      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d041      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800259c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025a0:	d02a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80025a6:	d824      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025ac:	d008      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025b2:	d81e      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025bc:	d010      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025be:	e018      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025c0:	4b62      	ldr	r3, [pc, #392]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a61      	ldr	r2, [pc, #388]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025cc:	e015      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fa83 	bl	8002ae0 <RCCEx_PLLSAI1_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025de:	e00c      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3320      	adds	r3, #32
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fb6e 	bl	8002cc8 <RCCEx_PLLSAI2_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025f0:	e003      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	74fb      	strb	r3, [r7, #19]
      break;
 80025f6:	e000      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025fa:	7cfb      	ldrb	r3, [r7, #19]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10b      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002600:	4b52      	ldr	r3, [pc, #328]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002606:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800260e:	494f      	ldr	r1, [pc, #316]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002616:	e001      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80a0 	beq.w	800276a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800262e:	4b47      	ldr	r3, [pc, #284]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00d      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002644:	4b41      	ldr	r3, [pc, #260]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	4a40      	ldr	r2, [pc, #256]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002650:	4b3e      	ldr	r3, [pc, #248]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265c:	2301      	movs	r3, #1
 800265e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002660:	4b3b      	ldr	r3, [pc, #236]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a3a      	ldr	r2, [pc, #232]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800266a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800266c:	f7fe fdd0 	bl	8001210 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002672:	e009      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002674:	f7fe fdcc 	bl	8001210 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d902      	bls.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	74fb      	strb	r3, [r7, #19]
        break;
 8002686:	e005      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002688:	4b31      	ldr	r3, [pc, #196]	@ (8002750 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ef      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d15c      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800269a:	4b2c      	ldr	r3, [pc, #176]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01f      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d019      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026b8:	4b24      	ldr	r3, [pc, #144]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026c4:	4b21      	ldr	r3, [pc, #132]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ca:	4a20      	ldr	r2, [pc, #128]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026d4:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026da:	4a1c      	ldr	r2, [pc, #112]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026e4:	4a19      	ldr	r2, [pc, #100]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f6:	f7fe fd8b 	bl	8001210 <HAL_GetTick>
 80026fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fc:	e00b      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe fd87 	bl	8001210 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d902      	bls.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	74fb      	strb	r3, [r7, #19]
            break;
 8002714:	e006      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ec      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002730:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800273a:	4904      	ldr	r1, [pc, #16]	@ (800274c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002742:	e009      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	74bb      	strb	r3, [r7, #18]
 8002748:	e006      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002758:	7c7b      	ldrb	r3, [r7, #17]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b9e      	ldr	r3, [pc, #632]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002762:	4a9d      	ldr	r2, [pc, #628]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002768:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002776:	4b98      	ldr	r3, [pc, #608]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277c:	f023 0203 	bic.w	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002784:	4994      	ldr	r1, [pc, #592]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002798:	4b8f      	ldr	r3, [pc, #572]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	f023 020c 	bic.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a6:	498c      	ldr	r1, [pc, #560]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ba:	4b87      	ldr	r3, [pc, #540]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	4983      	ldr	r1, [pc, #524]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027dc:	4b7e      	ldr	r3, [pc, #504]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	497b      	ldr	r1, [pc, #492]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027fe:	4b76      	ldr	r3, [pc, #472]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002804:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800280c:	4972      	ldr	r1, [pc, #456]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002820:	4b6d      	ldr	r3, [pc, #436]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002826:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282e:	496a      	ldr	r1, [pc, #424]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002842:	4b65      	ldr	r3, [pc, #404]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002848:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002850:	4961      	ldr	r1, [pc, #388]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002864:	4b5c      	ldr	r3, [pc, #368]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002872:	4959      	ldr	r1, [pc, #356]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002886:	4b54      	ldr	r3, [pc, #336]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002894:	4950      	ldr	r1, [pc, #320]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028a8:	4b4b      	ldr	r3, [pc, #300]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b6:	4948      	ldr	r1, [pc, #288]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ca:	4b43      	ldr	r3, [pc, #268]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	493f      	ldr	r1, [pc, #252]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d028      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ec:	4b3a      	ldr	r3, [pc, #232]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028fa:	4937      	ldr	r1, [pc, #220]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800290a:	d106      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800290c:	4b32      	ldr	r3, [pc, #200]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a31      	ldr	r2, [pc, #196]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002916:	60d3      	str	r3, [r2, #12]
 8002918:	e011      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800291e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002922:	d10c      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f8d8 	bl	8002ae0 <RCCEx_PLLSAI1_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d028      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800294a:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002950:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002958:	491f      	ldr	r1, [pc, #124]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002968:	d106      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800296a:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	4a1a      	ldr	r2, [pc, #104]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002974:	60d3      	str	r3, [r2, #12]
 8002976:	e011      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002980:	d10c      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3304      	adds	r3, #4
 8002986:	2101      	movs	r1, #1
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f8a9 	bl	8002ae0 <RCCEx_PLLSAI1_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d02b      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b6:	4908      	ldr	r1, [pc, #32]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029c6:	d109      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c8:	4b03      	ldr	r3, [pc, #12]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a02      	ldr	r2, [pc, #8]	@ (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029d2:	60d3      	str	r3, [r2, #12]
 80029d4:	e014      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2101      	movs	r1, #1
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f877 	bl	8002ae0 <RCCEx_PLLSAI1_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d02f      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a1a:	4928      	ldr	r1, [pc, #160]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a2a:	d10d      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	2102      	movs	r1, #2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f854 	bl	8002ae0 <RCCEx_PLLSAI1_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d014      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	74bb      	strb	r3, [r7, #18]
 8002a46:	e011      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3320      	adds	r3, #32
 8002a56:	2102      	movs	r1, #2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f935 	bl	8002cc8 <RCCEx_PLLSAI2_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a78:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a86:	490d      	ldr	r1, [pc, #52]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a9a:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aaa:	4904      	ldr	r1, [pc, #16]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ab2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002aca:	f043 0304 	orr.w	r3, r3, #4
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000

08002ae0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aee:	4b75      	ldr	r3, [pc, #468]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d018      	beq.n	8002b2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002afa:	4b72      	ldr	r3, [pc, #456]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0203 	and.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d10d      	bne.n	8002b26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b12:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
       ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d047      	beq.n	8002bb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
 8002b2a:	e044      	b.n	8002bb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d018      	beq.n	8002b66 <RCCEx_PLLSAI1_Config+0x86>
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d825      	bhi.n	8002b84 <RCCEx_PLLSAI1_Config+0xa4>
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d002      	beq.n	8002b42 <RCCEx_PLLSAI1_Config+0x62>
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d009      	beq.n	8002b54 <RCCEx_PLLSAI1_Config+0x74>
 8002b40:	e020      	b.n	8002b84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b42:	4b60      	ldr	r3, [pc, #384]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11d      	bne.n	8002b8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b52:	e01a      	b.n	8002b8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b54:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d116      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b64:	e013      	b.n	8002b8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b66:	4b57      	ldr	r3, [pc, #348]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10f      	bne.n	8002b92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b72:	4b54      	ldr	r3, [pc, #336]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b82:	e006      	b.n	8002b92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
      break;
 8002b88:	e004      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e002      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b8e:	bf00      	nop
 8002b90:	e000      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b92:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10d      	bne.n	8002bb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	4944      	ldr	r1, [pc, #272]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d17d      	bne.n	8002cb8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bbc:	4b41      	ldr	r3, [pc, #260]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a40      	ldr	r2, [pc, #256]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fb22 	bl	8001210 <HAL_GetTick>
 8002bcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bce:	e009      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bd0:	f7fe fb1e 	bl	8001210 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d902      	bls.n	8002be4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	73fb      	strb	r3, [r7, #15]
        break;
 8002be2:	e005      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002be4:	4b37      	ldr	r3, [pc, #220]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ef      	bne.n	8002bd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d160      	bne.n	8002cb8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d111      	bne.n	8002c20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bfc:	4b31      	ldr	r3, [pc, #196]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6892      	ldr	r2, [r2, #8]
 8002c0c:	0211      	lsls	r1, r2, #8
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68d2      	ldr	r2, [r2, #12]
 8002c12:	0912      	lsrs	r2, r2, #4
 8002c14:	0452      	lsls	r2, r2, #17
 8002c16:	430a      	orrs	r2, r1
 8002c18:	492a      	ldr	r1, [pc, #168]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	610b      	str	r3, [r1, #16]
 8002c1e:	e027      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d112      	bne.n	8002c4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c26:	4b27      	ldr	r3, [pc, #156]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6892      	ldr	r2, [r2, #8]
 8002c36:	0211      	lsls	r1, r2, #8
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6912      	ldr	r2, [r2, #16]
 8002c3c:	0852      	lsrs	r2, r2, #1
 8002c3e:	3a01      	subs	r2, #1
 8002c40:	0552      	lsls	r2, r2, #21
 8002c42:	430a      	orrs	r2, r1
 8002c44:	491f      	ldr	r1, [pc, #124]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	610b      	str	r3, [r1, #16]
 8002c4a:	e011      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6892      	ldr	r2, [r2, #8]
 8002c5c:	0211      	lsls	r1, r2, #8
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6952      	ldr	r2, [r2, #20]
 8002c62:	0852      	lsrs	r2, r2, #1
 8002c64:	3a01      	subs	r2, #1
 8002c66:	0652      	lsls	r2, r2, #25
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	4916      	ldr	r1, [pc, #88]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c70:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a13      	ldr	r2, [pc, #76]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fac8 	bl	8001210 <HAL_GetTick>
 8002c80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c82:	e009      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c84:	f7fe fac4 	bl	8001210 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	73fb      	strb	r3, [r7, #15]
          break;
 8002c96:	e005      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c98:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	4904      	ldr	r1, [pc, #16]	@ (8002cc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d018      	beq.n	8002d14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ce2:	4b67      	ldr	r3, [pc, #412]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0203 	and.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d10d      	bne.n	8002d0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cfa:	4b61      	ldr	r3, [pc, #388]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
       ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d047      	beq.n	8002d9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e044      	b.n	8002d9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d018      	beq.n	8002d4e <RCCEx_PLLSAI2_Config+0x86>
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d825      	bhi.n	8002d6c <RCCEx_PLLSAI2_Config+0xa4>
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d002      	beq.n	8002d2a <RCCEx_PLLSAI2_Config+0x62>
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d009      	beq.n	8002d3c <RCCEx_PLLSAI2_Config+0x74>
 8002d28:	e020      	b.n	8002d6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d2a:	4b55      	ldr	r3, [pc, #340]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11d      	bne.n	8002d72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3a:	e01a      	b.n	8002d72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d3c:	4b50      	ldr	r3, [pc, #320]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d116      	bne.n	8002d76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4c:	e013      	b.n	8002d76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d5a:	4b49      	ldr	r3, [pc, #292]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d6a:	e006      	b.n	8002d7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d70:	e004      	b.n	8002d7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d72:	bf00      	nop
 8002d74:	e002      	b.n	8002d7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10d      	bne.n	8002d9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d82:	4b3f      	ldr	r3, [pc, #252]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6819      	ldr	r1, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	430b      	orrs	r3, r1
 8002d98:	4939      	ldr	r1, [pc, #228]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d167      	bne.n	8002e74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002da4:	4b36      	ldr	r3, [pc, #216]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a35      	ldr	r2, [pc, #212]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7fe fa2e 	bl	8001210 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002db6:	e009      	b.n	8002dcc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002db8:	f7fe fa2a 	bl	8001210 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dca:	e005      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ef      	bne.n	8002db8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d14a      	bne.n	8002e74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d111      	bne.n	8002e08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002de4:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	0211      	lsls	r1, r2, #8
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68d2      	ldr	r2, [r2, #12]
 8002dfa:	0912      	lsrs	r2, r2, #4
 8002dfc:	0452      	lsls	r2, r2, #17
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	491f      	ldr	r1, [pc, #124]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	614b      	str	r3, [r1, #20]
 8002e06:	e011      	b.n	8002e2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e08:	4b1d      	ldr	r3, [pc, #116]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6892      	ldr	r2, [r2, #8]
 8002e18:	0211      	lsls	r1, r2, #8
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6912      	ldr	r2, [r2, #16]
 8002e1e:	0852      	lsrs	r2, r2, #1
 8002e20:	3a01      	subs	r2, #1
 8002e22:	0652      	lsls	r2, r2, #25
 8002e24:	430a      	orrs	r2, r1
 8002e26:	4916      	ldr	r1, [pc, #88]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e2c:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a13      	ldr	r2, [pc, #76]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e38:	f7fe f9ea 	bl	8001210 <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e3e:	e009      	b.n	8002e54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e40:	f7fe f9e6 	bl	8001210 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d902      	bls.n	8002e54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	73fb      	strb	r3, [r7, #15]
          break;
 8002e52:	e005      	b.n	8002e60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e54:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ef      	beq.n	8002e40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e66:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	4904      	ldr	r1, [pc, #16]	@ (8002e80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000

08002e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e049      	b.n	8002f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd ff3a 	bl	8000d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f001 fa2e 	bl	8004324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d001      	beq.n	8002f4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e047      	b.n	8002fdc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a23      	ldr	r2, [pc, #140]	@ (8002fe8 <HAL_TIM_Base_Start+0xb4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01d      	beq.n	8002f9a <HAL_TIM_Base_Start+0x66>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f66:	d018      	beq.n	8002f9a <HAL_TIM_Base_Start+0x66>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fec <HAL_TIM_Base_Start+0xb8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d013      	beq.n	8002f9a <HAL_TIM_Base_Start+0x66>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff0 <HAL_TIM_Base_Start+0xbc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00e      	beq.n	8002f9a <HAL_TIM_Base_Start+0x66>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff4 <HAL_TIM_Base_Start+0xc0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d009      	beq.n	8002f9a <HAL_TIM_Base_Start+0x66>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff8 <HAL_TIM_Base_Start+0xc4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d004      	beq.n	8002f9a <HAL_TIM_Base_Start+0x66>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a19      	ldr	r2, [pc, #100]	@ (8002ffc <HAL_TIM_Base_Start+0xc8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d115      	bne.n	8002fc6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	4b17      	ldr	r3, [pc, #92]	@ (8003000 <HAL_TIM_Base_Start+0xcc>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b06      	cmp	r3, #6
 8002faa:	d015      	beq.n	8002fd8 <HAL_TIM_Base_Start+0xa4>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb2:	d011      	beq.n	8002fd8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc4:	e008      	b.n	8002fd8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e000      	b.n	8002fda <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	40013400 	.word	0x40013400
 8002ffc:	40014000 	.word	0x40014000
 8003000:	00010007 	.word	0x00010007

08003004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d001      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e04f      	b.n	80030bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a23      	ldr	r2, [pc, #140]	@ (80030c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01d      	beq.n	800307a <HAL_TIM_Base_Start_IT+0x76>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003046:	d018      	beq.n	800307a <HAL_TIM_Base_Start_IT+0x76>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1f      	ldr	r2, [pc, #124]	@ (80030cc <HAL_TIM_Base_Start_IT+0xc8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d013      	beq.n	800307a <HAL_TIM_Base_Start_IT+0x76>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00e      	beq.n	800307a <HAL_TIM_Base_Start_IT+0x76>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1c      	ldr	r2, [pc, #112]	@ (80030d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d009      	beq.n	800307a <HAL_TIM_Base_Start_IT+0x76>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1b      	ldr	r2, [pc, #108]	@ (80030d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_TIM_Base_Start_IT+0x76>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_TIM_Base_Start_IT+0xd8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d115      	bne.n	80030a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	4b17      	ldr	r3, [pc, #92]	@ (80030e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003082:	4013      	ands	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b06      	cmp	r3, #6
 800308a:	d015      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0xb4>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003092:	d011      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a4:	e008      	b.n	80030b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e000      	b.n	80030ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40000c00 	.word	0x40000c00
 80030d8:	40013400 	.word	0x40013400
 80030dc:	40014000 	.word	0x40014000
 80030e0:	00010007 	.word	0x00010007

080030e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e049      	b.n	800318a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f841 	bl	8003192 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3304      	adds	r3, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f001 f8fe 	bl	8004324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_TIM_OC_Start_IT+0x28>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e03c      	b.n	800324a <HAL_TIM_OC_Start_IT+0xa2>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d109      	bne.n	80031ea <HAL_TIM_OC_Start_IT+0x42>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e02f      	b.n	800324a <HAL_TIM_OC_Start_IT+0xa2>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d109      	bne.n	8003204 <HAL_TIM_OC_Start_IT+0x5c>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e022      	b.n	800324a <HAL_TIM_OC_Start_IT+0xa2>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d109      	bne.n	800321e <HAL_TIM_OC_Start_IT+0x76>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	e015      	b.n	800324a <HAL_TIM_OC_Start_IT+0xa2>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b10      	cmp	r3, #16
 8003222:	d109      	bne.n	8003238 <HAL_TIM_OC_Start_IT+0x90>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e008      	b.n	800324a <HAL_TIM_OC_Start_IT+0xa2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0e7      	b.n	8003422 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d104      	bne.n	8003262 <HAL_TIM_OC_Start_IT+0xba>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003260:	e023      	b.n	80032aa <HAL_TIM_OC_Start_IT+0x102>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d104      	bne.n	8003272 <HAL_TIM_OC_Start_IT+0xca>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003270:	e01b      	b.n	80032aa <HAL_TIM_OC_Start_IT+0x102>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d104      	bne.n	8003282 <HAL_TIM_OC_Start_IT+0xda>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003280:	e013      	b.n	80032aa <HAL_TIM_OC_Start_IT+0x102>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d104      	bne.n	8003292 <HAL_TIM_OC_Start_IT+0xea>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003290:	e00b      	b.n	80032aa <HAL_TIM_OC_Start_IT+0x102>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b10      	cmp	r3, #16
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_OC_Start_IT+0xfa>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032a0:	e003      	b.n	80032aa <HAL_TIM_OC_Start_IT+0x102>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b0c      	cmp	r3, #12
 80032ae:	d841      	bhi.n	8003334 <HAL_TIM_OC_Start_IT+0x18c>
 80032b0:	a201      	add	r2, pc, #4	@ (adr r2, 80032b8 <HAL_TIM_OC_Start_IT+0x110>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032ed 	.word	0x080032ed
 80032bc:	08003335 	.word	0x08003335
 80032c0:	08003335 	.word	0x08003335
 80032c4:	08003335 	.word	0x08003335
 80032c8:	080032ff 	.word	0x080032ff
 80032cc:	08003335 	.word	0x08003335
 80032d0:	08003335 	.word	0x08003335
 80032d4:	08003335 	.word	0x08003335
 80032d8:	08003311 	.word	0x08003311
 80032dc:	08003335 	.word	0x08003335
 80032e0:	08003335 	.word	0x08003335
 80032e4:	08003335 	.word	0x08003335
 80032e8:	08003323 	.word	0x08003323
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0202 	orr.w	r2, r2, #2
 80032fa:	60da      	str	r2, [r3, #12]
      break;
 80032fc:	e01d      	b.n	800333a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0204 	orr.w	r2, r2, #4
 800330c:	60da      	str	r2, [r3, #12]
      break;
 800330e:	e014      	b.n	800333a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0208 	orr.w	r2, r2, #8
 800331e:	60da      	str	r2, [r3, #12]
      break;
 8003320:	e00b      	b.n	800333a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0210 	orr.w	r2, r2, #16
 8003330:	60da      	str	r2, [r3, #12]
      break;
 8003332:	e002      	b.n	800333a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      break;
 8003338:	bf00      	nop
  }

  if (status == HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d16f      	bne.n	8003420 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2201      	movs	r2, #1
 8003346:	6839      	ldr	r1, [r7, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f001 fbf5 	bl	8004b38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a36      	ldr	r2, [pc, #216]	@ (800342c <HAL_TIM_OC_Start_IT+0x284>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d013      	beq.n	8003380 <HAL_TIM_OC_Start_IT+0x1d8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a34      	ldr	r2, [pc, #208]	@ (8003430 <HAL_TIM_OC_Start_IT+0x288>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00e      	beq.n	8003380 <HAL_TIM_OC_Start_IT+0x1d8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a33      	ldr	r2, [pc, #204]	@ (8003434 <HAL_TIM_OC_Start_IT+0x28c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d009      	beq.n	8003380 <HAL_TIM_OC_Start_IT+0x1d8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a31      	ldr	r2, [pc, #196]	@ (8003438 <HAL_TIM_OC_Start_IT+0x290>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d004      	beq.n	8003380 <HAL_TIM_OC_Start_IT+0x1d8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a30      	ldr	r2, [pc, #192]	@ (800343c <HAL_TIM_OC_Start_IT+0x294>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d101      	bne.n	8003384 <HAL_TIM_OC_Start_IT+0x1dc>
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <HAL_TIM_OC_Start_IT+0x1de>
 8003384:	2300      	movs	r3, #0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003398:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a23      	ldr	r2, [pc, #140]	@ (800342c <HAL_TIM_OC_Start_IT+0x284>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d01d      	beq.n	80033e0 <HAL_TIM_OC_Start_IT+0x238>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ac:	d018      	beq.n	80033e0 <HAL_TIM_OC_Start_IT+0x238>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a23      	ldr	r2, [pc, #140]	@ (8003440 <HAL_TIM_OC_Start_IT+0x298>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_TIM_OC_Start_IT+0x238>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a21      	ldr	r2, [pc, #132]	@ (8003444 <HAL_TIM_OC_Start_IT+0x29c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00e      	beq.n	80033e0 <HAL_TIM_OC_Start_IT+0x238>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a20      	ldr	r2, [pc, #128]	@ (8003448 <HAL_TIM_OC_Start_IT+0x2a0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_TIM_OC_Start_IT+0x238>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a17      	ldr	r2, [pc, #92]	@ (8003430 <HAL_TIM_OC_Start_IT+0x288>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_TIM_OC_Start_IT+0x238>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a16      	ldr	r2, [pc, #88]	@ (8003434 <HAL_TIM_OC_Start_IT+0x28c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d115      	bne.n	800340c <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	4b19      	ldr	r3, [pc, #100]	@ (800344c <HAL_TIM_OC_Start_IT+0x2a4>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b06      	cmp	r3, #6
 80033f0:	d015      	beq.n	800341e <HAL_TIM_OC_Start_IT+0x276>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f8:	d011      	beq.n	800341e <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0201 	orr.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340a:	e008      	b.n	800341e <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e000      	b.n	8003420 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40012c00 	.word	0x40012c00
 8003430:	40013400 	.word	0x40013400
 8003434:	40014000 	.word	0x40014000
 8003438:	40014400 	.word	0x40014400
 800343c:	40014800 	.word	0x40014800
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800
 8003448:	40000c00 	.word	0x40000c00
 800344c:	00010007 	.word	0x00010007

08003450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e049      	b.n	80034f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f841 	bl	80034fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f000 ff48 	bl	8004324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HAL_TIM_PWM_Start+0x24>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e03c      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b04      	cmp	r3, #4
 800353c:	d109      	bne.n	8003552 <HAL_TIM_PWM_Start+0x3e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b01      	cmp	r3, #1
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e02f      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d109      	bne.n	800356c <HAL_TIM_PWM_Start+0x58>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e022      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d109      	bne.n	8003586 <HAL_TIM_PWM_Start+0x72>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	bf14      	ite	ne
 800357e:	2301      	movne	r3, #1
 8003580:	2300      	moveq	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	e015      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b10      	cmp	r3, #16
 800358a:	d109      	bne.n	80035a0 <HAL_TIM_PWM_Start+0x8c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e008      	b.n	80035b2 <HAL_TIM_PWM_Start+0x9e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e09c      	b.n	80036f4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <HAL_TIM_PWM_Start+0xb6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c8:	e023      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d104      	bne.n	80035da <HAL_TIM_PWM_Start+0xc6>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d8:	e01b      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d104      	bne.n	80035ea <HAL_TIM_PWM_Start+0xd6>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e8:	e013      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_PWM_Start+0xe6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035f8:	e00b      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d104      	bne.n	800360a <HAL_TIM_PWM_Start+0xf6>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003608:	e003      	b.n	8003612 <HAL_TIM_PWM_Start+0xfe>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2202      	movs	r2, #2
 800360e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2201      	movs	r2, #1
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f001 fa8c 	bl	8004b38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a35      	ldr	r2, [pc, #212]	@ (80036fc <HAL_TIM_PWM_Start+0x1e8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_TIM_PWM_Start+0x13e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a34      	ldr	r2, [pc, #208]	@ (8003700 <HAL_TIM_PWM_Start+0x1ec>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00e      	beq.n	8003652 <HAL_TIM_PWM_Start+0x13e>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a32      	ldr	r2, [pc, #200]	@ (8003704 <HAL_TIM_PWM_Start+0x1f0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d009      	beq.n	8003652 <HAL_TIM_PWM_Start+0x13e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a31      	ldr	r2, [pc, #196]	@ (8003708 <HAL_TIM_PWM_Start+0x1f4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_TIM_PWM_Start+0x13e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2f      	ldr	r2, [pc, #188]	@ (800370c <HAL_TIM_PWM_Start+0x1f8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d101      	bne.n	8003656 <HAL_TIM_PWM_Start+0x142>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <HAL_TIM_PWM_Start+0x144>
 8003656:	2300      	movs	r3, #0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d007      	beq.n	800366c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800366a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a22      	ldr	r2, [pc, #136]	@ (80036fc <HAL_TIM_PWM_Start+0x1e8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367e:	d018      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a22      	ldr	r2, [pc, #136]	@ (8003710 <HAL_TIM_PWM_Start+0x1fc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a21      	ldr	r2, [pc, #132]	@ (8003714 <HAL_TIM_PWM_Start+0x200>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1f      	ldr	r2, [pc, #124]	@ (8003718 <HAL_TIM_PWM_Start+0x204>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a17      	ldr	r2, [pc, #92]	@ (8003700 <HAL_TIM_PWM_Start+0x1ec>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x19e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a15      	ldr	r2, [pc, #84]	@ (8003704 <HAL_TIM_PWM_Start+0x1f0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d115      	bne.n	80036de <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	4b18      	ldr	r3, [pc, #96]	@ (800371c <HAL_TIM_PWM_Start+0x208>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d015      	beq.n	80036f0 <HAL_TIM_PWM_Start+0x1dc>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ca:	d011      	beq.n	80036f0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036dc:	e008      	b.n	80036f0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e000      	b.n	80036f2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40013400 	.word	0x40013400
 8003704:	40014000 	.word	0x40014000
 8003708:	40014400 	.word	0x40014400
 800370c:	40014800 	.word	0x40014800
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	00010007 	.word	0x00010007

08003720 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <HAL_TIM_IC_Start_IT+0x1e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e023      	b.n	8003786 <HAL_TIM_IC_Start_IT+0x66>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d104      	bne.n	800374e <HAL_TIM_IC_Start_IT+0x2e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800374a:	b2db      	uxtb	r3, r3
 800374c:	e01b      	b.n	8003786 <HAL_TIM_IC_Start_IT+0x66>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d104      	bne.n	800375e <HAL_TIM_IC_Start_IT+0x3e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e013      	b.n	8003786 <HAL_TIM_IC_Start_IT+0x66>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b0c      	cmp	r3, #12
 8003762:	d104      	bne.n	800376e <HAL_TIM_IC_Start_IT+0x4e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e00b      	b.n	8003786 <HAL_TIM_IC_Start_IT+0x66>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b10      	cmp	r3, #16
 8003772:	d104      	bne.n	800377e <HAL_TIM_IC_Start_IT+0x5e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800377a:	b2db      	uxtb	r3, r3
 800377c:	e003      	b.n	8003786 <HAL_TIM_IC_Start_IT+0x66>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003784:	b2db      	uxtb	r3, r3
 8003786:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d104      	bne.n	8003798 <HAL_TIM_IC_Start_IT+0x78>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e013      	b.n	80037c0 <HAL_TIM_IC_Start_IT+0xa0>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b04      	cmp	r3, #4
 800379c:	d104      	bne.n	80037a8 <HAL_TIM_IC_Start_IT+0x88>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e00b      	b.n	80037c0 <HAL_TIM_IC_Start_IT+0xa0>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d104      	bne.n	80037b8 <HAL_TIM_IC_Start_IT+0x98>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	e003      	b.n	80037c0 <HAL_TIM_IC_Start_IT+0xa0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037c2:	7bbb      	ldrb	r3, [r7, #14]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d102      	bne.n	80037ce <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037c8:	7b7b      	ldrb	r3, [r7, #13]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d001      	beq.n	80037d2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0dd      	b.n	800398e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_IC_Start_IT+0xc2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e0:	e023      	b.n	800382a <HAL_TIM_IC_Start_IT+0x10a>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_IC_Start_IT+0xd2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f0:	e01b      	b.n	800382a <HAL_TIM_IC_Start_IT+0x10a>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_IC_Start_IT+0xe2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003800:	e013      	b.n	800382a <HAL_TIM_IC_Start_IT+0x10a>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b0c      	cmp	r3, #12
 8003806:	d104      	bne.n	8003812 <HAL_TIM_IC_Start_IT+0xf2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003810:	e00b      	b.n	800382a <HAL_TIM_IC_Start_IT+0x10a>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b10      	cmp	r3, #16
 8003816:	d104      	bne.n	8003822 <HAL_TIM_IC_Start_IT+0x102>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003820:	e003      	b.n	800382a <HAL_TIM_IC_Start_IT+0x10a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <HAL_TIM_IC_Start_IT+0x11a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003838:	e013      	b.n	8003862 <HAL_TIM_IC_Start_IT+0x142>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d104      	bne.n	800384a <HAL_TIM_IC_Start_IT+0x12a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003848:	e00b      	b.n	8003862 <HAL_TIM_IC_Start_IT+0x142>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d104      	bne.n	800385a <HAL_TIM_IC_Start_IT+0x13a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003858:	e003      	b.n	8003862 <HAL_TIM_IC_Start_IT+0x142>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b0c      	cmp	r3, #12
 8003866:	d841      	bhi.n	80038ec <HAL_TIM_IC_Start_IT+0x1cc>
 8003868:	a201      	add	r2, pc, #4	@ (adr r2, 8003870 <HAL_TIM_IC_Start_IT+0x150>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	080038a5 	.word	0x080038a5
 8003874:	080038ed 	.word	0x080038ed
 8003878:	080038ed 	.word	0x080038ed
 800387c:	080038ed 	.word	0x080038ed
 8003880:	080038b7 	.word	0x080038b7
 8003884:	080038ed 	.word	0x080038ed
 8003888:	080038ed 	.word	0x080038ed
 800388c:	080038ed 	.word	0x080038ed
 8003890:	080038c9 	.word	0x080038c9
 8003894:	080038ed 	.word	0x080038ed
 8003898:	080038ed 	.word	0x080038ed
 800389c:	080038ed 	.word	0x080038ed
 80038a0:	080038db 	.word	0x080038db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0202 	orr.w	r2, r2, #2
 80038b2:	60da      	str	r2, [r3, #12]
      break;
 80038b4:	e01d      	b.n	80038f2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0204 	orr.w	r2, r2, #4
 80038c4:	60da      	str	r2, [r3, #12]
      break;
 80038c6:	e014      	b.n	80038f2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0208 	orr.w	r2, r2, #8
 80038d6:	60da      	str	r2, [r3, #12]
      break;
 80038d8:	e00b      	b.n	80038f2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0210 	orr.w	r2, r2, #16
 80038e8:	60da      	str	r2, [r3, #12]
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      break;
 80038f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d149      	bne.n	800398c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	6839      	ldr	r1, [r7, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f919 	bl	8004b38 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a23      	ldr	r2, [pc, #140]	@ (8003998 <HAL_TIM_IC_Start_IT+0x278>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d01d      	beq.n	800394c <HAL_TIM_IC_Start_IT+0x22c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003918:	d018      	beq.n	800394c <HAL_TIM_IC_Start_IT+0x22c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1f      	ldr	r2, [pc, #124]	@ (800399c <HAL_TIM_IC_Start_IT+0x27c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_TIM_IC_Start_IT+0x22c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1d      	ldr	r2, [pc, #116]	@ (80039a0 <HAL_TIM_IC_Start_IT+0x280>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00e      	beq.n	800394c <HAL_TIM_IC_Start_IT+0x22c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1c      	ldr	r2, [pc, #112]	@ (80039a4 <HAL_TIM_IC_Start_IT+0x284>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d009      	beq.n	800394c <HAL_TIM_IC_Start_IT+0x22c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1a      	ldr	r2, [pc, #104]	@ (80039a8 <HAL_TIM_IC_Start_IT+0x288>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_TIM_IC_Start_IT+0x22c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a19      	ldr	r2, [pc, #100]	@ (80039ac <HAL_TIM_IC_Start_IT+0x28c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d115      	bne.n	8003978 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	4b17      	ldr	r3, [pc, #92]	@ (80039b0 <HAL_TIM_IC_Start_IT+0x290>)
 8003954:	4013      	ands	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b06      	cmp	r3, #6
 800395c:	d015      	beq.n	800398a <HAL_TIM_IC_Start_IT+0x26a>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003964:	d011      	beq.n	800398a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003976:	e008      	b.n	800398a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e000      	b.n	800398c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800
 80039a4:	40000c00 	.word	0x40000c00
 80039a8:	40013400 	.word	0x40013400
 80039ac:	40014000 	.word	0x40014000
 80039b0:	00010007 	.word	0x00010007

080039b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e097      	b.n	8003af8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7fd f961 	bl	8000ca4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80039f8:	f023 0307 	bic.w	r3, r3, #7
 80039fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f000 fc8b 	bl	8004324 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a36:	f023 0303 	bic.w	r3, r3, #3
 8003a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	4313      	orrs	r3, r2
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003a54:	f023 030c 	bic.w	r3, r3, #12
 8003a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	4313      	orrs	r3, r2
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	011a      	lsls	r2, r3, #4
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	031b      	lsls	r3, r3, #12
 8003a84:	4313      	orrs	r3, r2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003a9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d110      	bne.n	8003b52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b36:	7b7b      	ldrb	r3, [r7, #13]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d001      	beq.n	8003b40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e069      	b.n	8003c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b50:	e031      	b.n	8003bb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d110      	bne.n	8003b7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b58:	7bbb      	ldrb	r3, [r7, #14]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d102      	bne.n	8003b64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b5e:	7b3b      	ldrb	r3, [r7, #12]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d001      	beq.n	8003b68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e055      	b.n	8003c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b78:	e01d      	b.n	8003bb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d108      	bne.n	8003b92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b80:	7bbb      	ldrb	r3, [r7, #14]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d105      	bne.n	8003b92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b86:	7b7b      	ldrb	r3, [r7, #13]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d102      	bne.n	8003b92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b8c:	7b3b      	ldrb	r3, [r7, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e03e      	b.n	8003c14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_TIM_Encoder_Start+0xc4>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d008      	beq.n	8003bd4 <HAL_TIM_Encoder_Start+0xd4>
 8003bc2:	e00f      	b.n	8003be4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 ffb3 	bl	8004b38 <TIM_CCxChannelCmd>
      break;
 8003bd2:	e016      	b.n	8003c02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2104      	movs	r1, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 ffab 	bl	8004b38 <TIM_CCxChannelCmd>
      break;
 8003be2:	e00e      	b.n	8003c02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 ffa3 	bl	8004b38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 ff9c 	bl	8004b38 <TIM_CCxChannelCmd>
      break;
 8003c00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d020      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01b      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0202 	mvn.w	r2, #2
 8003c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fb31 	bl	80042ce <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fc fca2 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fb34 	bl	80042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d020      	beq.n	8003ccc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01b      	beq.n	8003ccc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0204 	mvn.w	r2, #4
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fb0b 	bl	80042ce <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fc fc7c 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fb0e 	bl	80042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d020      	beq.n	8003d18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01b      	beq.n	8003d18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0208 	mvn.w	r2, #8
 8003ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2204      	movs	r2, #4
 8003cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fae5 	bl	80042ce <HAL_TIM_IC_CaptureCallback>
 8003d04:	e005      	b.n	8003d12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fc fc56 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fae8 	bl	80042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d020      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01b      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0210 	mvn.w	r2, #16
 8003d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fabf 	bl	80042ce <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fc fc30 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fac2 	bl	80042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0201 	mvn.w	r2, #1
 8003d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fc fbec 	bl	8000560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 ff7e 	bl	8004ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00c      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 ff76 	bl	8004cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00c      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa81 	bl	80042f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00c      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0220 	mvn.w	r2, #32
 8003e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 ff3e 	bl	8004c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_OC_ConfigChannel+0x1e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e066      	b.n	8003f0c <HAL_TIM_OC_ConfigChannel+0xec>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b14      	cmp	r3, #20
 8003e4a:	d857      	bhi.n	8003efc <HAL_TIM_OC_ConfigChannel+0xdc>
 8003e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003ea9 	.word	0x08003ea9
 8003e58:	08003efd 	.word	0x08003efd
 8003e5c:	08003efd 	.word	0x08003efd
 8003e60:	08003efd 	.word	0x08003efd
 8003e64:	08003eb7 	.word	0x08003eb7
 8003e68:	08003efd 	.word	0x08003efd
 8003e6c:	08003efd 	.word	0x08003efd
 8003e70:	08003efd 	.word	0x08003efd
 8003e74:	08003ec5 	.word	0x08003ec5
 8003e78:	08003efd 	.word	0x08003efd
 8003e7c:	08003efd 	.word	0x08003efd
 8003e80:	08003efd 	.word	0x08003efd
 8003e84:	08003ed3 	.word	0x08003ed3
 8003e88:	08003efd 	.word	0x08003efd
 8003e8c:	08003efd 	.word	0x08003efd
 8003e90:	08003efd 	.word	0x08003efd
 8003e94:	08003ee1 	.word	0x08003ee1
 8003e98:	08003efd 	.word	0x08003efd
 8003e9c:	08003efd 	.word	0x08003efd
 8003ea0:	08003efd 	.word	0x08003efd
 8003ea4:	08003eef 	.word	0x08003eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fad2 	bl	8004458 <TIM_OC1_SetConfig>
      break;
 8003eb4:	e025      	b.n	8003f02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fb5b 	bl	8004578 <TIM_OC2_SetConfig>
      break;
 8003ec2:	e01e      	b.n	8003f02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fbde 	bl	800468c <TIM_OC3_SetConfig>
      break;
 8003ed0:	e017      	b.n	8003f02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fc5f 	bl	800479c <TIM_OC4_SetConfig>
      break;
 8003ede:	e010      	b.n	8003f02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fcc2 	bl	8004870 <TIM_OC5_SetConfig>
      break;
 8003eec:	e009      	b.n	8003f02 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fd1f 	bl	8004938 <TIM_OC6_SetConfig>
      break;
 8003efa:	e002      	b.n	8003f02 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
      break;
 8003f00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e0ff      	b.n	8004132 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b14      	cmp	r3, #20
 8003f3e:	f200 80f0 	bhi.w	8004122 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f42:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f9d 	.word	0x08003f9d
 8003f4c:	08004123 	.word	0x08004123
 8003f50:	08004123 	.word	0x08004123
 8003f54:	08004123 	.word	0x08004123
 8003f58:	08003fdd 	.word	0x08003fdd
 8003f5c:	08004123 	.word	0x08004123
 8003f60:	08004123 	.word	0x08004123
 8003f64:	08004123 	.word	0x08004123
 8003f68:	0800401f 	.word	0x0800401f
 8003f6c:	08004123 	.word	0x08004123
 8003f70:	08004123 	.word	0x08004123
 8003f74:	08004123 	.word	0x08004123
 8003f78:	0800405f 	.word	0x0800405f
 8003f7c:	08004123 	.word	0x08004123
 8003f80:	08004123 	.word	0x08004123
 8003f84:	08004123 	.word	0x08004123
 8003f88:	080040a1 	.word	0x080040a1
 8003f8c:	08004123 	.word	0x08004123
 8003f90:	08004123 	.word	0x08004123
 8003f94:	08004123 	.word	0x08004123
 8003f98:	080040e1 	.word	0x080040e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fa58 	bl	8004458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0208 	orr.w	r2, r2, #8
 8003fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0204 	bic.w	r2, r2, #4
 8003fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6999      	ldr	r1, [r3, #24]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	619a      	str	r2, [r3, #24]
      break;
 8003fda:	e0a5      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fac8 	bl	8004578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6999      	ldr	r1, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	021a      	lsls	r2, r3, #8
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	619a      	str	r2, [r3, #24]
      break;
 800401c:	e084      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fb31 	bl	800468c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0208 	orr.w	r2, r2, #8
 8004038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0204 	bic.w	r2, r2, #4
 8004048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69d9      	ldr	r1, [r3, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	61da      	str	r2, [r3, #28]
      break;
 800405c:	e064      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fb99 	bl	800479c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69d9      	ldr	r1, [r3, #28]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	021a      	lsls	r2, r3, #8
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	61da      	str	r2, [r3, #28]
      break;
 800409e:	e043      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fbe2 	bl	8004870 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80040de:	e023      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fc26 	bl	8004938 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800410a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004120:	e002      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	75fb      	strb	r3, [r7, #23]
      break;
 8004126:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004130:	7dfb      	ldrb	r3, [r7, #23]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop

0800413c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIM_ConfigClockSource+0x1c>
 8004154:	2302      	movs	r3, #2
 8004156:	e0b6      	b.n	80042c6 <HAL_TIM_ConfigClockSource+0x18a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004176:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800417a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004194:	d03e      	beq.n	8004214 <HAL_TIM_ConfigClockSource+0xd8>
 8004196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800419a:	f200 8087 	bhi.w	80042ac <HAL_TIM_ConfigClockSource+0x170>
 800419e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a2:	f000 8086 	beq.w	80042b2 <HAL_TIM_ConfigClockSource+0x176>
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041aa:	d87f      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x170>
 80041ac:	2b70      	cmp	r3, #112	@ 0x70
 80041ae:	d01a      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0xaa>
 80041b0:	2b70      	cmp	r3, #112	@ 0x70
 80041b2:	d87b      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x170>
 80041b4:	2b60      	cmp	r3, #96	@ 0x60
 80041b6:	d050      	beq.n	800425a <HAL_TIM_ConfigClockSource+0x11e>
 80041b8:	2b60      	cmp	r3, #96	@ 0x60
 80041ba:	d877      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x170>
 80041bc:	2b50      	cmp	r3, #80	@ 0x50
 80041be:	d03c      	beq.n	800423a <HAL_TIM_ConfigClockSource+0xfe>
 80041c0:	2b50      	cmp	r3, #80	@ 0x50
 80041c2:	d873      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x170>
 80041c4:	2b40      	cmp	r3, #64	@ 0x40
 80041c6:	d058      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x13e>
 80041c8:	2b40      	cmp	r3, #64	@ 0x40
 80041ca:	d86f      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x170>
 80041cc:	2b30      	cmp	r3, #48	@ 0x30
 80041ce:	d064      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15e>
 80041d0:	2b30      	cmp	r3, #48	@ 0x30
 80041d2:	d86b      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x170>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d060      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15e>
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d867      	bhi.n	80042ac <HAL_TIM_ConfigClockSource+0x170>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d05c      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15e>
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d05a      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x15e>
 80041e4:	e062      	b.n	80042ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f6:	f000 fc7f 	bl	8004af8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	609a      	str	r2, [r3, #8]
      break;
 8004212:	e04f      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004224:	f000 fc68 	bl	8004af8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004236:	609a      	str	r2, [r3, #8]
      break;
 8004238:	e03c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004246:	461a      	mov	r2, r3
 8004248:	f000 fbdc 	bl	8004a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2150      	movs	r1, #80	@ 0x50
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fc35 	bl	8004ac2 <TIM_ITRx_SetConfig>
      break;
 8004258:	e02c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004266:	461a      	mov	r2, r3
 8004268:	f000 fbfb 	bl	8004a62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2160      	movs	r1, #96	@ 0x60
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fc25 	bl	8004ac2 <TIM_ITRx_SetConfig>
      break;
 8004278:	e01c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004286:	461a      	mov	r2, r3
 8004288:	f000 fbbc 	bl	8004a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2140      	movs	r1, #64	@ 0x40
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fc15 	bl	8004ac2 <TIM_ITRx_SetConfig>
      break;
 8004298:	e00c      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f000 fc0c 	bl	8004ac2 <TIM_ITRx_SetConfig>
      break;
 80042aa:	e003      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      break;
 80042b0:	e000      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7f1b      	ldrb	r3, [r3, #28]
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a40      	ldr	r2, [pc, #256]	@ (8004438 <TIM_Base_SetConfig+0x114>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d013      	beq.n	8004364 <TIM_Base_SetConfig+0x40>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004342:	d00f      	beq.n	8004364 <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a3d      	ldr	r2, [pc, #244]	@ (800443c <TIM_Base_SetConfig+0x118>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00b      	beq.n	8004364 <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a3c      	ldr	r2, [pc, #240]	@ (8004440 <TIM_Base_SetConfig+0x11c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d007      	beq.n	8004364 <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a3b      	ldr	r2, [pc, #236]	@ (8004444 <TIM_Base_SetConfig+0x120>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d003      	beq.n	8004364 <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a3a      	ldr	r2, [pc, #232]	@ (8004448 <TIM_Base_SetConfig+0x124>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d108      	bne.n	8004376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a2f      	ldr	r2, [pc, #188]	@ (8004438 <TIM_Base_SetConfig+0x114>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01f      	beq.n	80043be <TIM_Base_SetConfig+0x9a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004384:	d01b      	beq.n	80043be <TIM_Base_SetConfig+0x9a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2c      	ldr	r2, [pc, #176]	@ (800443c <TIM_Base_SetConfig+0x118>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d017      	beq.n	80043be <TIM_Base_SetConfig+0x9a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2b      	ldr	r2, [pc, #172]	@ (8004440 <TIM_Base_SetConfig+0x11c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <TIM_Base_SetConfig+0x9a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2a      	ldr	r2, [pc, #168]	@ (8004444 <TIM_Base_SetConfig+0x120>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00f      	beq.n	80043be <TIM_Base_SetConfig+0x9a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a29      	ldr	r2, [pc, #164]	@ (8004448 <TIM_Base_SetConfig+0x124>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_Base_SetConfig+0x9a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a28      	ldr	r2, [pc, #160]	@ (800444c <TIM_Base_SetConfig+0x128>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <TIM_Base_SetConfig+0x9a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a27      	ldr	r2, [pc, #156]	@ (8004450 <TIM_Base_SetConfig+0x12c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0x9a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a26      	ldr	r2, [pc, #152]	@ (8004454 <TIM_Base_SetConfig+0x130>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a10      	ldr	r2, [pc, #64]	@ (8004438 <TIM_Base_SetConfig+0x114>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00f      	beq.n	800441c <TIM_Base_SetConfig+0xf8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a12      	ldr	r2, [pc, #72]	@ (8004448 <TIM_Base_SetConfig+0x124>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00b      	beq.n	800441c <TIM_Base_SetConfig+0xf8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a11      	ldr	r2, [pc, #68]	@ (800444c <TIM_Base_SetConfig+0x128>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d007      	beq.n	800441c <TIM_Base_SetConfig+0xf8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a10      	ldr	r2, [pc, #64]	@ (8004450 <TIM_Base_SetConfig+0x12c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_Base_SetConfig+0xf8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0f      	ldr	r2, [pc, #60]	@ (8004454 <TIM_Base_SetConfig+0x130>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d103      	bne.n	8004424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	615a      	str	r2, [r3, #20]
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800
 8004444:	40000c00 	.word	0x40000c00
 8004448:	40013400 	.word	0x40013400
 800444c:	40014000 	.word	0x40014000
 8004450:	40014400 	.word	0x40014400
 8004454:	40014800 	.word	0x40014800

08004458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f023 0201 	bic.w	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0303 	bic.w	r3, r3, #3
 8004492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f023 0302 	bic.w	r3, r3, #2
 80044a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004564 <TIM_OC1_SetConfig+0x10c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00f      	beq.n	80044d8 <TIM_OC1_SetConfig+0x80>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004568 <TIM_OC1_SetConfig+0x110>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_OC1_SetConfig+0x80>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a2a      	ldr	r2, [pc, #168]	@ (800456c <TIM_OC1_SetConfig+0x114>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_OC1_SetConfig+0x80>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a29      	ldr	r2, [pc, #164]	@ (8004570 <TIM_OC1_SetConfig+0x118>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_OC1_SetConfig+0x80>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a28      	ldr	r2, [pc, #160]	@ (8004574 <TIM_OC1_SetConfig+0x11c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10c      	bne.n	80044f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0308 	bic.w	r3, r3, #8
 80044de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 0304 	bic.w	r3, r3, #4
 80044f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004564 <TIM_OC1_SetConfig+0x10c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00f      	beq.n	800451a <TIM_OC1_SetConfig+0xc2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004568 <TIM_OC1_SetConfig+0x110>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00b      	beq.n	800451a <TIM_OC1_SetConfig+0xc2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a19      	ldr	r2, [pc, #100]	@ (800456c <TIM_OC1_SetConfig+0x114>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <TIM_OC1_SetConfig+0xc2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a18      	ldr	r2, [pc, #96]	@ (8004570 <TIM_OC1_SetConfig+0x118>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <TIM_OC1_SetConfig+0xc2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a17      	ldr	r2, [pc, #92]	@ (8004574 <TIM_OC1_SetConfig+0x11c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d111      	bne.n	800453e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	621a      	str	r2, [r3, #32]
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	40012c00 	.word	0x40012c00
 8004568:	40013400 	.word	0x40013400
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800

08004578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f023 0210 	bic.w	r2, r3, #16
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	021b      	lsls	r3, r3, #8
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0320 	bic.w	r3, r3, #32
 80045c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a28      	ldr	r2, [pc, #160]	@ (8004678 <TIM_OC2_SetConfig+0x100>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <TIM_OC2_SetConfig+0x6c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a27      	ldr	r2, [pc, #156]	@ (800467c <TIM_OC2_SetConfig+0x104>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d10d      	bne.n	8004600 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a1d      	ldr	r2, [pc, #116]	@ (8004678 <TIM_OC2_SetConfig+0x100>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00f      	beq.n	8004628 <TIM_OC2_SetConfig+0xb0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a1c      	ldr	r2, [pc, #112]	@ (800467c <TIM_OC2_SetConfig+0x104>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00b      	beq.n	8004628 <TIM_OC2_SetConfig+0xb0>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a1b      	ldr	r2, [pc, #108]	@ (8004680 <TIM_OC2_SetConfig+0x108>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <TIM_OC2_SetConfig+0xb0>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a1a      	ldr	r2, [pc, #104]	@ (8004684 <TIM_OC2_SetConfig+0x10c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_OC2_SetConfig+0xb0>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a19      	ldr	r2, [pc, #100]	@ (8004688 <TIM_OC2_SetConfig+0x110>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d113      	bne.n	8004650 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800462e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40013400 	.word	0x40013400
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400
 8004688:	40014800 	.word	0x40014800

0800468c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0303 	bic.w	r3, r3, #3
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a27      	ldr	r2, [pc, #156]	@ (8004788 <TIM_OC3_SetConfig+0xfc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_OC3_SetConfig+0x6a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a26      	ldr	r2, [pc, #152]	@ (800478c <TIM_OC3_SetConfig+0x100>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10d      	bne.n	8004712 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1c      	ldr	r2, [pc, #112]	@ (8004788 <TIM_OC3_SetConfig+0xfc>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00f      	beq.n	800473a <TIM_OC3_SetConfig+0xae>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1b      	ldr	r2, [pc, #108]	@ (800478c <TIM_OC3_SetConfig+0x100>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00b      	beq.n	800473a <TIM_OC3_SetConfig+0xae>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1a      	ldr	r2, [pc, #104]	@ (8004790 <TIM_OC3_SetConfig+0x104>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d007      	beq.n	800473a <TIM_OC3_SetConfig+0xae>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a19      	ldr	r2, [pc, #100]	@ (8004794 <TIM_OC3_SetConfig+0x108>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d003      	beq.n	800473a <TIM_OC3_SetConfig+0xae>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a18      	ldr	r2, [pc, #96]	@ (8004798 <TIM_OC3_SetConfig+0x10c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d113      	bne.n	8004762 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	621a      	str	r2, [r3, #32]
}
 800477c:	bf00      	nop
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40013400 	.word	0x40013400
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800

0800479c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	031b      	lsls	r3, r3, #12
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a18      	ldr	r2, [pc, #96]	@ (800485c <TIM_OC4_SetConfig+0xc0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00f      	beq.n	8004820 <TIM_OC4_SetConfig+0x84>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a17      	ldr	r2, [pc, #92]	@ (8004860 <TIM_OC4_SetConfig+0xc4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00b      	beq.n	8004820 <TIM_OC4_SetConfig+0x84>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a16      	ldr	r2, [pc, #88]	@ (8004864 <TIM_OC4_SetConfig+0xc8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d007      	beq.n	8004820 <TIM_OC4_SetConfig+0x84>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a15      	ldr	r2, [pc, #84]	@ (8004868 <TIM_OC4_SetConfig+0xcc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_OC4_SetConfig+0x84>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a14      	ldr	r2, [pc, #80]	@ (800486c <TIM_OC4_SetConfig+0xd0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d109      	bne.n	8004834 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	019b      	lsls	r3, r3, #6
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40013400 	.word	0x40013400
 8004864:	40014000 	.word	0x40014000
 8004868:	40014400 	.word	0x40014400
 800486c:	40014800 	.word	0x40014800

08004870 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800489e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80048b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a17      	ldr	r2, [pc, #92]	@ (8004924 <TIM_OC5_SetConfig+0xb4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00f      	beq.n	80048ea <TIM_OC5_SetConfig+0x7a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a16      	ldr	r2, [pc, #88]	@ (8004928 <TIM_OC5_SetConfig+0xb8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00b      	beq.n	80048ea <TIM_OC5_SetConfig+0x7a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a15      	ldr	r2, [pc, #84]	@ (800492c <TIM_OC5_SetConfig+0xbc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <TIM_OC5_SetConfig+0x7a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a14      	ldr	r2, [pc, #80]	@ (8004930 <TIM_OC5_SetConfig+0xc0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d003      	beq.n	80048ea <TIM_OC5_SetConfig+0x7a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a13      	ldr	r2, [pc, #76]	@ (8004934 <TIM_OC5_SetConfig+0xc4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d109      	bne.n	80048fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	621a      	str	r2, [r3, #32]
}
 8004918:	bf00      	nop
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40013400 	.word	0x40013400
 800492c:	40014000 	.word	0x40014000
 8004930:	40014400 	.word	0x40014400
 8004934:	40014800 	.word	0x40014800

08004938 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800496a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800497e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	051b      	lsls	r3, r3, #20
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a18      	ldr	r2, [pc, #96]	@ (80049f0 <TIM_OC6_SetConfig+0xb8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00f      	beq.n	80049b4 <TIM_OC6_SetConfig+0x7c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a17      	ldr	r2, [pc, #92]	@ (80049f4 <TIM_OC6_SetConfig+0xbc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00b      	beq.n	80049b4 <TIM_OC6_SetConfig+0x7c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a16      	ldr	r2, [pc, #88]	@ (80049f8 <TIM_OC6_SetConfig+0xc0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <TIM_OC6_SetConfig+0x7c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a15      	ldr	r2, [pc, #84]	@ (80049fc <TIM_OC6_SetConfig+0xc4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_OC6_SetConfig+0x7c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <TIM_OC6_SetConfig+0xc8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d109      	bne.n	80049c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40013400 	.word	0x40013400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800

08004a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f023 0201 	bic.w	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 030a 	bic.w	r3, r3, #10
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	621a      	str	r2, [r3, #32]
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b087      	sub	sp, #28
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f023 0210 	bic.w	r2, r3, #16
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	031b      	lsls	r3, r3, #12
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f043 0307 	orr.w	r3, r3, #7
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	609a      	str	r2, [r3, #8]
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	021a      	lsls	r2, r3, #8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	609a      	str	r2, [r3, #8]
}
 8004b2c:	bf00      	nop
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6a1a      	ldr	r2, [r3, #32]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a1a      	ldr	r2, [r3, #32]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	431a      	orrs	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e068      	b.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2d      	ldr	r2, [pc, #180]	@ (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d108      	bne.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004bd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1e      	ldr	r2, [pc, #120]	@ (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01d      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0e:	d018      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1b      	ldr	r2, [pc, #108]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a13      	ldr	r2, [pc, #76]	@ (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a14      	ldr	r2, [pc, #80]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10c      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40013400 	.word	0x40013400
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	40000c00 	.word	0x40000c00
 8004c90:	40014000 	.word	0x40014000

08004c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e040      	b.n	8004d64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fc f8a4 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2224      	movs	r2, #36	@ 0x24
 8004cfc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fb6a 	bl	80053f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f8af 	bl	8004e80 <UART_SetConfig>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e01b      	b.n	8004d64 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fbe9 	bl	8005534 <UART_CheckIdleState>
 8004d62:	4603      	mov	r3, r0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	@ 0x28
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d177      	bne.n	8004e74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_UART_Transmit+0x24>
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e070      	b.n	8004e76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2221      	movs	r2, #33	@ 0x21
 8004da0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004da2:	f7fc fa35 	bl	8001210 <HAL_GetTick>
 8004da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	88fa      	ldrh	r2, [r7, #6]
 8004dac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	88fa      	ldrh	r2, [r7, #6]
 8004db4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc0:	d108      	bne.n	8004dd4 <HAL_UART_Transmit+0x68>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e003      	b.n	8004ddc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ddc:	e02f      	b.n	8004e3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2200      	movs	r2, #0
 8004de6:	2180      	movs	r1, #128	@ 0x80
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fc4b 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d004      	beq.n	8004dfe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e03b      	b.n	8004e76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	881a      	ldrh	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e10:	b292      	uxth	r2, r2
 8004e12:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	3302      	adds	r3, #2
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	e007      	b.n	8004e2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1c9      	bne.n	8004dde <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2140      	movs	r1, #64	@ 0x40
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fc15 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e005      	b.n	8004e76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e84:	b08a      	sub	sp, #40	@ 0x28
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4ba4      	ldr	r3, [pc, #656]	@ (8005140 <UART_SetConfig+0x2c0>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a99      	ldr	r2, [pc, #612]	@ (8005144 <UART_SetConfig+0x2c4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004efc:	430a      	orrs	r2, r1
 8004efe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a90      	ldr	r2, [pc, #576]	@ (8005148 <UART_SetConfig+0x2c8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d126      	bne.n	8004f58 <UART_SetConfig+0xd8>
 8004f0a:	4b90      	ldr	r3, [pc, #576]	@ (800514c <UART_SetConfig+0x2cc>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d81b      	bhi.n	8004f50 <UART_SetConfig+0xd0>
 8004f18:	a201      	add	r2, pc, #4	@ (adr r2, 8004f20 <UART_SetConfig+0xa0>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004f31 	.word	0x08004f31
 8004f24:	08004f41 	.word	0x08004f41
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f49 	.word	0x08004f49
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f36:	e116      	b.n	8005166 <UART_SetConfig+0x2e6>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3e:	e112      	b.n	8005166 <UART_SetConfig+0x2e6>
 8004f40:	2304      	movs	r3, #4
 8004f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f46:	e10e      	b.n	8005166 <UART_SetConfig+0x2e6>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4e:	e10a      	b.n	8005166 <UART_SetConfig+0x2e6>
 8004f50:	2310      	movs	r3, #16
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f56:	e106      	b.n	8005166 <UART_SetConfig+0x2e6>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a7c      	ldr	r2, [pc, #496]	@ (8005150 <UART_SetConfig+0x2d0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d138      	bne.n	8004fd4 <UART_SetConfig+0x154>
 8004f62:	4b7a      	ldr	r3, [pc, #488]	@ (800514c <UART_SetConfig+0x2cc>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f68:	f003 030c 	and.w	r3, r3, #12
 8004f6c:	2b0c      	cmp	r3, #12
 8004f6e:	d82d      	bhi.n	8004fcc <UART_SetConfig+0x14c>
 8004f70:	a201      	add	r2, pc, #4	@ (adr r2, 8004f78 <UART_SetConfig+0xf8>)
 8004f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f76:	bf00      	nop
 8004f78:	08004fad 	.word	0x08004fad
 8004f7c:	08004fcd 	.word	0x08004fcd
 8004f80:	08004fcd 	.word	0x08004fcd
 8004f84:	08004fcd 	.word	0x08004fcd
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	08004fcd 	.word	0x08004fcd
 8004f90:	08004fcd 	.word	0x08004fcd
 8004f94:	08004fcd 	.word	0x08004fcd
 8004f98:	08004fb5 	.word	0x08004fb5
 8004f9c:	08004fcd 	.word	0x08004fcd
 8004fa0:	08004fcd 	.word	0x08004fcd
 8004fa4:	08004fcd 	.word	0x08004fcd
 8004fa8:	08004fc5 	.word	0x08004fc5
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb2:	e0d8      	b.n	8005166 <UART_SetConfig+0x2e6>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fba:	e0d4      	b.n	8005166 <UART_SetConfig+0x2e6>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc2:	e0d0      	b.n	8005166 <UART_SetConfig+0x2e6>
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fca:	e0cc      	b.n	8005166 <UART_SetConfig+0x2e6>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd2:	e0c8      	b.n	8005166 <UART_SetConfig+0x2e6>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a5e      	ldr	r2, [pc, #376]	@ (8005154 <UART_SetConfig+0x2d4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d125      	bne.n	800502a <UART_SetConfig+0x1aa>
 8004fde:	4b5b      	ldr	r3, [pc, #364]	@ (800514c <UART_SetConfig+0x2cc>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fe8:	2b30      	cmp	r3, #48	@ 0x30
 8004fea:	d016      	beq.n	800501a <UART_SetConfig+0x19a>
 8004fec:	2b30      	cmp	r3, #48	@ 0x30
 8004fee:	d818      	bhi.n	8005022 <UART_SetConfig+0x1a2>
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d00a      	beq.n	800500a <UART_SetConfig+0x18a>
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d814      	bhi.n	8005022 <UART_SetConfig+0x1a2>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <UART_SetConfig+0x182>
 8004ffc:	2b10      	cmp	r3, #16
 8004ffe:	d008      	beq.n	8005012 <UART_SetConfig+0x192>
 8005000:	e00f      	b.n	8005022 <UART_SetConfig+0x1a2>
 8005002:	2300      	movs	r3, #0
 8005004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005008:	e0ad      	b.n	8005166 <UART_SetConfig+0x2e6>
 800500a:	2302      	movs	r3, #2
 800500c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005010:	e0a9      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005012:	2304      	movs	r3, #4
 8005014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005018:	e0a5      	b.n	8005166 <UART_SetConfig+0x2e6>
 800501a:	2308      	movs	r3, #8
 800501c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005020:	e0a1      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005022:	2310      	movs	r3, #16
 8005024:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005028:	e09d      	b.n	8005166 <UART_SetConfig+0x2e6>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a4a      	ldr	r2, [pc, #296]	@ (8005158 <UART_SetConfig+0x2d8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d125      	bne.n	8005080 <UART_SetConfig+0x200>
 8005034:	4b45      	ldr	r3, [pc, #276]	@ (800514c <UART_SetConfig+0x2cc>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800503e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005040:	d016      	beq.n	8005070 <UART_SetConfig+0x1f0>
 8005042:	2bc0      	cmp	r3, #192	@ 0xc0
 8005044:	d818      	bhi.n	8005078 <UART_SetConfig+0x1f8>
 8005046:	2b80      	cmp	r3, #128	@ 0x80
 8005048:	d00a      	beq.n	8005060 <UART_SetConfig+0x1e0>
 800504a:	2b80      	cmp	r3, #128	@ 0x80
 800504c:	d814      	bhi.n	8005078 <UART_SetConfig+0x1f8>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <UART_SetConfig+0x1d8>
 8005052:	2b40      	cmp	r3, #64	@ 0x40
 8005054:	d008      	beq.n	8005068 <UART_SetConfig+0x1e8>
 8005056:	e00f      	b.n	8005078 <UART_SetConfig+0x1f8>
 8005058:	2300      	movs	r3, #0
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505e:	e082      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005060:	2302      	movs	r3, #2
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005066:	e07e      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005068:	2304      	movs	r3, #4
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506e:	e07a      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005070:	2308      	movs	r3, #8
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005076:	e076      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005078:	2310      	movs	r3, #16
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507e:	e072      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a35      	ldr	r2, [pc, #212]	@ (800515c <UART_SetConfig+0x2dc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d12a      	bne.n	80050e0 <UART_SetConfig+0x260>
 800508a:	4b30      	ldr	r3, [pc, #192]	@ (800514c <UART_SetConfig+0x2cc>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005094:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005098:	d01a      	beq.n	80050d0 <UART_SetConfig+0x250>
 800509a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800509e:	d81b      	bhi.n	80050d8 <UART_SetConfig+0x258>
 80050a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a4:	d00c      	beq.n	80050c0 <UART_SetConfig+0x240>
 80050a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050aa:	d815      	bhi.n	80050d8 <UART_SetConfig+0x258>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <UART_SetConfig+0x238>
 80050b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050b4:	d008      	beq.n	80050c8 <UART_SetConfig+0x248>
 80050b6:	e00f      	b.n	80050d8 <UART_SetConfig+0x258>
 80050b8:	2300      	movs	r3, #0
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050be:	e052      	b.n	8005166 <UART_SetConfig+0x2e6>
 80050c0:	2302      	movs	r3, #2
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c6:	e04e      	b.n	8005166 <UART_SetConfig+0x2e6>
 80050c8:	2304      	movs	r3, #4
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ce:	e04a      	b.n	8005166 <UART_SetConfig+0x2e6>
 80050d0:	2308      	movs	r3, #8
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d6:	e046      	b.n	8005166 <UART_SetConfig+0x2e6>
 80050d8:	2310      	movs	r3, #16
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050de:	e042      	b.n	8005166 <UART_SetConfig+0x2e6>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a17      	ldr	r2, [pc, #92]	@ (8005144 <UART_SetConfig+0x2c4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d13a      	bne.n	8005160 <UART_SetConfig+0x2e0>
 80050ea:	4b18      	ldr	r3, [pc, #96]	@ (800514c <UART_SetConfig+0x2cc>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050f8:	d01a      	beq.n	8005130 <UART_SetConfig+0x2b0>
 80050fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050fe:	d81b      	bhi.n	8005138 <UART_SetConfig+0x2b8>
 8005100:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005104:	d00c      	beq.n	8005120 <UART_SetConfig+0x2a0>
 8005106:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800510a:	d815      	bhi.n	8005138 <UART_SetConfig+0x2b8>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <UART_SetConfig+0x298>
 8005110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005114:	d008      	beq.n	8005128 <UART_SetConfig+0x2a8>
 8005116:	e00f      	b.n	8005138 <UART_SetConfig+0x2b8>
 8005118:	2300      	movs	r3, #0
 800511a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511e:	e022      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005120:	2302      	movs	r3, #2
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005126:	e01e      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512e:	e01a      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005136:	e016      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513e:	e012      	b.n	8005166 <UART_SetConfig+0x2e6>
 8005140:	efff69f3 	.word	0xefff69f3
 8005144:	40008000 	.word	0x40008000
 8005148:	40013800 	.word	0x40013800
 800514c:	40021000 	.word	0x40021000
 8005150:	40004400 	.word	0x40004400
 8005154:	40004800 	.word	0x40004800
 8005158:	40004c00 	.word	0x40004c00
 800515c:	40005000 	.word	0x40005000
 8005160:	2310      	movs	r3, #16
 8005162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a9f      	ldr	r2, [pc, #636]	@ (80053e8 <UART_SetConfig+0x568>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d17a      	bne.n	8005266 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005170:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005174:	2b08      	cmp	r3, #8
 8005176:	d824      	bhi.n	80051c2 <UART_SetConfig+0x342>
 8005178:	a201      	add	r2, pc, #4	@ (adr r2, 8005180 <UART_SetConfig+0x300>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051c3 	.word	0x080051c3
 8005188:	080051ad 	.word	0x080051ad
 800518c:	080051c3 	.word	0x080051c3
 8005190:	080051b3 	.word	0x080051b3
 8005194:	080051c3 	.word	0x080051c3
 8005198:	080051c3 	.word	0x080051c3
 800519c:	080051c3 	.word	0x080051c3
 80051a0:	080051bb 	.word	0x080051bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a4:	f7fd f916 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 80051a8:	61f8      	str	r0, [r7, #28]
        break;
 80051aa:	e010      	b.n	80051ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051ac:	4b8f      	ldr	r3, [pc, #572]	@ (80053ec <UART_SetConfig+0x56c>)
 80051ae:	61fb      	str	r3, [r7, #28]
        break;
 80051b0:	e00d      	b.n	80051ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b2:	f7fd f877 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 80051b6:	61f8      	str	r0, [r7, #28]
        break;
 80051b8:	e009      	b.n	80051ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051be:	61fb      	str	r3, [r7, #28]
        break;
 80051c0:	e005      	b.n	80051ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80fb 	beq.w	80053cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	4413      	add	r3, r2
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d305      	bcc.n	80051f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d903      	bls.n	80051fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051f8:	e0e8      	b.n	80053cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	2200      	movs	r2, #0
 80051fe:	461c      	mov	r4, r3
 8005200:	4615      	mov	r5, r2
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	022b      	lsls	r3, r5, #8
 800520c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005210:	0222      	lsls	r2, r4, #8
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	6849      	ldr	r1, [r1, #4]
 8005216:	0849      	lsrs	r1, r1, #1
 8005218:	2000      	movs	r0, #0
 800521a:	4688      	mov	r8, r1
 800521c:	4681      	mov	r9, r0
 800521e:	eb12 0a08 	adds.w	sl, r2, r8
 8005222:	eb43 0b09 	adc.w	fp, r3, r9
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	603b      	str	r3, [r7, #0]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005234:	4650      	mov	r0, sl
 8005236:	4659      	mov	r1, fp
 8005238:	f7fb f81a 	bl	8000270 <__aeabi_uldivmod>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4613      	mov	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800524a:	d308      	bcc.n	800525e <UART_SetConfig+0x3de>
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005252:	d204      	bcs.n	800525e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	60da      	str	r2, [r3, #12]
 800525c:	e0b6      	b.n	80053cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005264:	e0b2      	b.n	80053cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800526e:	d15e      	bne.n	800532e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005270:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005274:	2b08      	cmp	r3, #8
 8005276:	d828      	bhi.n	80052ca <UART_SetConfig+0x44a>
 8005278:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <UART_SetConfig+0x400>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052ad 	.word	0x080052ad
 8005288:	080052b5 	.word	0x080052b5
 800528c:	080052cb 	.word	0x080052cb
 8005290:	080052bb 	.word	0x080052bb
 8005294:	080052cb 	.word	0x080052cb
 8005298:	080052cb 	.word	0x080052cb
 800529c:	080052cb 	.word	0x080052cb
 80052a0:	080052c3 	.word	0x080052c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a4:	f7fd f896 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 80052a8:	61f8      	str	r0, [r7, #28]
        break;
 80052aa:	e014      	b.n	80052d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ac:	f7fd f8a8 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 80052b0:	61f8      	str	r0, [r7, #28]
        break;
 80052b2:	e010      	b.n	80052d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b4:	4b4d      	ldr	r3, [pc, #308]	@ (80053ec <UART_SetConfig+0x56c>)
 80052b6:	61fb      	str	r3, [r7, #28]
        break;
 80052b8:	e00d      	b.n	80052d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ba:	f7fc fff3 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 80052be:	61f8      	str	r0, [r7, #28]
        break;
 80052c0:	e009      	b.n	80052d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052c6:	61fb      	str	r3, [r7, #28]
        break;
 80052c8:	e005      	b.n	80052d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d077      	beq.n	80053cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	005a      	lsls	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	441a      	add	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d916      	bls.n	8005326 <UART_SetConfig+0x4a6>
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052fe:	d212      	bcs.n	8005326 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f023 030f 	bic.w	r3, r3, #15
 8005308:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	b29b      	uxth	r3, r3
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	b29a      	uxth	r2, r3
 8005316:	8afb      	ldrh	r3, [r7, #22]
 8005318:	4313      	orrs	r3, r2
 800531a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	8afa      	ldrh	r2, [r7, #22]
 8005322:	60da      	str	r2, [r3, #12]
 8005324:	e052      	b.n	80053cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800532c:	e04e      	b.n	80053cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800532e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005332:	2b08      	cmp	r3, #8
 8005334:	d827      	bhi.n	8005386 <UART_SetConfig+0x506>
 8005336:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <UART_SetConfig+0x4bc>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005361 	.word	0x08005361
 8005340:	08005369 	.word	0x08005369
 8005344:	08005371 	.word	0x08005371
 8005348:	08005387 	.word	0x08005387
 800534c:	08005377 	.word	0x08005377
 8005350:	08005387 	.word	0x08005387
 8005354:	08005387 	.word	0x08005387
 8005358:	08005387 	.word	0x08005387
 800535c:	0800537f 	.word	0x0800537f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7fd f838 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8005364:	61f8      	str	r0, [r7, #28]
        break;
 8005366:	e014      	b.n	8005392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005368:	f7fd f84a 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 800536c:	61f8      	str	r0, [r7, #28]
        break;
 800536e:	e010      	b.n	8005392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005370:	4b1e      	ldr	r3, [pc, #120]	@ (80053ec <UART_SetConfig+0x56c>)
 8005372:	61fb      	str	r3, [r7, #28]
        break;
 8005374:	e00d      	b.n	8005392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005376:	f7fc ff95 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 800537a:	61f8      	str	r0, [r7, #28]
        break;
 800537c:	e009      	b.n	8005392 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005382:	61fb      	str	r3, [r7, #28]
        break;
 8005384:	e005      	b.n	8005392 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005390:	bf00      	nop
    }

    if (pclk != 0U)
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d019      	beq.n	80053cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	085a      	lsrs	r2, r3, #1
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	441a      	add	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2b0f      	cmp	r3, #15
 80053b0:	d909      	bls.n	80053c6 <UART_SetConfig+0x546>
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b8:	d205      	bcs.n	80053c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60da      	str	r2, [r3, #12]
 80053c4:	e002      	b.n	80053cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3728      	adds	r7, #40	@ 0x28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053e6:	bf00      	nop
 80053e8:	40008000 	.word	0x40008000
 80053ec:	00f42400 	.word	0x00f42400

080053f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01a      	beq.n	8005506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ee:	d10a      	bne.n	8005506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b098      	sub	sp, #96	@ 0x60
 8005538:	af02      	add	r7, sp, #8
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005544:	f7fb fe64 	bl	8001210 <HAL_GetTick>
 8005548:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b08      	cmp	r3, #8
 8005556:	d12e      	bne.n	80055b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005558:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005560:	2200      	movs	r2, #0
 8005562:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f88c 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d021      	beq.n	80055b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005582:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005586:	653b      	str	r3, [r7, #80]	@ 0x50
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005590:	647b      	str	r3, [r7, #68]	@ 0x44
 8005592:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800559e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e6      	bne.n	8005572 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e062      	b.n	800567c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d149      	bne.n	8005658 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055cc:	2200      	movs	r2, #0
 80055ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f856 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d03c      	beq.n	8005658 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	623b      	str	r3, [r7, #32]
   return(result);
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80055fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e6      	bne.n	80055de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3308      	adds	r3, #8
 8005616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005630:	61fa      	str	r2, [r7, #28]
 8005632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	69b9      	ldr	r1, [r7, #24]
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	617b      	str	r3, [r7, #20]
   return(result);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e011      	b.n	800567c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3758      	adds	r7, #88	@ 0x58
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005694:	e049      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569c:	d045      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569e:	f7fb fdb7 	bl	8001210 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d302      	bcc.n	80056b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e048      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d031      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d110      	bne.n	80056f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2208      	movs	r2, #8
 80056da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f838 	bl	8005752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2208      	movs	r2, #8
 80056e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e029      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005704:	d111      	bne.n	800572a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800570e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f81e 	bl	8005752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e00f      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	429a      	cmp	r2, r3
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	429a      	cmp	r2, r3
 8005746:	d0a6      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005752:	b480      	push	{r7}
 8005754:	b095      	sub	sp, #84	@ 0x54
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800576e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005778:	643b      	str	r3, [r7, #64]	@ 0x40
 800577a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800577e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e6      	bne.n	800575a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	61fb      	str	r3, [r7, #28]
   return(result);
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3308      	adds	r3, #8
 80057aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e5      	bne.n	800578c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d118      	bne.n	80057fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f023 0310 	bic.w	r3, r3, #16
 80057dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	6979      	ldr	r1, [r7, #20]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	613b      	str	r3, [r7, #16]
   return(result);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1e6      	bne.n	80057c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800580e:	bf00      	nop
 8005810:	3754      	adds	r7, #84	@ 0x54
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <std>:
 800581c:	2300      	movs	r3, #0
 800581e:	b510      	push	{r4, lr}
 8005820:	4604      	mov	r4, r0
 8005822:	e9c0 3300 	strd	r3, r3, [r0]
 8005826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800582a:	6083      	str	r3, [r0, #8]
 800582c:	8181      	strh	r1, [r0, #12]
 800582e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005830:	81c2      	strh	r2, [r0, #14]
 8005832:	6183      	str	r3, [r0, #24]
 8005834:	4619      	mov	r1, r3
 8005836:	2208      	movs	r2, #8
 8005838:	305c      	adds	r0, #92	@ 0x5c
 800583a:	f000 f906 	bl	8005a4a <memset>
 800583e:	4b0d      	ldr	r3, [pc, #52]	@ (8005874 <std+0x58>)
 8005840:	6263      	str	r3, [r4, #36]	@ 0x24
 8005842:	4b0d      	ldr	r3, [pc, #52]	@ (8005878 <std+0x5c>)
 8005844:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005846:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <std+0x60>)
 8005848:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800584a:	4b0d      	ldr	r3, [pc, #52]	@ (8005880 <std+0x64>)
 800584c:	6323      	str	r3, [r4, #48]	@ 0x30
 800584e:	4b0d      	ldr	r3, [pc, #52]	@ (8005884 <std+0x68>)
 8005850:	6224      	str	r4, [r4, #32]
 8005852:	429c      	cmp	r4, r3
 8005854:	d006      	beq.n	8005864 <std+0x48>
 8005856:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800585a:	4294      	cmp	r4, r2
 800585c:	d002      	beq.n	8005864 <std+0x48>
 800585e:	33d0      	adds	r3, #208	@ 0xd0
 8005860:	429c      	cmp	r4, r3
 8005862:	d105      	bne.n	8005870 <std+0x54>
 8005864:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800586c:	f000 b966 	b.w	8005b3c <__retarget_lock_init_recursive>
 8005870:	bd10      	pop	{r4, pc}
 8005872:	bf00      	nop
 8005874:	080059c5 	.word	0x080059c5
 8005878:	080059e7 	.word	0x080059e7
 800587c:	08005a1f 	.word	0x08005a1f
 8005880:	08005a43 	.word	0x08005a43
 8005884:	20000244 	.word	0x20000244

08005888 <stdio_exit_handler>:
 8005888:	4a02      	ldr	r2, [pc, #8]	@ (8005894 <stdio_exit_handler+0xc>)
 800588a:	4903      	ldr	r1, [pc, #12]	@ (8005898 <stdio_exit_handler+0x10>)
 800588c:	4803      	ldr	r0, [pc, #12]	@ (800589c <stdio_exit_handler+0x14>)
 800588e:	f000 b869 	b.w	8005964 <_fwalk_sglue>
 8005892:	bf00      	nop
 8005894:	2000000c 	.word	0x2000000c
 8005898:	080063dd 	.word	0x080063dd
 800589c:	2000001c 	.word	0x2000001c

080058a0 <cleanup_stdio>:
 80058a0:	6841      	ldr	r1, [r0, #4]
 80058a2:	4b0c      	ldr	r3, [pc, #48]	@ (80058d4 <cleanup_stdio+0x34>)
 80058a4:	4299      	cmp	r1, r3
 80058a6:	b510      	push	{r4, lr}
 80058a8:	4604      	mov	r4, r0
 80058aa:	d001      	beq.n	80058b0 <cleanup_stdio+0x10>
 80058ac:	f000 fd96 	bl	80063dc <_fflush_r>
 80058b0:	68a1      	ldr	r1, [r4, #8]
 80058b2:	4b09      	ldr	r3, [pc, #36]	@ (80058d8 <cleanup_stdio+0x38>)
 80058b4:	4299      	cmp	r1, r3
 80058b6:	d002      	beq.n	80058be <cleanup_stdio+0x1e>
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fd8f 	bl	80063dc <_fflush_r>
 80058be:	68e1      	ldr	r1, [r4, #12]
 80058c0:	4b06      	ldr	r3, [pc, #24]	@ (80058dc <cleanup_stdio+0x3c>)
 80058c2:	4299      	cmp	r1, r3
 80058c4:	d004      	beq.n	80058d0 <cleanup_stdio+0x30>
 80058c6:	4620      	mov	r0, r4
 80058c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058cc:	f000 bd86 	b.w	80063dc <_fflush_r>
 80058d0:	bd10      	pop	{r4, pc}
 80058d2:	bf00      	nop
 80058d4:	20000244 	.word	0x20000244
 80058d8:	200002ac 	.word	0x200002ac
 80058dc:	20000314 	.word	0x20000314

080058e0 <global_stdio_init.part.0>:
 80058e0:	b510      	push	{r4, lr}
 80058e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005910 <global_stdio_init.part.0+0x30>)
 80058e4:	4c0b      	ldr	r4, [pc, #44]	@ (8005914 <global_stdio_init.part.0+0x34>)
 80058e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005918 <global_stdio_init.part.0+0x38>)
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	4620      	mov	r0, r4
 80058ec:	2200      	movs	r2, #0
 80058ee:	2104      	movs	r1, #4
 80058f0:	f7ff ff94 	bl	800581c <std>
 80058f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058f8:	2201      	movs	r2, #1
 80058fa:	2109      	movs	r1, #9
 80058fc:	f7ff ff8e 	bl	800581c <std>
 8005900:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005904:	2202      	movs	r2, #2
 8005906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800590a:	2112      	movs	r1, #18
 800590c:	f7ff bf86 	b.w	800581c <std>
 8005910:	2000037c 	.word	0x2000037c
 8005914:	20000244 	.word	0x20000244
 8005918:	08005889 	.word	0x08005889

0800591c <__sfp_lock_acquire>:
 800591c:	4801      	ldr	r0, [pc, #4]	@ (8005924 <__sfp_lock_acquire+0x8>)
 800591e:	f000 b90e 	b.w	8005b3e <__retarget_lock_acquire_recursive>
 8005922:	bf00      	nop
 8005924:	20000385 	.word	0x20000385

08005928 <__sfp_lock_release>:
 8005928:	4801      	ldr	r0, [pc, #4]	@ (8005930 <__sfp_lock_release+0x8>)
 800592a:	f000 b909 	b.w	8005b40 <__retarget_lock_release_recursive>
 800592e:	bf00      	nop
 8005930:	20000385 	.word	0x20000385

08005934 <__sinit>:
 8005934:	b510      	push	{r4, lr}
 8005936:	4604      	mov	r4, r0
 8005938:	f7ff fff0 	bl	800591c <__sfp_lock_acquire>
 800593c:	6a23      	ldr	r3, [r4, #32]
 800593e:	b11b      	cbz	r3, 8005948 <__sinit+0x14>
 8005940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005944:	f7ff bff0 	b.w	8005928 <__sfp_lock_release>
 8005948:	4b04      	ldr	r3, [pc, #16]	@ (800595c <__sinit+0x28>)
 800594a:	6223      	str	r3, [r4, #32]
 800594c:	4b04      	ldr	r3, [pc, #16]	@ (8005960 <__sinit+0x2c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1f5      	bne.n	8005940 <__sinit+0xc>
 8005954:	f7ff ffc4 	bl	80058e0 <global_stdio_init.part.0>
 8005958:	e7f2      	b.n	8005940 <__sinit+0xc>
 800595a:	bf00      	nop
 800595c:	080058a1 	.word	0x080058a1
 8005960:	2000037c 	.word	0x2000037c

08005964 <_fwalk_sglue>:
 8005964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005968:	4607      	mov	r7, r0
 800596a:	4688      	mov	r8, r1
 800596c:	4614      	mov	r4, r2
 800596e:	2600      	movs	r6, #0
 8005970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005974:	f1b9 0901 	subs.w	r9, r9, #1
 8005978:	d505      	bpl.n	8005986 <_fwalk_sglue+0x22>
 800597a:	6824      	ldr	r4, [r4, #0]
 800597c:	2c00      	cmp	r4, #0
 800597e:	d1f7      	bne.n	8005970 <_fwalk_sglue+0xc>
 8005980:	4630      	mov	r0, r6
 8005982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005986:	89ab      	ldrh	r3, [r5, #12]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d907      	bls.n	800599c <_fwalk_sglue+0x38>
 800598c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005990:	3301      	adds	r3, #1
 8005992:	d003      	beq.n	800599c <_fwalk_sglue+0x38>
 8005994:	4629      	mov	r1, r5
 8005996:	4638      	mov	r0, r7
 8005998:	47c0      	blx	r8
 800599a:	4306      	orrs	r6, r0
 800599c:	3568      	adds	r5, #104	@ 0x68
 800599e:	e7e9      	b.n	8005974 <_fwalk_sglue+0x10>

080059a0 <iprintf>:
 80059a0:	b40f      	push	{r0, r1, r2, r3}
 80059a2:	b507      	push	{r0, r1, r2, lr}
 80059a4:	4906      	ldr	r1, [pc, #24]	@ (80059c0 <iprintf+0x20>)
 80059a6:	ab04      	add	r3, sp, #16
 80059a8:	6808      	ldr	r0, [r1, #0]
 80059aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ae:	6881      	ldr	r1, [r0, #8]
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	f000 f9e9 	bl	8005d88 <_vfiprintf_r>
 80059b6:	b003      	add	sp, #12
 80059b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059bc:	b004      	add	sp, #16
 80059be:	4770      	bx	lr
 80059c0:	20000018 	.word	0x20000018

080059c4 <__sread>:
 80059c4:	b510      	push	{r4, lr}
 80059c6:	460c      	mov	r4, r1
 80059c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059cc:	f000 f868 	bl	8005aa0 <_read_r>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	bfab      	itete	ge
 80059d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059d6:	89a3      	ldrhlt	r3, [r4, #12]
 80059d8:	181b      	addge	r3, r3, r0
 80059da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059de:	bfac      	ite	ge
 80059e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059e2:	81a3      	strhlt	r3, [r4, #12]
 80059e4:	bd10      	pop	{r4, pc}

080059e6 <__swrite>:
 80059e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ea:	461f      	mov	r7, r3
 80059ec:	898b      	ldrh	r3, [r1, #12]
 80059ee:	05db      	lsls	r3, r3, #23
 80059f0:	4605      	mov	r5, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	4616      	mov	r6, r2
 80059f6:	d505      	bpl.n	8005a04 <__swrite+0x1e>
 80059f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fc:	2302      	movs	r3, #2
 80059fe:	2200      	movs	r2, #0
 8005a00:	f000 f83c 	bl	8005a7c <_lseek_r>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a0e:	81a3      	strh	r3, [r4, #12]
 8005a10:	4632      	mov	r2, r6
 8005a12:	463b      	mov	r3, r7
 8005a14:	4628      	mov	r0, r5
 8005a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1a:	f000 b853 	b.w	8005ac4 <_write_r>

08005a1e <__sseek>:
 8005a1e:	b510      	push	{r4, lr}
 8005a20:	460c      	mov	r4, r1
 8005a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a26:	f000 f829 	bl	8005a7c <_lseek_r>
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	bf15      	itete	ne
 8005a30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a3a:	81a3      	strheq	r3, [r4, #12]
 8005a3c:	bf18      	it	ne
 8005a3e:	81a3      	strhne	r3, [r4, #12]
 8005a40:	bd10      	pop	{r4, pc}

08005a42 <__sclose>:
 8005a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a46:	f000 b809 	b.w	8005a5c <_close_r>

08005a4a <memset>:
 8005a4a:	4402      	add	r2, r0
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d100      	bne.n	8005a54 <memset+0xa>
 8005a52:	4770      	bx	lr
 8005a54:	f803 1b01 	strb.w	r1, [r3], #1
 8005a58:	e7f9      	b.n	8005a4e <memset+0x4>
	...

08005a5c <_close_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4d06      	ldr	r5, [pc, #24]	@ (8005a78 <_close_r+0x1c>)
 8005a60:	2300      	movs	r3, #0
 8005a62:	4604      	mov	r4, r0
 8005a64:	4608      	mov	r0, r1
 8005a66:	602b      	str	r3, [r5, #0]
 8005a68:	f7fb fac3 	bl	8000ff2 <_close>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_close_r+0x1a>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_close_r+0x1a>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	20000380 	.word	0x20000380

08005a7c <_lseek_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d07      	ldr	r5, [pc, #28]	@ (8005a9c <_lseek_r+0x20>)
 8005a80:	4604      	mov	r4, r0
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	602a      	str	r2, [r5, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f7fb fad8 	bl	8001040 <_lseek>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_lseek_r+0x1e>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_lseek_r+0x1e>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	20000380 	.word	0x20000380

08005aa0 <_read_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	@ (8005ac0 <_read_r+0x20>)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fb fa66 	bl	8000f80 <_read>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_read_r+0x1e>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_read_r+0x1e>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20000380 	.word	0x20000380

08005ac4 <_write_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d07      	ldr	r5, [pc, #28]	@ (8005ae4 <_write_r+0x20>)
 8005ac8:	4604      	mov	r4, r0
 8005aca:	4608      	mov	r0, r1
 8005acc:	4611      	mov	r1, r2
 8005ace:	2200      	movs	r2, #0
 8005ad0:	602a      	str	r2, [r5, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f7fb fa71 	bl	8000fba <_write>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_write_r+0x1e>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_write_r+0x1e>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	20000380 	.word	0x20000380

08005ae8 <__errno>:
 8005ae8:	4b01      	ldr	r3, [pc, #4]	@ (8005af0 <__errno+0x8>)
 8005aea:	6818      	ldr	r0, [r3, #0]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000018 	.word	0x20000018

08005af4 <__libc_init_array>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4d0d      	ldr	r5, [pc, #52]	@ (8005b2c <__libc_init_array+0x38>)
 8005af8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b30 <__libc_init_array+0x3c>)
 8005afa:	1b64      	subs	r4, r4, r5
 8005afc:	10a4      	asrs	r4, r4, #2
 8005afe:	2600      	movs	r6, #0
 8005b00:	42a6      	cmp	r6, r4
 8005b02:	d109      	bne.n	8005b18 <__libc_init_array+0x24>
 8005b04:	4d0b      	ldr	r5, [pc, #44]	@ (8005b34 <__libc_init_array+0x40>)
 8005b06:	4c0c      	ldr	r4, [pc, #48]	@ (8005b38 <__libc_init_array+0x44>)
 8005b08:	f000 fdb8 	bl	800667c <_init>
 8005b0c:	1b64      	subs	r4, r4, r5
 8005b0e:	10a4      	asrs	r4, r4, #2
 8005b10:	2600      	movs	r6, #0
 8005b12:	42a6      	cmp	r6, r4
 8005b14:	d105      	bne.n	8005b22 <__libc_init_array+0x2e>
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1c:	4798      	blx	r3
 8005b1e:	3601      	adds	r6, #1
 8005b20:	e7ee      	b.n	8005b00 <__libc_init_array+0xc>
 8005b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b26:	4798      	blx	r3
 8005b28:	3601      	adds	r6, #1
 8005b2a:	e7f2      	b.n	8005b12 <__libc_init_array+0x1e>
 8005b2c:	08006724 	.word	0x08006724
 8005b30:	08006724 	.word	0x08006724
 8005b34:	08006724 	.word	0x08006724
 8005b38:	08006728 	.word	0x08006728

08005b3c <__retarget_lock_init_recursive>:
 8005b3c:	4770      	bx	lr

08005b3e <__retarget_lock_acquire_recursive>:
 8005b3e:	4770      	bx	lr

08005b40 <__retarget_lock_release_recursive>:
 8005b40:	4770      	bx	lr
	...

08005b44 <_free_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4605      	mov	r5, r0
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	d041      	beq.n	8005bd0 <_free_r+0x8c>
 8005b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b50:	1f0c      	subs	r4, r1, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bfb8      	it	lt
 8005b56:	18e4      	addlt	r4, r4, r3
 8005b58:	f000 f8e0 	bl	8005d1c <__malloc_lock>
 8005b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd4 <_free_r+0x90>)
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	b933      	cbnz	r3, 8005b70 <_free_r+0x2c>
 8005b62:	6063      	str	r3, [r4, #4]
 8005b64:	6014      	str	r4, [r2, #0]
 8005b66:	4628      	mov	r0, r5
 8005b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b6c:	f000 b8dc 	b.w	8005d28 <__malloc_unlock>
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	d908      	bls.n	8005b86 <_free_r+0x42>
 8005b74:	6820      	ldr	r0, [r4, #0]
 8005b76:	1821      	adds	r1, r4, r0
 8005b78:	428b      	cmp	r3, r1
 8005b7a:	bf01      	itttt	eq
 8005b7c:	6819      	ldreq	r1, [r3, #0]
 8005b7e:	685b      	ldreq	r3, [r3, #4]
 8005b80:	1809      	addeq	r1, r1, r0
 8005b82:	6021      	streq	r1, [r4, #0]
 8005b84:	e7ed      	b.n	8005b62 <_free_r+0x1e>
 8005b86:	461a      	mov	r2, r3
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	b10b      	cbz	r3, 8005b90 <_free_r+0x4c>
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	d9fa      	bls.n	8005b86 <_free_r+0x42>
 8005b90:	6811      	ldr	r1, [r2, #0]
 8005b92:	1850      	adds	r0, r2, r1
 8005b94:	42a0      	cmp	r0, r4
 8005b96:	d10b      	bne.n	8005bb0 <_free_r+0x6c>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	4401      	add	r1, r0
 8005b9c:	1850      	adds	r0, r2, r1
 8005b9e:	4283      	cmp	r3, r0
 8005ba0:	6011      	str	r1, [r2, #0]
 8005ba2:	d1e0      	bne.n	8005b66 <_free_r+0x22>
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	6053      	str	r3, [r2, #4]
 8005baa:	4408      	add	r0, r1
 8005bac:	6010      	str	r0, [r2, #0]
 8005bae:	e7da      	b.n	8005b66 <_free_r+0x22>
 8005bb0:	d902      	bls.n	8005bb8 <_free_r+0x74>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	602b      	str	r3, [r5, #0]
 8005bb6:	e7d6      	b.n	8005b66 <_free_r+0x22>
 8005bb8:	6820      	ldr	r0, [r4, #0]
 8005bba:	1821      	adds	r1, r4, r0
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	bf04      	itt	eq
 8005bc0:	6819      	ldreq	r1, [r3, #0]
 8005bc2:	685b      	ldreq	r3, [r3, #4]
 8005bc4:	6063      	str	r3, [r4, #4]
 8005bc6:	bf04      	itt	eq
 8005bc8:	1809      	addeq	r1, r1, r0
 8005bca:	6021      	streq	r1, [r4, #0]
 8005bcc:	6054      	str	r4, [r2, #4]
 8005bce:	e7ca      	b.n	8005b66 <_free_r+0x22>
 8005bd0:	bd38      	pop	{r3, r4, r5, pc}
 8005bd2:	bf00      	nop
 8005bd4:	2000038c 	.word	0x2000038c

08005bd8 <sbrk_aligned>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	4e0f      	ldr	r6, [pc, #60]	@ (8005c18 <sbrk_aligned+0x40>)
 8005bdc:	460c      	mov	r4, r1
 8005bde:	6831      	ldr	r1, [r6, #0]
 8005be0:	4605      	mov	r5, r0
 8005be2:	b911      	cbnz	r1, 8005bea <sbrk_aligned+0x12>
 8005be4:	f000 fcb6 	bl	8006554 <_sbrk_r>
 8005be8:	6030      	str	r0, [r6, #0]
 8005bea:	4621      	mov	r1, r4
 8005bec:	4628      	mov	r0, r5
 8005bee:	f000 fcb1 	bl	8006554 <_sbrk_r>
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	d103      	bne.n	8005bfe <sbrk_aligned+0x26>
 8005bf6:	f04f 34ff 	mov.w	r4, #4294967295
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
 8005bfe:	1cc4      	adds	r4, r0, #3
 8005c00:	f024 0403 	bic.w	r4, r4, #3
 8005c04:	42a0      	cmp	r0, r4
 8005c06:	d0f8      	beq.n	8005bfa <sbrk_aligned+0x22>
 8005c08:	1a21      	subs	r1, r4, r0
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f000 fca2 	bl	8006554 <_sbrk_r>
 8005c10:	3001      	adds	r0, #1
 8005c12:	d1f2      	bne.n	8005bfa <sbrk_aligned+0x22>
 8005c14:	e7ef      	b.n	8005bf6 <sbrk_aligned+0x1e>
 8005c16:	bf00      	nop
 8005c18:	20000388 	.word	0x20000388

08005c1c <_malloc_r>:
 8005c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c20:	1ccd      	adds	r5, r1, #3
 8005c22:	f025 0503 	bic.w	r5, r5, #3
 8005c26:	3508      	adds	r5, #8
 8005c28:	2d0c      	cmp	r5, #12
 8005c2a:	bf38      	it	cc
 8005c2c:	250c      	movcc	r5, #12
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	4606      	mov	r6, r0
 8005c32:	db01      	blt.n	8005c38 <_malloc_r+0x1c>
 8005c34:	42a9      	cmp	r1, r5
 8005c36:	d904      	bls.n	8005c42 <_malloc_r+0x26>
 8005c38:	230c      	movs	r3, #12
 8005c3a:	6033      	str	r3, [r6, #0]
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d18 <_malloc_r+0xfc>
 8005c46:	f000 f869 	bl	8005d1c <__malloc_lock>
 8005c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c4e:	461c      	mov	r4, r3
 8005c50:	bb44      	cbnz	r4, 8005ca4 <_malloc_r+0x88>
 8005c52:	4629      	mov	r1, r5
 8005c54:	4630      	mov	r0, r6
 8005c56:	f7ff ffbf 	bl	8005bd8 <sbrk_aligned>
 8005c5a:	1c43      	adds	r3, r0, #1
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	d158      	bne.n	8005d12 <_malloc_r+0xf6>
 8005c60:	f8d8 4000 	ldr.w	r4, [r8]
 8005c64:	4627      	mov	r7, r4
 8005c66:	2f00      	cmp	r7, #0
 8005c68:	d143      	bne.n	8005cf2 <_malloc_r+0xd6>
 8005c6a:	2c00      	cmp	r4, #0
 8005c6c:	d04b      	beq.n	8005d06 <_malloc_r+0xea>
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	4639      	mov	r1, r7
 8005c72:	4630      	mov	r0, r6
 8005c74:	eb04 0903 	add.w	r9, r4, r3
 8005c78:	f000 fc6c 	bl	8006554 <_sbrk_r>
 8005c7c:	4581      	cmp	r9, r0
 8005c7e:	d142      	bne.n	8005d06 <_malloc_r+0xea>
 8005c80:	6821      	ldr	r1, [r4, #0]
 8005c82:	1a6d      	subs	r5, r5, r1
 8005c84:	4629      	mov	r1, r5
 8005c86:	4630      	mov	r0, r6
 8005c88:	f7ff ffa6 	bl	8005bd8 <sbrk_aligned>
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d03a      	beq.n	8005d06 <_malloc_r+0xea>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	442b      	add	r3, r5
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	f8d8 3000 	ldr.w	r3, [r8]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	bb62      	cbnz	r2, 8005cf8 <_malloc_r+0xdc>
 8005c9e:	f8c8 7000 	str.w	r7, [r8]
 8005ca2:	e00f      	b.n	8005cc4 <_malloc_r+0xa8>
 8005ca4:	6822      	ldr	r2, [r4, #0]
 8005ca6:	1b52      	subs	r2, r2, r5
 8005ca8:	d420      	bmi.n	8005cec <_malloc_r+0xd0>
 8005caa:	2a0b      	cmp	r2, #11
 8005cac:	d917      	bls.n	8005cde <_malloc_r+0xc2>
 8005cae:	1961      	adds	r1, r4, r5
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	6025      	str	r5, [r4, #0]
 8005cb4:	bf18      	it	ne
 8005cb6:	6059      	strne	r1, [r3, #4]
 8005cb8:	6863      	ldr	r3, [r4, #4]
 8005cba:	bf08      	it	eq
 8005cbc:	f8c8 1000 	streq.w	r1, [r8]
 8005cc0:	5162      	str	r2, [r4, r5]
 8005cc2:	604b      	str	r3, [r1, #4]
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f000 f82f 	bl	8005d28 <__malloc_unlock>
 8005cca:	f104 000b 	add.w	r0, r4, #11
 8005cce:	1d23      	adds	r3, r4, #4
 8005cd0:	f020 0007 	bic.w	r0, r0, #7
 8005cd4:	1ac2      	subs	r2, r0, r3
 8005cd6:	bf1c      	itt	ne
 8005cd8:	1a1b      	subne	r3, r3, r0
 8005cda:	50a3      	strne	r3, [r4, r2]
 8005cdc:	e7af      	b.n	8005c3e <_malloc_r+0x22>
 8005cde:	6862      	ldr	r2, [r4, #4]
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	bf0c      	ite	eq
 8005ce4:	f8c8 2000 	streq.w	r2, [r8]
 8005ce8:	605a      	strne	r2, [r3, #4]
 8005cea:	e7eb      	b.n	8005cc4 <_malloc_r+0xa8>
 8005cec:	4623      	mov	r3, r4
 8005cee:	6864      	ldr	r4, [r4, #4]
 8005cf0:	e7ae      	b.n	8005c50 <_malloc_r+0x34>
 8005cf2:	463c      	mov	r4, r7
 8005cf4:	687f      	ldr	r7, [r7, #4]
 8005cf6:	e7b6      	b.n	8005c66 <_malloc_r+0x4a>
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d1fb      	bne.n	8005cf8 <_malloc_r+0xdc>
 8005d00:	2300      	movs	r3, #0
 8005d02:	6053      	str	r3, [r2, #4]
 8005d04:	e7de      	b.n	8005cc4 <_malloc_r+0xa8>
 8005d06:	230c      	movs	r3, #12
 8005d08:	6033      	str	r3, [r6, #0]
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f000 f80c 	bl	8005d28 <__malloc_unlock>
 8005d10:	e794      	b.n	8005c3c <_malloc_r+0x20>
 8005d12:	6005      	str	r5, [r0, #0]
 8005d14:	e7d6      	b.n	8005cc4 <_malloc_r+0xa8>
 8005d16:	bf00      	nop
 8005d18:	2000038c 	.word	0x2000038c

08005d1c <__malloc_lock>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	@ (8005d24 <__malloc_lock+0x8>)
 8005d1e:	f7ff bf0e 	b.w	8005b3e <__retarget_lock_acquire_recursive>
 8005d22:	bf00      	nop
 8005d24:	20000384 	.word	0x20000384

08005d28 <__malloc_unlock>:
 8005d28:	4801      	ldr	r0, [pc, #4]	@ (8005d30 <__malloc_unlock+0x8>)
 8005d2a:	f7ff bf09 	b.w	8005b40 <__retarget_lock_release_recursive>
 8005d2e:	bf00      	nop
 8005d30:	20000384 	.word	0x20000384

08005d34 <__sfputc_r>:
 8005d34:	6893      	ldr	r3, [r2, #8]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	b410      	push	{r4}
 8005d3c:	6093      	str	r3, [r2, #8]
 8005d3e:	da08      	bge.n	8005d52 <__sfputc_r+0x1e>
 8005d40:	6994      	ldr	r4, [r2, #24]
 8005d42:	42a3      	cmp	r3, r4
 8005d44:	db01      	blt.n	8005d4a <__sfputc_r+0x16>
 8005d46:	290a      	cmp	r1, #10
 8005d48:	d103      	bne.n	8005d52 <__sfputc_r+0x1e>
 8005d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d4e:	f000 bb6d 	b.w	800642c <__swbuf_r>
 8005d52:	6813      	ldr	r3, [r2, #0]
 8005d54:	1c58      	adds	r0, r3, #1
 8005d56:	6010      	str	r0, [r2, #0]
 8005d58:	7019      	strb	r1, [r3, #0]
 8005d5a:	4608      	mov	r0, r1
 8005d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <__sfputs_r>:
 8005d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d64:	4606      	mov	r6, r0
 8005d66:	460f      	mov	r7, r1
 8005d68:	4614      	mov	r4, r2
 8005d6a:	18d5      	adds	r5, r2, r3
 8005d6c:	42ac      	cmp	r4, r5
 8005d6e:	d101      	bne.n	8005d74 <__sfputs_r+0x12>
 8005d70:	2000      	movs	r0, #0
 8005d72:	e007      	b.n	8005d84 <__sfputs_r+0x22>
 8005d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d78:	463a      	mov	r2, r7
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	f7ff ffda 	bl	8005d34 <__sfputc_r>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d1f3      	bne.n	8005d6c <__sfputs_r+0xa>
 8005d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d88 <_vfiprintf_r>:
 8005d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8c:	460d      	mov	r5, r1
 8005d8e:	b09d      	sub	sp, #116	@ 0x74
 8005d90:	4614      	mov	r4, r2
 8005d92:	4698      	mov	r8, r3
 8005d94:	4606      	mov	r6, r0
 8005d96:	b118      	cbz	r0, 8005da0 <_vfiprintf_r+0x18>
 8005d98:	6a03      	ldr	r3, [r0, #32]
 8005d9a:	b90b      	cbnz	r3, 8005da0 <_vfiprintf_r+0x18>
 8005d9c:	f7ff fdca 	bl	8005934 <__sinit>
 8005da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005da2:	07d9      	lsls	r1, r3, #31
 8005da4:	d405      	bmi.n	8005db2 <_vfiprintf_r+0x2a>
 8005da6:	89ab      	ldrh	r3, [r5, #12]
 8005da8:	059a      	lsls	r2, r3, #22
 8005daa:	d402      	bmi.n	8005db2 <_vfiprintf_r+0x2a>
 8005dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dae:	f7ff fec6 	bl	8005b3e <__retarget_lock_acquire_recursive>
 8005db2:	89ab      	ldrh	r3, [r5, #12]
 8005db4:	071b      	lsls	r3, r3, #28
 8005db6:	d501      	bpl.n	8005dbc <_vfiprintf_r+0x34>
 8005db8:	692b      	ldr	r3, [r5, #16]
 8005dba:	b99b      	cbnz	r3, 8005de4 <_vfiprintf_r+0x5c>
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f000 fb72 	bl	80064a8 <__swsetup_r>
 8005dc4:	b170      	cbz	r0, 8005de4 <_vfiprintf_r+0x5c>
 8005dc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dc8:	07dc      	lsls	r4, r3, #31
 8005dca:	d504      	bpl.n	8005dd6 <_vfiprintf_r+0x4e>
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	b01d      	add	sp, #116	@ 0x74
 8005dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	89ab      	ldrh	r3, [r5, #12]
 8005dd8:	0598      	lsls	r0, r3, #22
 8005dda:	d4f7      	bmi.n	8005dcc <_vfiprintf_r+0x44>
 8005ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dde:	f7ff feaf 	bl	8005b40 <__retarget_lock_release_recursive>
 8005de2:	e7f3      	b.n	8005dcc <_vfiprintf_r+0x44>
 8005de4:	2300      	movs	r3, #0
 8005de6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de8:	2320      	movs	r3, #32
 8005dea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8005df2:	2330      	movs	r3, #48	@ 0x30
 8005df4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fa4 <_vfiprintf_r+0x21c>
 8005df8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dfc:	f04f 0901 	mov.w	r9, #1
 8005e00:	4623      	mov	r3, r4
 8005e02:	469a      	mov	sl, r3
 8005e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e08:	b10a      	cbz	r2, 8005e0e <_vfiprintf_r+0x86>
 8005e0a:	2a25      	cmp	r2, #37	@ 0x25
 8005e0c:	d1f9      	bne.n	8005e02 <_vfiprintf_r+0x7a>
 8005e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e12:	d00b      	beq.n	8005e2c <_vfiprintf_r+0xa4>
 8005e14:	465b      	mov	r3, fp
 8005e16:	4622      	mov	r2, r4
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f7ff ffa1 	bl	8005d62 <__sfputs_r>
 8005e20:	3001      	adds	r0, #1
 8005e22:	f000 80a7 	beq.w	8005f74 <_vfiprintf_r+0x1ec>
 8005e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e28:	445a      	add	r2, fp
 8005e2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 809f 	beq.w	8005f74 <_vfiprintf_r+0x1ec>
 8005e36:	2300      	movs	r3, #0
 8005e38:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e40:	f10a 0a01 	add.w	sl, sl, #1
 8005e44:	9304      	str	r3, [sp, #16]
 8005e46:	9307      	str	r3, [sp, #28]
 8005e48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e4e:	4654      	mov	r4, sl
 8005e50:	2205      	movs	r2, #5
 8005e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e56:	4853      	ldr	r0, [pc, #332]	@ (8005fa4 <_vfiprintf_r+0x21c>)
 8005e58:	f7fa f9ba 	bl	80001d0 <memchr>
 8005e5c:	9a04      	ldr	r2, [sp, #16]
 8005e5e:	b9d8      	cbnz	r0, 8005e98 <_vfiprintf_r+0x110>
 8005e60:	06d1      	lsls	r1, r2, #27
 8005e62:	bf44      	itt	mi
 8005e64:	2320      	movmi	r3, #32
 8005e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e6a:	0713      	lsls	r3, r2, #28
 8005e6c:	bf44      	itt	mi
 8005e6e:	232b      	movmi	r3, #43	@ 0x2b
 8005e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e74:	f89a 3000 	ldrb.w	r3, [sl]
 8005e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e7a:	d015      	beq.n	8005ea8 <_vfiprintf_r+0x120>
 8005e7c:	9a07      	ldr	r2, [sp, #28]
 8005e7e:	4654      	mov	r4, sl
 8005e80:	2000      	movs	r0, #0
 8005e82:	f04f 0c0a 	mov.w	ip, #10
 8005e86:	4621      	mov	r1, r4
 8005e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e8c:	3b30      	subs	r3, #48	@ 0x30
 8005e8e:	2b09      	cmp	r3, #9
 8005e90:	d94b      	bls.n	8005f2a <_vfiprintf_r+0x1a2>
 8005e92:	b1b0      	cbz	r0, 8005ec2 <_vfiprintf_r+0x13a>
 8005e94:	9207      	str	r2, [sp, #28]
 8005e96:	e014      	b.n	8005ec2 <_vfiprintf_r+0x13a>
 8005e98:	eba0 0308 	sub.w	r3, r0, r8
 8005e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	9304      	str	r3, [sp, #16]
 8005ea4:	46a2      	mov	sl, r4
 8005ea6:	e7d2      	b.n	8005e4e <_vfiprintf_r+0xc6>
 8005ea8:	9b03      	ldr	r3, [sp, #12]
 8005eaa:	1d19      	adds	r1, r3, #4
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	9103      	str	r1, [sp, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bfbb      	ittet	lt
 8005eb4:	425b      	neglt	r3, r3
 8005eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8005eba:	9307      	strge	r3, [sp, #28]
 8005ebc:	9307      	strlt	r3, [sp, #28]
 8005ebe:	bfb8      	it	lt
 8005ec0:	9204      	strlt	r2, [sp, #16]
 8005ec2:	7823      	ldrb	r3, [r4, #0]
 8005ec4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ec6:	d10a      	bne.n	8005ede <_vfiprintf_r+0x156>
 8005ec8:	7863      	ldrb	r3, [r4, #1]
 8005eca:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ecc:	d132      	bne.n	8005f34 <_vfiprintf_r+0x1ac>
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	1d1a      	adds	r2, r3, #4
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	9203      	str	r2, [sp, #12]
 8005ed6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005eda:	3402      	adds	r4, #2
 8005edc:	9305      	str	r3, [sp, #20]
 8005ede:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fb4 <_vfiprintf_r+0x22c>
 8005ee2:	7821      	ldrb	r1, [r4, #0]
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	4650      	mov	r0, sl
 8005ee8:	f7fa f972 	bl	80001d0 <memchr>
 8005eec:	b138      	cbz	r0, 8005efe <_vfiprintf_r+0x176>
 8005eee:	9b04      	ldr	r3, [sp, #16]
 8005ef0:	eba0 000a 	sub.w	r0, r0, sl
 8005ef4:	2240      	movs	r2, #64	@ 0x40
 8005ef6:	4082      	lsls	r2, r0
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	3401      	adds	r4, #1
 8005efc:	9304      	str	r3, [sp, #16]
 8005efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f02:	4829      	ldr	r0, [pc, #164]	@ (8005fa8 <_vfiprintf_r+0x220>)
 8005f04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f08:	2206      	movs	r2, #6
 8005f0a:	f7fa f961 	bl	80001d0 <memchr>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d03f      	beq.n	8005f92 <_vfiprintf_r+0x20a>
 8005f12:	4b26      	ldr	r3, [pc, #152]	@ (8005fac <_vfiprintf_r+0x224>)
 8005f14:	bb1b      	cbnz	r3, 8005f5e <_vfiprintf_r+0x1d6>
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	3307      	adds	r3, #7
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	3308      	adds	r3, #8
 8005f20:	9303      	str	r3, [sp, #12]
 8005f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f24:	443b      	add	r3, r7
 8005f26:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f28:	e76a      	b.n	8005e00 <_vfiprintf_r+0x78>
 8005f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f2e:	460c      	mov	r4, r1
 8005f30:	2001      	movs	r0, #1
 8005f32:	e7a8      	b.n	8005e86 <_vfiprintf_r+0xfe>
 8005f34:	2300      	movs	r3, #0
 8005f36:	3401      	adds	r4, #1
 8005f38:	9305      	str	r3, [sp, #20]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	f04f 0c0a 	mov.w	ip, #10
 8005f40:	4620      	mov	r0, r4
 8005f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f46:	3a30      	subs	r2, #48	@ 0x30
 8005f48:	2a09      	cmp	r2, #9
 8005f4a:	d903      	bls.n	8005f54 <_vfiprintf_r+0x1cc>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0c6      	beq.n	8005ede <_vfiprintf_r+0x156>
 8005f50:	9105      	str	r1, [sp, #20]
 8005f52:	e7c4      	b.n	8005ede <_vfiprintf_r+0x156>
 8005f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f58:	4604      	mov	r4, r0
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e7f0      	b.n	8005f40 <_vfiprintf_r+0x1b8>
 8005f5e:	ab03      	add	r3, sp, #12
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	462a      	mov	r2, r5
 8005f64:	4b12      	ldr	r3, [pc, #72]	@ (8005fb0 <_vfiprintf_r+0x228>)
 8005f66:	a904      	add	r1, sp, #16
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f3af 8000 	nop.w
 8005f6e:	4607      	mov	r7, r0
 8005f70:	1c78      	adds	r0, r7, #1
 8005f72:	d1d6      	bne.n	8005f22 <_vfiprintf_r+0x19a>
 8005f74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f76:	07d9      	lsls	r1, r3, #31
 8005f78:	d405      	bmi.n	8005f86 <_vfiprintf_r+0x1fe>
 8005f7a:	89ab      	ldrh	r3, [r5, #12]
 8005f7c:	059a      	lsls	r2, r3, #22
 8005f7e:	d402      	bmi.n	8005f86 <_vfiprintf_r+0x1fe>
 8005f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f82:	f7ff fddd 	bl	8005b40 <__retarget_lock_release_recursive>
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	065b      	lsls	r3, r3, #25
 8005f8a:	f53f af1f 	bmi.w	8005dcc <_vfiprintf_r+0x44>
 8005f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f90:	e71e      	b.n	8005dd0 <_vfiprintf_r+0x48>
 8005f92:	ab03      	add	r3, sp, #12
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	462a      	mov	r2, r5
 8005f98:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <_vfiprintf_r+0x228>)
 8005f9a:	a904      	add	r1, sp, #16
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f879 	bl	8006094 <_printf_i>
 8005fa2:	e7e4      	b.n	8005f6e <_vfiprintf_r+0x1e6>
 8005fa4:	080066e8 	.word	0x080066e8
 8005fa8:	080066f2 	.word	0x080066f2
 8005fac:	00000000 	.word	0x00000000
 8005fb0:	08005d63 	.word	0x08005d63
 8005fb4:	080066ee 	.word	0x080066ee

08005fb8 <_printf_common>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	4698      	mov	r8, r3
 8005fc0:	688a      	ldr	r2, [r1, #8]
 8005fc2:	690b      	ldr	r3, [r1, #16]
 8005fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	bfb8      	it	lt
 8005fcc:	4613      	movlt	r3, r2
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	b10a      	cbz	r2, 8005fde <_printf_common+0x26>
 8005fda:	3301      	adds	r3, #1
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	0699      	lsls	r1, r3, #26
 8005fe2:	bf42      	ittt	mi
 8005fe4:	6833      	ldrmi	r3, [r6, #0]
 8005fe6:	3302      	addmi	r3, #2
 8005fe8:	6033      	strmi	r3, [r6, #0]
 8005fea:	6825      	ldr	r5, [r4, #0]
 8005fec:	f015 0506 	ands.w	r5, r5, #6
 8005ff0:	d106      	bne.n	8006000 <_printf_common+0x48>
 8005ff2:	f104 0a19 	add.w	sl, r4, #25
 8005ff6:	68e3      	ldr	r3, [r4, #12]
 8005ff8:	6832      	ldr	r2, [r6, #0]
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	42ab      	cmp	r3, r5
 8005ffe:	dc26      	bgt.n	800604e <_printf_common+0x96>
 8006000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	3b00      	subs	r3, #0
 8006008:	bf18      	it	ne
 800600a:	2301      	movne	r3, #1
 800600c:	0692      	lsls	r2, r2, #26
 800600e:	d42b      	bmi.n	8006068 <_printf_common+0xb0>
 8006010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006014:	4641      	mov	r1, r8
 8006016:	4638      	mov	r0, r7
 8006018:	47c8      	blx	r9
 800601a:	3001      	adds	r0, #1
 800601c:	d01e      	beq.n	800605c <_printf_common+0xa4>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	6922      	ldr	r2, [r4, #16]
 8006022:	f003 0306 	and.w	r3, r3, #6
 8006026:	2b04      	cmp	r3, #4
 8006028:	bf02      	ittt	eq
 800602a:	68e5      	ldreq	r5, [r4, #12]
 800602c:	6833      	ldreq	r3, [r6, #0]
 800602e:	1aed      	subeq	r5, r5, r3
 8006030:	68a3      	ldr	r3, [r4, #8]
 8006032:	bf0c      	ite	eq
 8006034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006038:	2500      	movne	r5, #0
 800603a:	4293      	cmp	r3, r2
 800603c:	bfc4      	itt	gt
 800603e:	1a9b      	subgt	r3, r3, r2
 8006040:	18ed      	addgt	r5, r5, r3
 8006042:	2600      	movs	r6, #0
 8006044:	341a      	adds	r4, #26
 8006046:	42b5      	cmp	r5, r6
 8006048:	d11a      	bne.n	8006080 <_printf_common+0xc8>
 800604a:	2000      	movs	r0, #0
 800604c:	e008      	b.n	8006060 <_printf_common+0xa8>
 800604e:	2301      	movs	r3, #1
 8006050:	4652      	mov	r2, sl
 8006052:	4641      	mov	r1, r8
 8006054:	4638      	mov	r0, r7
 8006056:	47c8      	blx	r9
 8006058:	3001      	adds	r0, #1
 800605a:	d103      	bne.n	8006064 <_printf_common+0xac>
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006064:	3501      	adds	r5, #1
 8006066:	e7c6      	b.n	8005ff6 <_printf_common+0x3e>
 8006068:	18e1      	adds	r1, r4, r3
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	2030      	movs	r0, #48	@ 0x30
 800606e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006072:	4422      	add	r2, r4
 8006074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800607c:	3302      	adds	r3, #2
 800607e:	e7c7      	b.n	8006010 <_printf_common+0x58>
 8006080:	2301      	movs	r3, #1
 8006082:	4622      	mov	r2, r4
 8006084:	4641      	mov	r1, r8
 8006086:	4638      	mov	r0, r7
 8006088:	47c8      	blx	r9
 800608a:	3001      	adds	r0, #1
 800608c:	d0e6      	beq.n	800605c <_printf_common+0xa4>
 800608e:	3601      	adds	r6, #1
 8006090:	e7d9      	b.n	8006046 <_printf_common+0x8e>
	...

08006094 <_printf_i>:
 8006094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	7e0f      	ldrb	r7, [r1, #24]
 800609a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800609c:	2f78      	cmp	r7, #120	@ 0x78
 800609e:	4691      	mov	r9, r2
 80060a0:	4680      	mov	r8, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	469a      	mov	sl, r3
 80060a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060aa:	d807      	bhi.n	80060bc <_printf_i+0x28>
 80060ac:	2f62      	cmp	r7, #98	@ 0x62
 80060ae:	d80a      	bhi.n	80060c6 <_printf_i+0x32>
 80060b0:	2f00      	cmp	r7, #0
 80060b2:	f000 80d2 	beq.w	800625a <_printf_i+0x1c6>
 80060b6:	2f58      	cmp	r7, #88	@ 0x58
 80060b8:	f000 80b9 	beq.w	800622e <_printf_i+0x19a>
 80060bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060c4:	e03a      	b.n	800613c <_printf_i+0xa8>
 80060c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ca:	2b15      	cmp	r3, #21
 80060cc:	d8f6      	bhi.n	80060bc <_printf_i+0x28>
 80060ce:	a101      	add	r1, pc, #4	@ (adr r1, 80060d4 <_printf_i+0x40>)
 80060d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	08006141 	.word	0x08006141
 80060dc:	080060bd 	.word	0x080060bd
 80060e0:	080060bd 	.word	0x080060bd
 80060e4:	080060bd 	.word	0x080060bd
 80060e8:	080060bd 	.word	0x080060bd
 80060ec:	08006141 	.word	0x08006141
 80060f0:	080060bd 	.word	0x080060bd
 80060f4:	080060bd 	.word	0x080060bd
 80060f8:	080060bd 	.word	0x080060bd
 80060fc:	080060bd 	.word	0x080060bd
 8006100:	08006241 	.word	0x08006241
 8006104:	0800616b 	.word	0x0800616b
 8006108:	080061fb 	.word	0x080061fb
 800610c:	080060bd 	.word	0x080060bd
 8006110:	080060bd 	.word	0x080060bd
 8006114:	08006263 	.word	0x08006263
 8006118:	080060bd 	.word	0x080060bd
 800611c:	0800616b 	.word	0x0800616b
 8006120:	080060bd 	.word	0x080060bd
 8006124:	080060bd 	.word	0x080060bd
 8006128:	08006203 	.word	0x08006203
 800612c:	6833      	ldr	r3, [r6, #0]
 800612e:	1d1a      	adds	r2, r3, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6032      	str	r2, [r6, #0]
 8006134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800613c:	2301      	movs	r3, #1
 800613e:	e09d      	b.n	800627c <_printf_i+0x1e8>
 8006140:	6833      	ldr	r3, [r6, #0]
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	1d19      	adds	r1, r3, #4
 8006146:	6031      	str	r1, [r6, #0]
 8006148:	0606      	lsls	r6, r0, #24
 800614a:	d501      	bpl.n	8006150 <_printf_i+0xbc>
 800614c:	681d      	ldr	r5, [r3, #0]
 800614e:	e003      	b.n	8006158 <_printf_i+0xc4>
 8006150:	0645      	lsls	r5, r0, #25
 8006152:	d5fb      	bpl.n	800614c <_printf_i+0xb8>
 8006154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006158:	2d00      	cmp	r5, #0
 800615a:	da03      	bge.n	8006164 <_printf_i+0xd0>
 800615c:	232d      	movs	r3, #45	@ 0x2d
 800615e:	426d      	negs	r5, r5
 8006160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006164:	4859      	ldr	r0, [pc, #356]	@ (80062cc <_printf_i+0x238>)
 8006166:	230a      	movs	r3, #10
 8006168:	e011      	b.n	800618e <_printf_i+0xfa>
 800616a:	6821      	ldr	r1, [r4, #0]
 800616c:	6833      	ldr	r3, [r6, #0]
 800616e:	0608      	lsls	r0, r1, #24
 8006170:	f853 5b04 	ldr.w	r5, [r3], #4
 8006174:	d402      	bmi.n	800617c <_printf_i+0xe8>
 8006176:	0649      	lsls	r1, r1, #25
 8006178:	bf48      	it	mi
 800617a:	b2ad      	uxthmi	r5, r5
 800617c:	2f6f      	cmp	r7, #111	@ 0x6f
 800617e:	4853      	ldr	r0, [pc, #332]	@ (80062cc <_printf_i+0x238>)
 8006180:	6033      	str	r3, [r6, #0]
 8006182:	bf14      	ite	ne
 8006184:	230a      	movne	r3, #10
 8006186:	2308      	moveq	r3, #8
 8006188:	2100      	movs	r1, #0
 800618a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800618e:	6866      	ldr	r6, [r4, #4]
 8006190:	60a6      	str	r6, [r4, #8]
 8006192:	2e00      	cmp	r6, #0
 8006194:	bfa2      	ittt	ge
 8006196:	6821      	ldrge	r1, [r4, #0]
 8006198:	f021 0104 	bicge.w	r1, r1, #4
 800619c:	6021      	strge	r1, [r4, #0]
 800619e:	b90d      	cbnz	r5, 80061a4 <_printf_i+0x110>
 80061a0:	2e00      	cmp	r6, #0
 80061a2:	d04b      	beq.n	800623c <_printf_i+0x1a8>
 80061a4:	4616      	mov	r6, r2
 80061a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061aa:	fb03 5711 	mls	r7, r3, r1, r5
 80061ae:	5dc7      	ldrb	r7, [r0, r7]
 80061b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061b4:	462f      	mov	r7, r5
 80061b6:	42bb      	cmp	r3, r7
 80061b8:	460d      	mov	r5, r1
 80061ba:	d9f4      	bls.n	80061a6 <_printf_i+0x112>
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d10b      	bne.n	80061d8 <_printf_i+0x144>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	07df      	lsls	r7, r3, #31
 80061c4:	d508      	bpl.n	80061d8 <_printf_i+0x144>
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	6861      	ldr	r1, [r4, #4]
 80061ca:	4299      	cmp	r1, r3
 80061cc:	bfde      	ittt	le
 80061ce:	2330      	movle	r3, #48	@ 0x30
 80061d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061d8:	1b92      	subs	r2, r2, r6
 80061da:	6122      	str	r2, [r4, #16]
 80061dc:	f8cd a000 	str.w	sl, [sp]
 80061e0:	464b      	mov	r3, r9
 80061e2:	aa03      	add	r2, sp, #12
 80061e4:	4621      	mov	r1, r4
 80061e6:	4640      	mov	r0, r8
 80061e8:	f7ff fee6 	bl	8005fb8 <_printf_common>
 80061ec:	3001      	adds	r0, #1
 80061ee:	d14a      	bne.n	8006286 <_printf_i+0x1f2>
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	b004      	add	sp, #16
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	f043 0320 	orr.w	r3, r3, #32
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	4833      	ldr	r0, [pc, #204]	@ (80062d0 <_printf_i+0x23c>)
 8006204:	2778      	movs	r7, #120	@ 0x78
 8006206:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	6831      	ldr	r1, [r6, #0]
 800620e:	061f      	lsls	r7, r3, #24
 8006210:	f851 5b04 	ldr.w	r5, [r1], #4
 8006214:	d402      	bmi.n	800621c <_printf_i+0x188>
 8006216:	065f      	lsls	r7, r3, #25
 8006218:	bf48      	it	mi
 800621a:	b2ad      	uxthmi	r5, r5
 800621c:	6031      	str	r1, [r6, #0]
 800621e:	07d9      	lsls	r1, r3, #31
 8006220:	bf44      	itt	mi
 8006222:	f043 0320 	orrmi.w	r3, r3, #32
 8006226:	6023      	strmi	r3, [r4, #0]
 8006228:	b11d      	cbz	r5, 8006232 <_printf_i+0x19e>
 800622a:	2310      	movs	r3, #16
 800622c:	e7ac      	b.n	8006188 <_printf_i+0xf4>
 800622e:	4827      	ldr	r0, [pc, #156]	@ (80062cc <_printf_i+0x238>)
 8006230:	e7e9      	b.n	8006206 <_printf_i+0x172>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	f023 0320 	bic.w	r3, r3, #32
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	e7f6      	b.n	800622a <_printf_i+0x196>
 800623c:	4616      	mov	r6, r2
 800623e:	e7bd      	b.n	80061bc <_printf_i+0x128>
 8006240:	6833      	ldr	r3, [r6, #0]
 8006242:	6825      	ldr	r5, [r4, #0]
 8006244:	6961      	ldr	r1, [r4, #20]
 8006246:	1d18      	adds	r0, r3, #4
 8006248:	6030      	str	r0, [r6, #0]
 800624a:	062e      	lsls	r6, r5, #24
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	d501      	bpl.n	8006254 <_printf_i+0x1c0>
 8006250:	6019      	str	r1, [r3, #0]
 8006252:	e002      	b.n	800625a <_printf_i+0x1c6>
 8006254:	0668      	lsls	r0, r5, #25
 8006256:	d5fb      	bpl.n	8006250 <_printf_i+0x1bc>
 8006258:	8019      	strh	r1, [r3, #0]
 800625a:	2300      	movs	r3, #0
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	4616      	mov	r6, r2
 8006260:	e7bc      	b.n	80061dc <_printf_i+0x148>
 8006262:	6833      	ldr	r3, [r6, #0]
 8006264:	1d1a      	adds	r2, r3, #4
 8006266:	6032      	str	r2, [r6, #0]
 8006268:	681e      	ldr	r6, [r3, #0]
 800626a:	6862      	ldr	r2, [r4, #4]
 800626c:	2100      	movs	r1, #0
 800626e:	4630      	mov	r0, r6
 8006270:	f7f9 ffae 	bl	80001d0 <memchr>
 8006274:	b108      	cbz	r0, 800627a <_printf_i+0x1e6>
 8006276:	1b80      	subs	r0, r0, r6
 8006278:	6060      	str	r0, [r4, #4]
 800627a:	6863      	ldr	r3, [r4, #4]
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	2300      	movs	r3, #0
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006284:	e7aa      	b.n	80061dc <_printf_i+0x148>
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	4632      	mov	r2, r6
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	47d0      	blx	sl
 8006290:	3001      	adds	r0, #1
 8006292:	d0ad      	beq.n	80061f0 <_printf_i+0x15c>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	079b      	lsls	r3, r3, #30
 8006298:	d413      	bmi.n	80062c2 <_printf_i+0x22e>
 800629a:	68e0      	ldr	r0, [r4, #12]
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	4298      	cmp	r0, r3
 80062a0:	bfb8      	it	lt
 80062a2:	4618      	movlt	r0, r3
 80062a4:	e7a6      	b.n	80061f4 <_printf_i+0x160>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4632      	mov	r2, r6
 80062aa:	4649      	mov	r1, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	47d0      	blx	sl
 80062b0:	3001      	adds	r0, #1
 80062b2:	d09d      	beq.n	80061f0 <_printf_i+0x15c>
 80062b4:	3501      	adds	r5, #1
 80062b6:	68e3      	ldr	r3, [r4, #12]
 80062b8:	9903      	ldr	r1, [sp, #12]
 80062ba:	1a5b      	subs	r3, r3, r1
 80062bc:	42ab      	cmp	r3, r5
 80062be:	dcf2      	bgt.n	80062a6 <_printf_i+0x212>
 80062c0:	e7eb      	b.n	800629a <_printf_i+0x206>
 80062c2:	2500      	movs	r5, #0
 80062c4:	f104 0619 	add.w	r6, r4, #25
 80062c8:	e7f5      	b.n	80062b6 <_printf_i+0x222>
 80062ca:	bf00      	nop
 80062cc:	080066f9 	.word	0x080066f9
 80062d0:	0800670a 	.word	0x0800670a

080062d4 <__sflush_r>:
 80062d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062dc:	0716      	lsls	r6, r2, #28
 80062de:	4605      	mov	r5, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	d454      	bmi.n	800638e <__sflush_r+0xba>
 80062e4:	684b      	ldr	r3, [r1, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	dc02      	bgt.n	80062f0 <__sflush_r+0x1c>
 80062ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	dd48      	ble.n	8006382 <__sflush_r+0xae>
 80062f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062f2:	2e00      	cmp	r6, #0
 80062f4:	d045      	beq.n	8006382 <__sflush_r+0xae>
 80062f6:	2300      	movs	r3, #0
 80062f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062fc:	682f      	ldr	r7, [r5, #0]
 80062fe:	6a21      	ldr	r1, [r4, #32]
 8006300:	602b      	str	r3, [r5, #0]
 8006302:	d030      	beq.n	8006366 <__sflush_r+0x92>
 8006304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	0759      	lsls	r1, r3, #29
 800630a:	d505      	bpl.n	8006318 <__sflush_r+0x44>
 800630c:	6863      	ldr	r3, [r4, #4]
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006312:	b10b      	cbz	r3, 8006318 <__sflush_r+0x44>
 8006314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006316:	1ad2      	subs	r2, r2, r3
 8006318:	2300      	movs	r3, #0
 800631a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800631c:	6a21      	ldr	r1, [r4, #32]
 800631e:	4628      	mov	r0, r5
 8006320:	47b0      	blx	r6
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	89a3      	ldrh	r3, [r4, #12]
 8006326:	d106      	bne.n	8006336 <__sflush_r+0x62>
 8006328:	6829      	ldr	r1, [r5, #0]
 800632a:	291d      	cmp	r1, #29
 800632c:	d82b      	bhi.n	8006386 <__sflush_r+0xb2>
 800632e:	4a2a      	ldr	r2, [pc, #168]	@ (80063d8 <__sflush_r+0x104>)
 8006330:	410a      	asrs	r2, r1
 8006332:	07d6      	lsls	r6, r2, #31
 8006334:	d427      	bmi.n	8006386 <__sflush_r+0xb2>
 8006336:	2200      	movs	r2, #0
 8006338:	6062      	str	r2, [r4, #4]
 800633a:	04d9      	lsls	r1, r3, #19
 800633c:	6922      	ldr	r2, [r4, #16]
 800633e:	6022      	str	r2, [r4, #0]
 8006340:	d504      	bpl.n	800634c <__sflush_r+0x78>
 8006342:	1c42      	adds	r2, r0, #1
 8006344:	d101      	bne.n	800634a <__sflush_r+0x76>
 8006346:	682b      	ldr	r3, [r5, #0]
 8006348:	b903      	cbnz	r3, 800634c <__sflush_r+0x78>
 800634a:	6560      	str	r0, [r4, #84]	@ 0x54
 800634c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800634e:	602f      	str	r7, [r5, #0]
 8006350:	b1b9      	cbz	r1, 8006382 <__sflush_r+0xae>
 8006352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006356:	4299      	cmp	r1, r3
 8006358:	d002      	beq.n	8006360 <__sflush_r+0x8c>
 800635a:	4628      	mov	r0, r5
 800635c:	f7ff fbf2 	bl	8005b44 <_free_r>
 8006360:	2300      	movs	r3, #0
 8006362:	6363      	str	r3, [r4, #52]	@ 0x34
 8006364:	e00d      	b.n	8006382 <__sflush_r+0xae>
 8006366:	2301      	movs	r3, #1
 8006368:	4628      	mov	r0, r5
 800636a:	47b0      	blx	r6
 800636c:	4602      	mov	r2, r0
 800636e:	1c50      	adds	r0, r2, #1
 8006370:	d1c9      	bne.n	8006306 <__sflush_r+0x32>
 8006372:	682b      	ldr	r3, [r5, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0c6      	beq.n	8006306 <__sflush_r+0x32>
 8006378:	2b1d      	cmp	r3, #29
 800637a:	d001      	beq.n	8006380 <__sflush_r+0xac>
 800637c:	2b16      	cmp	r3, #22
 800637e:	d11e      	bne.n	80063be <__sflush_r+0xea>
 8006380:	602f      	str	r7, [r5, #0]
 8006382:	2000      	movs	r0, #0
 8006384:	e022      	b.n	80063cc <__sflush_r+0xf8>
 8006386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800638a:	b21b      	sxth	r3, r3
 800638c:	e01b      	b.n	80063c6 <__sflush_r+0xf2>
 800638e:	690f      	ldr	r7, [r1, #16]
 8006390:	2f00      	cmp	r7, #0
 8006392:	d0f6      	beq.n	8006382 <__sflush_r+0xae>
 8006394:	0793      	lsls	r3, r2, #30
 8006396:	680e      	ldr	r6, [r1, #0]
 8006398:	bf08      	it	eq
 800639a:	694b      	ldreq	r3, [r1, #20]
 800639c:	600f      	str	r7, [r1, #0]
 800639e:	bf18      	it	ne
 80063a0:	2300      	movne	r3, #0
 80063a2:	eba6 0807 	sub.w	r8, r6, r7
 80063a6:	608b      	str	r3, [r1, #8]
 80063a8:	f1b8 0f00 	cmp.w	r8, #0
 80063ac:	dde9      	ble.n	8006382 <__sflush_r+0xae>
 80063ae:	6a21      	ldr	r1, [r4, #32]
 80063b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063b2:	4643      	mov	r3, r8
 80063b4:	463a      	mov	r2, r7
 80063b6:	4628      	mov	r0, r5
 80063b8:	47b0      	blx	r6
 80063ba:	2800      	cmp	r0, #0
 80063bc:	dc08      	bgt.n	80063d0 <__sflush_r+0xfc>
 80063be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063c6:	81a3      	strh	r3, [r4, #12]
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d0:	4407      	add	r7, r0
 80063d2:	eba8 0800 	sub.w	r8, r8, r0
 80063d6:	e7e7      	b.n	80063a8 <__sflush_r+0xd4>
 80063d8:	dfbffffe 	.word	0xdfbffffe

080063dc <_fflush_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	690b      	ldr	r3, [r1, #16]
 80063e0:	4605      	mov	r5, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	b913      	cbnz	r3, 80063ec <_fflush_r+0x10>
 80063e6:	2500      	movs	r5, #0
 80063e8:	4628      	mov	r0, r5
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	b118      	cbz	r0, 80063f6 <_fflush_r+0x1a>
 80063ee:	6a03      	ldr	r3, [r0, #32]
 80063f0:	b90b      	cbnz	r3, 80063f6 <_fflush_r+0x1a>
 80063f2:	f7ff fa9f 	bl	8005934 <__sinit>
 80063f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0f3      	beq.n	80063e6 <_fflush_r+0xa>
 80063fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006400:	07d0      	lsls	r0, r2, #31
 8006402:	d404      	bmi.n	800640e <_fflush_r+0x32>
 8006404:	0599      	lsls	r1, r3, #22
 8006406:	d402      	bmi.n	800640e <_fflush_r+0x32>
 8006408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800640a:	f7ff fb98 	bl	8005b3e <__retarget_lock_acquire_recursive>
 800640e:	4628      	mov	r0, r5
 8006410:	4621      	mov	r1, r4
 8006412:	f7ff ff5f 	bl	80062d4 <__sflush_r>
 8006416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006418:	07da      	lsls	r2, r3, #31
 800641a:	4605      	mov	r5, r0
 800641c:	d4e4      	bmi.n	80063e8 <_fflush_r+0xc>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	059b      	lsls	r3, r3, #22
 8006422:	d4e1      	bmi.n	80063e8 <_fflush_r+0xc>
 8006424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006426:	f7ff fb8b 	bl	8005b40 <__retarget_lock_release_recursive>
 800642a:	e7dd      	b.n	80063e8 <_fflush_r+0xc>

0800642c <__swbuf_r>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	460e      	mov	r6, r1
 8006430:	4614      	mov	r4, r2
 8006432:	4605      	mov	r5, r0
 8006434:	b118      	cbz	r0, 800643e <__swbuf_r+0x12>
 8006436:	6a03      	ldr	r3, [r0, #32]
 8006438:	b90b      	cbnz	r3, 800643e <__swbuf_r+0x12>
 800643a:	f7ff fa7b 	bl	8005934 <__sinit>
 800643e:	69a3      	ldr	r3, [r4, #24]
 8006440:	60a3      	str	r3, [r4, #8]
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	071a      	lsls	r2, r3, #28
 8006446:	d501      	bpl.n	800644c <__swbuf_r+0x20>
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	b943      	cbnz	r3, 800645e <__swbuf_r+0x32>
 800644c:	4621      	mov	r1, r4
 800644e:	4628      	mov	r0, r5
 8006450:	f000 f82a 	bl	80064a8 <__swsetup_r>
 8006454:	b118      	cbz	r0, 800645e <__swbuf_r+0x32>
 8006456:	f04f 37ff 	mov.w	r7, #4294967295
 800645a:	4638      	mov	r0, r7
 800645c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	6922      	ldr	r2, [r4, #16]
 8006462:	1a98      	subs	r0, r3, r2
 8006464:	6963      	ldr	r3, [r4, #20]
 8006466:	b2f6      	uxtb	r6, r6
 8006468:	4283      	cmp	r3, r0
 800646a:	4637      	mov	r7, r6
 800646c:	dc05      	bgt.n	800647a <__swbuf_r+0x4e>
 800646e:	4621      	mov	r1, r4
 8006470:	4628      	mov	r0, r5
 8006472:	f7ff ffb3 	bl	80063dc <_fflush_r>
 8006476:	2800      	cmp	r0, #0
 8006478:	d1ed      	bne.n	8006456 <__swbuf_r+0x2a>
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	3b01      	subs	r3, #1
 800647e:	60a3      	str	r3, [r4, #8]
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	6022      	str	r2, [r4, #0]
 8006486:	701e      	strb	r6, [r3, #0]
 8006488:	6962      	ldr	r2, [r4, #20]
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	429a      	cmp	r2, r3
 800648e:	d004      	beq.n	800649a <__swbuf_r+0x6e>
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	07db      	lsls	r3, r3, #31
 8006494:	d5e1      	bpl.n	800645a <__swbuf_r+0x2e>
 8006496:	2e0a      	cmp	r6, #10
 8006498:	d1df      	bne.n	800645a <__swbuf_r+0x2e>
 800649a:	4621      	mov	r1, r4
 800649c:	4628      	mov	r0, r5
 800649e:	f7ff ff9d 	bl	80063dc <_fflush_r>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d0d9      	beq.n	800645a <__swbuf_r+0x2e>
 80064a6:	e7d6      	b.n	8006456 <__swbuf_r+0x2a>

080064a8 <__swsetup_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4b29      	ldr	r3, [pc, #164]	@ (8006550 <__swsetup_r+0xa8>)
 80064ac:	4605      	mov	r5, r0
 80064ae:	6818      	ldr	r0, [r3, #0]
 80064b0:	460c      	mov	r4, r1
 80064b2:	b118      	cbz	r0, 80064bc <__swsetup_r+0x14>
 80064b4:	6a03      	ldr	r3, [r0, #32]
 80064b6:	b90b      	cbnz	r3, 80064bc <__swsetup_r+0x14>
 80064b8:	f7ff fa3c 	bl	8005934 <__sinit>
 80064bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c0:	0719      	lsls	r1, r3, #28
 80064c2:	d422      	bmi.n	800650a <__swsetup_r+0x62>
 80064c4:	06da      	lsls	r2, r3, #27
 80064c6:	d407      	bmi.n	80064d8 <__swsetup_r+0x30>
 80064c8:	2209      	movs	r2, #9
 80064ca:	602a      	str	r2, [r5, #0]
 80064cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d0:	81a3      	strh	r3, [r4, #12]
 80064d2:	f04f 30ff 	mov.w	r0, #4294967295
 80064d6:	e033      	b.n	8006540 <__swsetup_r+0x98>
 80064d8:	0758      	lsls	r0, r3, #29
 80064da:	d512      	bpl.n	8006502 <__swsetup_r+0x5a>
 80064dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064de:	b141      	cbz	r1, 80064f2 <__swsetup_r+0x4a>
 80064e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064e4:	4299      	cmp	r1, r3
 80064e6:	d002      	beq.n	80064ee <__swsetup_r+0x46>
 80064e8:	4628      	mov	r0, r5
 80064ea:	f7ff fb2b 	bl	8005b44 <_free_r>
 80064ee:	2300      	movs	r3, #0
 80064f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	2300      	movs	r3, #0
 80064fc:	6063      	str	r3, [r4, #4]
 80064fe:	6923      	ldr	r3, [r4, #16]
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	f043 0308 	orr.w	r3, r3, #8
 8006508:	81a3      	strh	r3, [r4, #12]
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	b94b      	cbnz	r3, 8006522 <__swsetup_r+0x7a>
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006518:	d003      	beq.n	8006522 <__swsetup_r+0x7a>
 800651a:	4621      	mov	r1, r4
 800651c:	4628      	mov	r0, r5
 800651e:	f000 f84f 	bl	80065c0 <__smakebuf_r>
 8006522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006526:	f013 0201 	ands.w	r2, r3, #1
 800652a:	d00a      	beq.n	8006542 <__swsetup_r+0x9a>
 800652c:	2200      	movs	r2, #0
 800652e:	60a2      	str	r2, [r4, #8]
 8006530:	6962      	ldr	r2, [r4, #20]
 8006532:	4252      	negs	r2, r2
 8006534:	61a2      	str	r2, [r4, #24]
 8006536:	6922      	ldr	r2, [r4, #16]
 8006538:	b942      	cbnz	r2, 800654c <__swsetup_r+0xa4>
 800653a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800653e:	d1c5      	bne.n	80064cc <__swsetup_r+0x24>
 8006540:	bd38      	pop	{r3, r4, r5, pc}
 8006542:	0799      	lsls	r1, r3, #30
 8006544:	bf58      	it	pl
 8006546:	6962      	ldrpl	r2, [r4, #20]
 8006548:	60a2      	str	r2, [r4, #8]
 800654a:	e7f4      	b.n	8006536 <__swsetup_r+0x8e>
 800654c:	2000      	movs	r0, #0
 800654e:	e7f7      	b.n	8006540 <__swsetup_r+0x98>
 8006550:	20000018 	.word	0x20000018

08006554 <_sbrk_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d06      	ldr	r5, [pc, #24]	@ (8006570 <_sbrk_r+0x1c>)
 8006558:	2300      	movs	r3, #0
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	602b      	str	r3, [r5, #0]
 8006560:	f7fa fd7c 	bl	800105c <_sbrk>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_sbrk_r+0x1a>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_sbrk_r+0x1a>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20000380 	.word	0x20000380

08006574 <__swhatbuf_r>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	460c      	mov	r4, r1
 8006578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657c:	2900      	cmp	r1, #0
 800657e:	b096      	sub	sp, #88	@ 0x58
 8006580:	4615      	mov	r5, r2
 8006582:	461e      	mov	r6, r3
 8006584:	da0d      	bge.n	80065a2 <__swhatbuf_r+0x2e>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800658c:	f04f 0100 	mov.w	r1, #0
 8006590:	bf14      	ite	ne
 8006592:	2340      	movne	r3, #64	@ 0x40
 8006594:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006598:	2000      	movs	r0, #0
 800659a:	6031      	str	r1, [r6, #0]
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	b016      	add	sp, #88	@ 0x58
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
 80065a2:	466a      	mov	r2, sp
 80065a4:	f000 f848 	bl	8006638 <_fstat_r>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	dbec      	blt.n	8006586 <__swhatbuf_r+0x12>
 80065ac:	9901      	ldr	r1, [sp, #4]
 80065ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065b6:	4259      	negs	r1, r3
 80065b8:	4159      	adcs	r1, r3
 80065ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065be:	e7eb      	b.n	8006598 <__swhatbuf_r+0x24>

080065c0 <__smakebuf_r>:
 80065c0:	898b      	ldrh	r3, [r1, #12]
 80065c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065c4:	079d      	lsls	r5, r3, #30
 80065c6:	4606      	mov	r6, r0
 80065c8:	460c      	mov	r4, r1
 80065ca:	d507      	bpl.n	80065dc <__smakebuf_r+0x1c>
 80065cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	2301      	movs	r3, #1
 80065d6:	6163      	str	r3, [r4, #20]
 80065d8:	b003      	add	sp, #12
 80065da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065dc:	ab01      	add	r3, sp, #4
 80065de:	466a      	mov	r2, sp
 80065e0:	f7ff ffc8 	bl	8006574 <__swhatbuf_r>
 80065e4:	9f00      	ldr	r7, [sp, #0]
 80065e6:	4605      	mov	r5, r0
 80065e8:	4639      	mov	r1, r7
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff fb16 	bl	8005c1c <_malloc_r>
 80065f0:	b948      	cbnz	r0, 8006606 <__smakebuf_r+0x46>
 80065f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f6:	059a      	lsls	r2, r3, #22
 80065f8:	d4ee      	bmi.n	80065d8 <__smakebuf_r+0x18>
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	f043 0302 	orr.w	r3, r3, #2
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	e7e2      	b.n	80065cc <__smakebuf_r+0xc>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	6020      	str	r0, [r4, #0]
 800660a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660e:	81a3      	strh	r3, [r4, #12]
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006616:	b15b      	cbz	r3, 8006630 <__smakebuf_r+0x70>
 8006618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800661c:	4630      	mov	r0, r6
 800661e:	f000 f81d 	bl	800665c <_isatty_r>
 8006622:	b128      	cbz	r0, 8006630 <__smakebuf_r+0x70>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	f043 0301 	orr.w	r3, r3, #1
 800662e:	81a3      	strh	r3, [r4, #12]
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	431d      	orrs	r5, r3
 8006634:	81a5      	strh	r5, [r4, #12]
 8006636:	e7cf      	b.n	80065d8 <__smakebuf_r+0x18>

08006638 <_fstat_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d07      	ldr	r5, [pc, #28]	@ (8006658 <_fstat_r+0x20>)
 800663c:	2300      	movs	r3, #0
 800663e:	4604      	mov	r4, r0
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	602b      	str	r3, [r5, #0]
 8006646:	f7fa fce0 	bl	800100a <_fstat>
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	d102      	bne.n	8006654 <_fstat_r+0x1c>
 800664e:	682b      	ldr	r3, [r5, #0]
 8006650:	b103      	cbz	r3, 8006654 <_fstat_r+0x1c>
 8006652:	6023      	str	r3, [r4, #0]
 8006654:	bd38      	pop	{r3, r4, r5, pc}
 8006656:	bf00      	nop
 8006658:	20000380 	.word	0x20000380

0800665c <_isatty_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d06      	ldr	r5, [pc, #24]	@ (8006678 <_isatty_r+0x1c>)
 8006660:	2300      	movs	r3, #0
 8006662:	4604      	mov	r4, r0
 8006664:	4608      	mov	r0, r1
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	f7fa fcdf 	bl	800102a <_isatty>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d102      	bne.n	8006676 <_isatty_r+0x1a>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	b103      	cbz	r3, 8006676 <_isatty_r+0x1a>
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	bd38      	pop	{r3, r4, r5, pc}
 8006678:	20000380 	.word	0x20000380

0800667c <_init>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	bf00      	nop
 8006680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006682:	bc08      	pop	{r3}
 8006684:	469e      	mov	lr, r3
 8006686:	4770      	bx	lr

08006688 <_fini>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	bf00      	nop
 800668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668e:	bc08      	pop	{r3}
 8006690:	469e      	mov	lr, r3
 8006692:	4770      	bx	lr
