
6_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08005660  08005660  00006660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058a8  080058a8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  080058a8  080058a8  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058a8  080058a8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058a8  080058a8  000068a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058ac  080058ac  000068ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080058b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000005c  0800590c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  0800590c  00007298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b96a  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cce  00000000  00000000  000129f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000146c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bd  00000000  00000000  00015370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f8c  00000000  00000000  00015d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db8a  00000000  00000000  0003bcb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed0a4  00000000  00000000  00049843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001368e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b48  00000000  00000000  0013692c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0013a474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005648 	.word	0x08005648

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08005648 	.word	0x08005648

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

//Funkcja wywolywana po pojawieniu sie przerwania po przepelnieniu dowolnego licznika
//(Po przepelnieniu licznika wywolywane jest przerwanie)
//Funkcja obslugujaca przerwania po przepelnieniu dowolnego licznika:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

	//Jeżeli przerwanie wywolane zostalo po przepelnieniu sie licznika TIM6:
	if(htim == &htim6) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d104      	bne.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x1a>
		//Miganie dioda opiera sie o timer sprzetowy TIM6 i system przerwan
		//Program glowny nie jest blokowany.
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b74:	2120      	movs	r1, #32
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7a:	f001 f84f 	bl	8001c1c <HAL_GPIO_TogglePin>
	}

	//Jeżeli przerwanie wywolane zostalo po przepelnieniu licznika TIM3:
	if(htim == &htim3) {
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d110      	bne.n	8000ba8 <HAL_TIM_PeriodElapsedCallback+0x44>
		//Zapalenie 3 zewnetrznych diod na plytce stykowej:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2140      	movs	r1, #64	@ 0x40
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8e:	f001 f82d 	bl	8001bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2180      	movs	r1, #128	@ 0x80
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9a:	f001 f827 	bl	8001bec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ba4:	f001 f822 	bl	8001bec <HAL_GPIO_WritePin>
	}

}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000110 	.word	0x20000110
 8000bb4:	20000078 	.word	0x20000078
 8000bb8:	48000400 	.word	0x48000400

08000bbc <HAL_TIM_OC_DelayElapsedCallback>:

//Funkcja obslugujaca przerwania generowanych przez poszczzegolne kanaly licznika
//(po przepelnieniu danego kanalu licznika):
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

	//Jezeli przerwanie zostalo wywolane przez kanaly licznika TIM3
	if(htim == &htim3) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a14      	ldr	r2, [pc, #80]	@ (8000c18 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d121      	bne.n	8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x54>
		switch(HAL_TIM_GetActiveChannel(&htim3)) {
 8000bcc:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000bce:	f002 fde8 	bl	80037a2 <HAL_TIM_GetActiveChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d014      	beq.n	8000c02 <HAL_TIM_OC_DelayElapsedCallback+0x46>
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	dc18      	bgt.n	8000c0e <HAL_TIM_OC_DelayElapsedCallback+0x52>
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d002      	beq.n	8000be6 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d007      	beq.n	8000bf4 <HAL_TIM_OC_DelayElapsedCallback+0x38>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_3:
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 8000be4:	e013      	b.n	8000c0e <HAL_TIM_OC_DelayElapsedCallback+0x52>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2140      	movs	r1, #64	@ 0x40
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bee:	f000 fffd 	bl	8001bec <HAL_GPIO_WritePin>
			break;
 8000bf2:	e00d      	b.n	8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x54>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2180      	movs	r1, #128	@ 0x80
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfc:	f000 fff6 	bl	8001bec <HAL_GPIO_WritePin>
			break;
 8000c00:	e006      	b.n	8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x54>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2101      	movs	r1, #1
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000c08:	f000 fff0 	bl	8001bec <HAL_GPIO_WritePin>
			break;
 8000c0c:	e000      	b.n	8000c10 <HAL_TIM_OC_DelayElapsedCallback+0x54>
			break;
 8000c0e:	bf00      	nop
		}
	}
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000078 	.word	0x20000078
 8000c1c:	48000400 	.word	0x48000400

08000c20 <calc_pwm>:

//Obliczanie wartosci wypelnienia pwm do sterowania dioda rgb:
float calc_pwm(float val)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	ed87 0a01 	vstr	s0, [r7, #4]
    const float k = 0.13f;
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <calc_pwm+0x80>)
 8000c2c:	60fb      	str	r3, [r7, #12]
    const float x0 = 70.0f;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <calc_pwm+0x84>)
 8000c30:	60bb      	str	r3, [r7, #8]
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
 8000c32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c36:	eeb1 7a67 	vneg.f32	s14, s15
 8000c3a:	edd7 6a01 	vldr	s13, [r7, #4]
 8000c3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c4a:	ee17 0a90 	vmov	r0, s15
 8000c4e:	f7ff fc1f 	bl	8000490 <__aeabi_f2d>
 8000c52:	4602      	mov	r2, r0
 8000c54:	460b      	mov	r3, r1
 8000c56:	ec43 2b10 	vmov	d0, r2, r3
 8000c5a:	f003 fab9 	bl	80041d0 <exp>
 8000c5e:	ec51 0b10 	vmov	r0, r1, d0
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <calc_pwm+0x88>)
 8000c68:	f7ff fab4 	bl	80001d4 <__adddf3>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	a109      	add	r1, pc, #36	@ (adr r1, 8000c98 <calc_pwm+0x78>)
 8000c72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c76:	f7ff fd8d 	bl	8000794 <__aeabi_ddiv>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	f7ff ff1f 	bl	8000ac4 <__aeabi_d2f>
 8000c86:	4603      	mov	r3, r0
 8000c88:	ee07 3a90 	vmov	s15, r3
}
 8000c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	00000000 	.word	0x00000000
 8000c9c:	40c38800 	.word	0x40c38800
 8000ca0:	3e051eb8 	.word	0x3e051eb8
 8000ca4:	428c0000 	.word	0x428c0000
 8000ca8:	3ff00000 	.word	0x3ff00000

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb2:	f000 fc46 	bl	8001542 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb6:	f000 f8ed 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cba:	f000 faab 	bl	8001214 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000cbe:	f000 fa71 	bl	80011a4 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000cc2:	f000 f949 	bl	8000f58 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cc6:	f000 f9d9 	bl	800107c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //Uruchomienie licznika TIM6:
  HAL_TIM_Base_Start_IT(&htim6);
 8000cca:	486c      	ldr	r0, [pc, #432]	@ (8000e7c <main+0x1d0>)
 8000ccc:	f001 fe64 	bl	8002998 <HAL_TIM_Base_Start_IT>

  //Uruchomienie licznika TIM3:
  HAL_TIM_Base_Start_IT(&htim3);
 8000cd0:	486b      	ldr	r0, [pc, #428]	@ (8000e80 <main+0x1d4>)
 8000cd2:	f001 fe61 	bl	8002998 <HAL_TIM_Base_Start_IT>
  //Uruchomienie kanalow licznika TIM3 w trybie przerwan (przerwania sa obslugiwane w funkcji
  //HAL_TIM_OC_DelayElapsedCallback:
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4869      	ldr	r0, [pc, #420]	@ (8000e80 <main+0x1d4>)
 8000cda:	f001 ff2f 	bl	8002b3c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000cde:	2104      	movs	r1, #4
 8000ce0:	4867      	ldr	r0, [pc, #412]	@ (8000e80 <main+0x1d4>)
 8000ce2:	f001 ff2b 	bl	8002b3c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	4865      	ldr	r0, [pc, #404]	@ (8000e80 <main+0x1d4>)
 8000cea:	f001 ff27 	bl	8002b3c <HAL_TIM_OC_Start_IT>

  //Uruchomienie licznika TIM4:
  HAL_TIM_Base_Start_IT(&htim4);
 8000cee:	4865      	ldr	r0, [pc, #404]	@ (8000e84 <main+0x1d8>)
 8000cf0:	f001 fe52 	bl	8002998 <HAL_TIM_Base_Start_IT>
  //Uruchomienie kanalow licznika TIM4 w trybie wyjscia PWM (kanaly licznika bezposrednio
  //steruja pinami):
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4863      	ldr	r0, [pc, #396]	@ (8000e84 <main+0x1d8>)
 8000cf8:	f002 f8d6 	bl	8002ea8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4861      	ldr	r0, [pc, #388]	@ (8000e84 <main+0x1d8>)
 8000d00:	f002 f8d2 	bl	8002ea8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000d04:	2108      	movs	r1, #8
 8000d06:	485f      	ldr	r0, [pc, #380]	@ (8000e84 <main+0x1d8>)
 8000d08:	f002 f8ce 	bl	8002ea8 <HAL_TIM_PWM_Start>

  int counter = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float r = 50 * (1.0f + sin(counter / 100.0f));
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	ee07 3a90 	vmov	s15, r3
 8000d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1a:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8000e88 <main+0x1dc>
 8000d1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d22:	ee16 0a90 	vmov	r0, s13
 8000d26:	f7ff fbb3 	bl	8000490 <__aeabi_f2d>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	ec43 2b10 	vmov	d0, r2, r3
 8000d32:	f003 fa95 	bl	8004260 <sin>
 8000d36:	ec51 0b10 	vmov	r0, r1, d0
 8000d3a:	f04f 0200 	mov.w	r2, #0
 8000d3e:	4b53      	ldr	r3, [pc, #332]	@ (8000e8c <main+0x1e0>)
 8000d40:	f7ff fa48 	bl	80001d4 <__adddf3>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	4b4f      	ldr	r3, [pc, #316]	@ (8000e90 <main+0x1e4>)
 8000d52:	f7ff fbf5 	bl	8000540 <__aeabi_dmul>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff feb1 	bl	8000ac4 <__aeabi_d2f>
 8000d62:	4603      	mov	r3, r0
 8000d64:	60bb      	str	r3, [r7, #8]
	  float g = 50 * (1.0f + sin(1.5f * counter / 100.0f));
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d70:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d78:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8000e88 <main+0x1dc>
 8000d7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d80:	ee16 0a90 	vmov	r0, s13
 8000d84:	f7ff fb84 	bl	8000490 <__aeabi_f2d>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	ec43 2b10 	vmov	d0, r2, r3
 8000d90:	f003 fa66 	bl	8004260 <sin>
 8000d94:	ec51 0b10 	vmov	r0, r1, d0
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e8c <main+0x1e0>)
 8000d9e:	f7ff fa19 	bl	80001d4 <__adddf3>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4610      	mov	r0, r2
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 0200 	mov.w	r2, #0
 8000dae:	4b38      	ldr	r3, [pc, #224]	@ (8000e90 <main+0x1e4>)
 8000db0:	f7ff fbc6 	bl	8000540 <__aeabi_dmul>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff fe82 	bl	8000ac4 <__aeabi_d2f>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	607b      	str	r3, [r7, #4]
	  float b = 50 * (1.0f + sin(2.0f * counter / 100.0f));
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	ee07 3a90 	vmov	s15, r3
 8000dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000dd2:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000e88 <main+0x1dc>
 8000dd6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000dda:	ee16 0a90 	vmov	r0, s13
 8000dde:	f7ff fb57 	bl	8000490 <__aeabi_f2d>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	ec43 2b10 	vmov	d0, r2, r3
 8000dea:	f003 fa39 	bl	8004260 <sin>
 8000dee:	ec51 0b10 	vmov	r0, r1, d0
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	4b25      	ldr	r3, [pc, #148]	@ (8000e8c <main+0x1e0>)
 8000df8:	f7ff f9ec 	bl	80001d4 <__adddf3>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4610      	mov	r0, r2
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <main+0x1e4>)
 8000e0a:	f7ff fb99 	bl	8000540 <__aeabi_dmul>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4610      	mov	r0, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fe55 	bl	8000ac4 <__aeabi_d2f>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	603b      	str	r3, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, calc_pwm(b));
 8000e1e:	ed97 0a00 	vldr	s0, [r7]
 8000e22:	f7ff fefd 	bl	8000c20 <calc_pwm>
 8000e26:	eef0 7a40 	vmov.f32	s15, s0
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <main+0x1d8>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e32:	ee17 2a90 	vmov	r2, s15
 8000e36:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, calc_pwm(g));
 8000e38:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e3c:	f7ff fef0 	bl	8000c20 <calc_pwm>
 8000e40:	eef0 7a40 	vmov.f32	s15, s0
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <main+0x1d8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e4c:	ee17 2a90 	vmov	r2, s15
 8000e50:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, calc_pwm(r));
 8000e52:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e56:	f7ff fee3 	bl	8000c20 <calc_pwm>
 8000e5a:	eef0 7a40 	vmov.f32	s15, s0
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <main+0x1d8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e66:	ee17 2a90 	vmov	r2, s15
 8000e6a:	63da      	str	r2, [r3, #60]	@ 0x3c

	  HAL_Delay(10);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f000 fbdd 	bl	800162c <HAL_Delay>
	  counter++;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
  {
 8000e78:	bf00      	nop
 8000e7a:	e749      	b.n	8000d10 <main+0x64>
 8000e7c:	20000110 	.word	0x20000110
 8000e80:	20000078 	.word	0x20000078
 8000e84:	200000c4 	.word	0x200000c4
 8000e88:	42c80000 	.word	0x42c80000
 8000e8c:	3ff00000 	.word	0x3ff00000
 8000e90:	40490000 	.word	0x40490000

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b096      	sub	sp, #88	@ 0x58
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	2244      	movs	r2, #68	@ 0x44
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 f960 	bl	8004168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eb6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000eba:	f000 fee7 	bl	8001c8c <HAL_PWREx_ControlVoltageScaling>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ec4:	f000 fa06 	bl	80012d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ec8:	f000 fec2 	bl	8001c50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ecc:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <SystemClock_Config+0xc0>)
 8000ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ed2:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <SystemClock_Config+0xc0>)
 8000ed4:	f023 0318 	bic.w	r3, r3, #24
 8000ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000edc:	2314      	movs	r3, #20
 8000ede:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000eec:	2360      	movs	r3, #96	@ 0x60
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000efc:	2328      	movs	r3, #40	@ 0x28
 8000efe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f00:	2307      	movs	r3, #7
 8000f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 ff11 	bl	8001d38 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f1c:	f000 f9da 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	230f      	movs	r3, #15
 8000f22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f24:	2303      	movs	r3, #3
 8000f26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	2104      	movs	r1, #4
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f001 fad9 	bl	80024f0 <HAL_RCC_ClockConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f44:	f000 f9c6 	bl	80012d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f48:	f001 fcbe 	bl	80028c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f4c:	bf00      	nop
 8000f4e:	3758      	adds	r7, #88	@ 0x58
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000

08000f58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08e      	sub	sp, #56	@ 0x38
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8000f8c:	4a3a      	ldr	r2, [pc, #232]	@ (8001078 <MX_TIM3_Init+0x120>)
 8000f8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000f90:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8000f92:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000f96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b36      	ldr	r3, [pc, #216]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000f9e:	4b35      	ldr	r3, [pc, #212]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8000fa0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b33      	ldr	r3, [pc, #204]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b31      	ldr	r3, [pc, #196]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fb2:	4830      	ldr	r0, [pc, #192]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8000fb4:	f001 fc98 	bl	80028e8 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000fbe:	f000 f989 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4829      	ldr	r0, [pc, #164]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8000fd0:	f002 fb00 	bl	80035d4 <HAL_TIM_ConfigClockSource>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000fda:	f000 f97b 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000fde:	4825      	ldr	r0, [pc, #148]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8000fe0:	f001 fd4a 	bl	8002a78 <HAL_TIM_OC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000fea:	f000 f973 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	481d      	ldr	r0, [pc, #116]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8000ffe:	f003 f80d 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001008:	f000 f964 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800100c:	2300      	movs	r3, #0
 800100e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500;
 8001010:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001014:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	4619      	mov	r1, r3
 8001024:	4813      	ldr	r0, [pc, #76]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8001026:	f002 f947 	bl	80032b8 <HAL_TIM_OC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8001030:	f000 f950 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 8001034:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001038:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	2204      	movs	r2, #4
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <MX_TIM3_Init+0x11c>)
 8001042:	f002 f939 	bl	80032b8 <HAL_TIM_OC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 800104c:	f000 f942 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.Pulse = 7500;
 8001050:	f641 534c 	movw	r3, #7500	@ 0x1d4c
 8001054:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001056:	463b      	mov	r3, r7
 8001058:	2208      	movs	r2, #8
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_TIM3_Init+0x11c>)
 800105e:	f002 f92b 	bl	80032b8 <HAL_TIM_OC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM3_Init+0x114>
  {
    Error_Handler();
 8001068:	f000 f934 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3738      	adds	r7, #56	@ 0x38
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000078 	.word	0x20000078
 8001078:	40000400 	.word	0x40000400

0800107c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	@ 0x38
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010ae:	4b3b      	ldr	r3, [pc, #236]	@ (800119c <MX_TIM4_Init+0x120>)
 80010b0:	4a3b      	ldr	r2, [pc, #236]	@ (80011a0 <MX_TIM4_Init+0x124>)
 80010b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80010b4:	4b39      	ldr	r3, [pc, #228]	@ (800119c <MX_TIM4_Init+0x120>)
 80010b6:	224f      	movs	r2, #79	@ 0x4f
 80010b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b38      	ldr	r3, [pc, #224]	@ (800119c <MX_TIM4_Init+0x120>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80010c0:	4b36      	ldr	r3, [pc, #216]	@ (800119c <MX_TIM4_Init+0x120>)
 80010c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b34      	ldr	r3, [pc, #208]	@ (800119c <MX_TIM4_Init+0x120>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ce:	4b33      	ldr	r3, [pc, #204]	@ (800119c <MX_TIM4_Init+0x120>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010d4:	4831      	ldr	r0, [pc, #196]	@ (800119c <MX_TIM4_Init+0x120>)
 80010d6:	f001 fc07 	bl	80028e8 <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80010e0:	f000 f8f8 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ee:	4619      	mov	r1, r3
 80010f0:	482a      	ldr	r0, [pc, #168]	@ (800119c <MX_TIM4_Init+0x120>)
 80010f2:	f002 fa6f 	bl	80035d4 <HAL_TIM_ConfigClockSource>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80010fc:	f000 f8ea 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001100:	4826      	ldr	r0, [pc, #152]	@ (800119c <MX_TIM4_Init+0x120>)
 8001102:	f001 fe6f 	bl	8002de4 <HAL_TIM_PWM_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800110c:	f000 f8e2 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	481f      	ldr	r0, [pc, #124]	@ (800119c <MX_TIM4_Init+0x120>)
 8001120:	f002 ff7c 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800112a:	f000 f8d3 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	2360      	movs	r3, #96	@ 0x60
 8001130:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001132:	2332      	movs	r3, #50	@ 0x32
 8001134:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001136:	2302      	movs	r3, #2
 8001138:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	4815      	ldr	r0, [pc, #84]	@ (800119c <MX_TIM4_Init+0x120>)
 8001146:	f002 f931 	bl	80033ac <HAL_TIM_PWM_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001150:	f000 f8c0 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8001154:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001158:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800115a:	463b      	mov	r3, r7
 800115c:	2204      	movs	r2, #4
 800115e:	4619      	mov	r1, r3
 8001160:	480e      	ldr	r0, [pc, #56]	@ (800119c <MX_TIM4_Init+0x120>)
 8001162:	f002 f923 	bl	80033ac <HAL_TIM_PWM_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 800116c:	f000 f8b2 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8001170:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001174:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	2208      	movs	r2, #8
 800117a:	4619      	mov	r1, r3
 800117c:	4807      	ldr	r0, [pc, #28]	@ (800119c <MX_TIM4_Init+0x120>)
 800117e:	f002 f915 	bl	80033ac <HAL_TIM_PWM_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8001188:	f000 f8a4 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800118c:	4803      	ldr	r0, [pc, #12]	@ (800119c <MX_TIM4_Init+0x120>)
 800118e:	f000 f921 	bl	80013d4 <HAL_TIM_MspPostInit>

}
 8001192:	bf00      	nop
 8001194:	3738      	adds	r7, #56	@ 0x38
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200000c4 	.word	0x200000c4
 80011a0:	40000800 	.word	0x40000800

080011a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011b4:	4b15      	ldr	r3, [pc, #84]	@ (800120c <MX_TIM6_Init+0x68>)
 80011b6:	4a16      	ldr	r2, [pc, #88]	@ (8001210 <MX_TIM6_Init+0x6c>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_TIM6_Init+0x68>)
 80011bc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80011c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <MX_TIM6_Init+0x68>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80011c8:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_TIM6_Init+0x68>)
 80011ca:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_TIM6_Init+0x68>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <MX_TIM6_Init+0x68>)
 80011d8:	f001 fb86 	bl	80028e8 <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011e2:	f000 f877 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <MX_TIM6_Init+0x68>)
 80011f4:	f002 ff12 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80011fe:	f000 f869 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000110 	.word	0x20000110
 8001210:	40001000 	.word	0x40001000

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <MX_GPIO_Init+0xb8>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a27      	ldr	r2, [pc, #156]	@ (80012cc <MX_GPIO_Init+0xb8>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b25      	ldr	r3, [pc, #148]	@ (80012cc <MX_GPIO_Init+0xb8>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	4b22      	ldr	r3, [pc, #136]	@ (80012cc <MX_GPIO_Init+0xb8>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	4a21      	ldr	r2, [pc, #132]	@ (80012cc <MX_GPIO_Init+0xb8>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124e:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <MX_GPIO_Init+0xb8>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <MX_GPIO_Init+0xb8>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	4a1b      	ldr	r2, [pc, #108]	@ (80012cc <MX_GPIO_Init+0xb8>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001266:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <MX_GPIO_Init+0xb8>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	21e0      	movs	r1, #224	@ 0xe0
 8001276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127a:	f000 fcb7 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2101      	movs	r1, #1
 8001282:	4813      	ldr	r0, [pc, #76]	@ (80012d0 <MX_GPIO_Init+0xbc>)
 8001284:	f000 fcb2 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1_Pin|LED2_Pin;
 8001288:	23e0      	movs	r3, #224	@ 0xe0
 800128a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	2301      	movs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a2:	f000 faf9 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4619      	mov	r1, r3
 80012bc:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <MX_GPIO_Init+0xbc>)
 80012be:	f000 faeb 	bl	8001898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000400 	.word	0x48000400

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <Error_Handler+0x8>

080012e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <HAL_MspInit+0x44>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001324 <HAL_MspInit+0x44>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <HAL_MspInit+0x44>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_MspInit+0x44>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001302:	4a08      	ldr	r2, [pc, #32]	@ (8001324 <HAL_MspInit+0x44>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001308:	6593      	str	r3, [r2, #88]	@ 0x58
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_MspInit+0x44>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a23      	ldr	r2, [pc, #140]	@ (80013c4 <HAL_TIM_Base_MspInit+0x9c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d114      	bne.n	8001364 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800133a:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133e:	4a22      	ldr	r2, [pc, #136]	@ (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6593      	str	r3, [r2, #88]	@ 0x58
 8001346:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2109      	movs	r1, #9
 8001356:	201d      	movs	r0, #29
 8001358:	f000 fa67 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800135c:	201d      	movs	r0, #29
 800135e:	f000 fa80 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001362:	e02a      	b.n	80013ba <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a18      	ldr	r2, [pc, #96]	@ (80013cc <HAL_TIM_Base_MspInit+0xa4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10c      	bne.n	8001388 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001372:	4a15      	ldr	r2, [pc, #84]	@ (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6593      	str	r3, [r2, #88]	@ 0x58
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
}
 8001386:	e018      	b.n	80013ba <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a10      	ldr	r2, [pc, #64]	@ (80013d0 <HAL_TIM_Base_MspInit+0xa8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d113      	bne.n	80013ba <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001396:	4a0c      	ldr	r2, [pc, #48]	@ (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 8001398:	f043 0310 	orr.w	r3, r3, #16
 800139c:	6593      	str	r3, [r2, #88]	@ 0x58
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <HAL_TIM_Base_MspInit+0xa0>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	210a      	movs	r1, #10
 80013ae:	2036      	movs	r0, #54	@ 0x36
 80013b0:	f000 fa3b 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013b4:	2036      	movs	r0, #54	@ 0x36
 80013b6:	f000 fa54 	bl	8001862 <HAL_NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40000800 	.word	0x40000800
 80013d0:	40001000 	.word	0x40001000

080013d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <HAL_TIM_MspPostInit+0x64>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d11c      	bne.n	8001430 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_TIM_MspPostInit+0x68>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <HAL_TIM_MspPostInit+0x68>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_TIM_MspPostInit+0x68>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800140e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001412:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001420:	2302      	movs	r3, #2
 8001422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <HAL_TIM_MspPostInit+0x6c>)
 800142c:	f000 fa34 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40000800 	.word	0x40000800
 800143c:	40021000 	.word	0x40021000
 8001440:	48000400 	.word	0x48000400

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <NMI_Handler+0x4>

0800144c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <MemManage_Handler+0x4>

0800145c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <UsageFault_Handler+0x4>

0800146c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149a:	f000 f8a7 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <TIM3_IRQHandler+0x10>)
 80014aa:	f001 fe03 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000078 	.word	0x20000078

080014b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <TIM6_DAC_IRQHandler+0x10>)
 80014be:	f001 fdf9 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000110 	.word	0x20000110

080014cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <SystemInit+0x20>)
 80014d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <SystemInit+0x20>)
 80014d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001528 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f4:	f7ff ffea 	bl	80014cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480c      	ldr	r0, [pc, #48]	@ (800152c <LoopForever+0x6>)
  ldr r1, =_edata
 80014fa:	490d      	ldr	r1, [pc, #52]	@ (8001530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <LoopForever+0xe>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001510:	4c0a      	ldr	r4, [pc, #40]	@ (800153c <LoopForever+0x16>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151e:	f002 fe31 	bl	8004184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001522:	f7ff fbc3 	bl	8000cac <main>

08001526 <LoopForever>:

LoopForever:
    b LoopForever
 8001526:	e7fe      	b.n	8001526 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001528:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001534:	080058b0 	.word	0x080058b0
  ldr r2, =_sbss
 8001538:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800153c:	20000298 	.word	0x20000298

08001540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC1_2_IRQHandler>

08001542 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f000 f961 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001552:	200f      	movs	r0, #15
 8001554:	f000 f80e 	bl	8001574 <HAL_InitTick>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	e001      	b.n	8001568 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001564:	f7ff febc 	bl	80012e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001568:	79fb      	ldrb	r3, [r7, #7]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001580:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <HAL_InitTick+0x6c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d023      	beq.n	80015d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001588:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <HAL_InitTick+0x70>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <HAL_InitTick+0x6c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f96d 	bl	800187e <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10f      	bne.n	80015ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d809      	bhi.n	80015c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f000 f937 	bl	800182a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015bc:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_InitTick+0x74>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e007      	b.n	80015d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e004      	b.n	80015d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
 80015ce:	e001      	b.n	80015d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	2000015c 	.word	0x2000015c

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	2000015c 	.word	0x2000015c

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff ffee 	bl	8001614 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffde 	bl	8001614 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	@ (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	@ (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	@ (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	@ 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	@ 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	e17f      	b.n	8001ba8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2101      	movs	r1, #1
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	4013      	ands	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8171 	beq.w	8001ba2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d005      	beq.n	80018d8 <HAL_GPIO_Init+0x40>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d130      	bne.n	800193a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190e:	2201      	movs	r2, #1
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 0201 	and.w	r2, r3, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b03      	cmp	r3, #3
 8001944:	d118      	bne.n	8001978 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800194c:	2201      	movs	r2, #1
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	f003 0201 	and.w	r2, r3, #1
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b03      	cmp	r3, #3
 8001982:	d017      	beq.n	80019b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d123      	bne.n	8001a08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	6939      	ldr	r1, [r7, #16]
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80ac 	beq.w	8001ba2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc8 <HAL_GPIO_Init+0x330>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001bc8 <HAL_GPIO_Init+0x330>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a56:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc8 <HAL_GPIO_Init+0x330>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a62:	4a5a      	ldr	r2, [pc, #360]	@ (8001bcc <HAL_GPIO_Init+0x334>)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	220f      	movs	r2, #15
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a8c:	d025      	beq.n	8001ada <HAL_GPIO_Init+0x242>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd0 <HAL_GPIO_Init+0x338>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01f      	beq.n	8001ad6 <HAL_GPIO_Init+0x23e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4e      	ldr	r2, [pc, #312]	@ (8001bd4 <HAL_GPIO_Init+0x33c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_GPIO_Init+0x23a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8001bd8 <HAL_GPIO_Init+0x340>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x236>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4c      	ldr	r2, [pc, #304]	@ (8001bdc <HAL_GPIO_Init+0x344>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x232>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4b      	ldr	r2, [pc, #300]	@ (8001be0 <HAL_GPIO_Init+0x348>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x22e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4a      	ldr	r2, [pc, #296]	@ (8001be4 <HAL_GPIO_Init+0x34c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x22a>
 8001abe:	2306      	movs	r3, #6
 8001ac0:	e00c      	b.n	8001adc <HAL_GPIO_Init+0x244>
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	e00a      	b.n	8001adc <HAL_GPIO_Init+0x244>
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	e008      	b.n	8001adc <HAL_GPIO_Init+0x244>
 8001aca:	2304      	movs	r3, #4
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x244>
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e004      	b.n	8001adc <HAL_GPIO_Init+0x244>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e002      	b.n	8001adc <HAL_GPIO_Init+0x244>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_GPIO_Init+0x244>
 8001ada:	2300      	movs	r3, #0
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	f002 0203 	and.w	r2, r2, #3
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	4093      	lsls	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aec:	4937      	ldr	r1, [pc, #220]	@ (8001bcc <HAL_GPIO_Init+0x334>)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001afa:	4b3b      	ldr	r3, [pc, #236]	@ (8001be8 <HAL_GPIO_Init+0x350>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b1e:	4a32      	ldr	r2, [pc, #200]	@ (8001be8 <HAL_GPIO_Init+0x350>)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b24:	4b30      	ldr	r3, [pc, #192]	@ (8001be8 <HAL_GPIO_Init+0x350>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b48:	4a27      	ldr	r2, [pc, #156]	@ (8001be8 <HAL_GPIO_Init+0x350>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b4e:	4b26      	ldr	r3, [pc, #152]	@ (8001be8 <HAL_GPIO_Init+0x350>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b72:	4a1d      	ldr	r2, [pc, #116]	@ (8001be8 <HAL_GPIO_Init+0x350>)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <HAL_GPIO_Init+0x350>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b9c:	4a12      	ldr	r2, [pc, #72]	@ (8001be8 <HAL_GPIO_Init+0x350>)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f47f ae78 	bne.w	80018a8 <HAL_GPIO_Init+0x10>
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	48000400 	.word	0x48000400
 8001bd4:	48000800 	.word	0x48000800
 8001bd8:	48000c00 	.word	0x48000c00
 8001bdc:	48001000 	.word	0x48001000
 8001be0:	48001400 	.word	0x48001400
 8001be4:	48001800 	.word	0x48001800
 8001be8:	40010400 	.word	0x40010400

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4013      	ands	r3, r2
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	43d9      	mvns	r1, r3
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	619a      	str	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40007000 	.word	0x40007000

08001c70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40007000 	.word	0x40007000

08001c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c9a:	d130      	bne.n	8001cfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c9c:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ca8:	d038      	beq.n	8001d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cba:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2232      	movs	r2, #50	@ 0x32
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0c9b      	lsrs	r3, r3, #18
 8001ccc:	3301      	adds	r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd0:	e002      	b.n	8001cd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd8:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ce4:	d102      	bne.n	8001cec <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f2      	bne.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cf8:	d110      	bne.n	8001d1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e00f      	b.n	8001d1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d0a:	d007      	beq.n	8001d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d14:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	20000000 	.word	0x20000000
 8001d34:	431bde83 	.word	0x431bde83

08001d38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e3ca      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4a:	4b97      	ldr	r3, [pc, #604]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d54:	4b94      	ldr	r3, [pc, #592]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80e4 	beq.w	8001f34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <HAL_RCC_OscConfig+0x4a>
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	f040 808b 	bne.w	8001e90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	f040 8087 	bne.w	8001e90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d82:	4b89      	ldr	r3, [pc, #548]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_RCC_OscConfig+0x62>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e3a2      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1a      	ldr	r2, [r3, #32]
 8001d9e:	4b82      	ldr	r3, [pc, #520]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_RCC_OscConfig+0x7c>
 8001daa:	4b7f      	ldr	r3, [pc, #508]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001db2:	e005      	b.n	8001dc0 <HAL_RCC_OscConfig+0x88>
 8001db4:	4b7c      	ldr	r3, [pc, #496]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d223      	bcs.n	8001e0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fd1d 	bl	8002808 <RCC_SetFlashLatencyFromMSIRange>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e383      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd8:	4b73      	ldr	r3, [pc, #460]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a72      	ldr	r2, [pc, #456]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b70      	ldr	r3, [pc, #448]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	496d      	ldr	r1, [pc, #436]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df6:	4b6c      	ldr	r3, [pc, #432]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	4968      	ldr	r1, [pc, #416]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
 8001e0a:	e025      	b.n	8001e58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e0c:	4b66      	ldr	r3, [pc, #408]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a65      	ldr	r2, [pc, #404]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e12:	f043 0308 	orr.w	r3, r3, #8
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b63      	ldr	r3, [pc, #396]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4960      	ldr	r1, [pc, #384]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	495b      	ldr	r1, [pc, #364]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fcdd 	bl	8002808 <RCC_SetFlashLatencyFromMSIRange>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e343      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e58:	f000 fc4a 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b52      	ldr	r3, [pc, #328]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	4950      	ldr	r1, [pc, #320]	@ (8001fac <HAL_RCC_OscConfig+0x274>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
 8001e74:	4a4e      	ldr	r2, [pc, #312]	@ (8001fb0 <HAL_RCC_OscConfig+0x278>)
 8001e76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e78:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb4 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fb79 	bl	8001574 <HAL_InitTick>
 8001e82:	4603      	mov	r3, r0
 8001e84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d052      	beq.n	8001f32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	e327      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d032      	beq.n	8001efe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e98:	4b43      	ldr	r3, [pc, #268]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a42      	ldr	r2, [pc, #264]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fbb6 	bl	8001614 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eac:	f7ff fbb2 	bl	8001614 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e310      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ebe:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eca:	4b37      	ldr	r3, [pc, #220]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a36      	ldr	r2, [pc, #216]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	f043 0308 	orr.w	r3, r3, #8
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b34      	ldr	r3, [pc, #208]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4931      	ldr	r1, [pc, #196]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	492c      	ldr	r1, [pc, #176]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
 8001efc:	e01a      	b.n	8001f34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001efe:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a29      	ldr	r2, [pc, #164]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fb83 	bl	8001614 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f12:	f7ff fb7f 	bl	8001614 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e2dd      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f24:	4b20      	ldr	r3, [pc, #128]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x1da>
 8001f30:	e000      	b.n	8001f34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d074      	beq.n	800202a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x21a>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b0c      	cmp	r3, #12
 8001f4a:	d10e      	bne.n	8001f6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d10b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d064      	beq.n	8002028 <HAL_RCC_OscConfig+0x2f0>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d160      	bne.n	8002028 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e2ba      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x24a>
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	e026      	b.n	8001fd0 <HAL_RCC_OscConfig+0x298>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f8a:	d115      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x280>
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a02      	ldr	r2, [pc, #8]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	e014      	b.n	8001fd0 <HAL_RCC_OscConfig+0x298>
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08005660 	.word	0x08005660
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000004 	.word	0x20000004
 8001fb8:	4ba0      	ldr	r3, [pc, #640]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a9f      	ldr	r2, [pc, #636]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b9d      	ldr	r3, [pc, #628]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a9c      	ldr	r2, [pc, #624]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8001fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fb1c 	bl	8001614 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff fb18 	bl	8001614 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	@ 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e276      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff2:	4b92      	ldr	r3, [pc, #584]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x2a8>
 8001ffe:	e014      	b.n	800202a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7ff fb08 	bl	8001614 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7ff fb04 	bl	8001614 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	@ 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e262      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201a:	4b88      	ldr	r3, [pc, #544]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x2d0>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d060      	beq.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b04      	cmp	r3, #4
 800203a:	d005      	beq.n	8002048 <HAL_RCC_OscConfig+0x310>
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d119      	bne.n	8002076 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d116      	bne.n	8002076 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002048:	4b7c      	ldr	r3, [pc, #496]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_RCC_OscConfig+0x328>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e23f      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	4973      	ldr	r1, [pc, #460]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002074:	e040      	b.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d023      	beq.n	80020c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207e:	4b6f      	ldr	r3, [pc, #444]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6e      	ldr	r2, [pc, #440]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7ff fac3 	bl	8001614 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002092:	f7ff fabf 	bl	8001614 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e21d      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a4:	4b65      	ldr	r3, [pc, #404]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b62      	ldr	r3, [pc, #392]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	495f      	ldr	r1, [pc, #380]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
 80020c4:	e018      	b.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c6:	4b5d      	ldr	r3, [pc, #372]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a5c      	ldr	r2, [pc, #368]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7ff fa9f 	bl	8001614 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020da:	f7ff fa9b 	bl	8001614 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e1f9      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ec:	4b53      	ldr	r3, [pc, #332]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d03c      	beq.n	800217e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01c      	beq.n	8002146 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210c:	4b4b      	ldr	r3, [pc, #300]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002112:	4a4a      	ldr	r2, [pc, #296]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7ff fa7a 	bl	8001614 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002124:	f7ff fa76 	bl	8001614 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e1d4      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002136:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ef      	beq.n	8002124 <HAL_RCC_OscConfig+0x3ec>
 8002144:	e01b      	b.n	800217e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002146:	4b3d      	ldr	r3, [pc, #244]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800214c:	4a3b      	ldr	r2, [pc, #236]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800214e:	f023 0301 	bic.w	r3, r3, #1
 8002152:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7ff fa5d 	bl	8001614 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215e:	f7ff fa59 	bl	8001614 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e1b7      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002170:	4b32      	ldr	r3, [pc, #200]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ef      	bne.n	800215e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80a6 	beq.w	80022d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002190:	4b2a      	ldr	r3, [pc, #168]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10d      	bne.n	80021b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	4b27      	ldr	r3, [pc, #156]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a0:	4a26      	ldr	r2, [pc, #152]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80021a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a8:	4b24      	ldr	r3, [pc, #144]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b8:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <HAL_RCC_OscConfig+0x508>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d118      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <HAL_RCC_OscConfig+0x508>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002240 <HAL_RCC_OscConfig+0x508>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d0:	f7ff fa20 	bl	8001614 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d8:	f7ff fa1c 	bl	8001614 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e17a      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <HAL_RCC_OscConfig+0x508>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d108      	bne.n	8002210 <HAL_RCC_OscConfig+0x4d8>
 80021fe:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002204:	4a0d      	ldr	r2, [pc, #52]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800220e:	e029      	b.n	8002264 <HAL_RCC_OscConfig+0x52c>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d115      	bne.n	8002244 <HAL_RCC_OscConfig+0x50c>
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221e:	4a07      	ldr	r2, [pc, #28]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002228:	4b04      	ldr	r3, [pc, #16]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222e:	4a03      	ldr	r2, [pc, #12]	@ (800223c <HAL_RCC_OscConfig+0x504>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002238:	e014      	b.n	8002264 <HAL_RCC_OscConfig+0x52c>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	40007000 	.word	0x40007000
 8002244:	4b9c      	ldr	r3, [pc, #624]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224a:	4a9b      	ldr	r2, [pc, #620]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002254:	4b98      	ldr	r3, [pc, #608]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225a:	4a97      	ldr	r2, [pc, #604]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d016      	beq.n	800229a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226c:	f7ff f9d2 	bl	8001614 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f7ff f9ce 	bl	8001614 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e12a      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228a:	4b8b      	ldr	r3, [pc, #556]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ed      	beq.n	8002274 <HAL_RCC_OscConfig+0x53c>
 8002298:	e015      	b.n	80022c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229a:	f7ff f9bb 	bl	8001614 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7ff f9b7 	bl	8001614 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e113      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b8:	4b7f      	ldr	r3, [pc, #508]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1ed      	bne.n	80022a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c6:	7ffb      	ldrb	r3, [r7, #31]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d105      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022cc:	4b7a      	ldr	r3, [pc, #488]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	4a79      	ldr	r2, [pc, #484]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 80022d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80fe 	beq.w	80024de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	f040 80d0 	bne.w	800248c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022ec:	4b72      	ldr	r3, [pc, #456]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0203 	and.w	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d130      	bne.n	8002362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	3b01      	subs	r3, #1
 800230c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d127      	bne.n	8002362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800231c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d11f      	bne.n	8002362 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800232c:	2a07      	cmp	r2, #7
 800232e:	bf14      	ite	ne
 8002330:	2201      	movne	r2, #1
 8002332:	2200      	moveq	r2, #0
 8002334:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002336:	4293      	cmp	r3, r2
 8002338:	d113      	bne.n	8002362 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	3b01      	subs	r3, #1
 8002348:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d109      	bne.n	8002362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	3b01      	subs	r3, #1
 800235c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d06e      	beq.n	8002440 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d069      	beq.n	800243c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002368:	4b53      	ldr	r3, [pc, #332]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002374:	4b50      	ldr	r3, [pc, #320]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0ad      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002384:	4b4c      	ldr	r3, [pc, #304]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a4b      	ldr	r2, [pc, #300]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 800238a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800238e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002390:	f7ff f940 	bl	8001614 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff f93c 	bl	8001614 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e09a      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023aa:	4b43      	ldr	r3, [pc, #268]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b6:	4b40      	ldr	r3, [pc, #256]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	4b40      	ldr	r3, [pc, #256]	@ (80024bc <HAL_RCC_OscConfig+0x784>)
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023c6:	3a01      	subs	r2, #1
 80023c8:	0112      	lsls	r2, r2, #4
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023d0:	0212      	lsls	r2, r2, #8
 80023d2:	4311      	orrs	r1, r2
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023d8:	0852      	lsrs	r2, r2, #1
 80023da:	3a01      	subs	r2, #1
 80023dc:	0552      	lsls	r2, r2, #21
 80023de:	4311      	orrs	r1, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023e4:	0852      	lsrs	r2, r2, #1
 80023e6:	3a01      	subs	r2, #1
 80023e8:	0652      	lsls	r2, r2, #25
 80023ea:	4311      	orrs	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023f0:	0912      	lsrs	r2, r2, #4
 80023f2:	0452      	lsls	r2, r2, #17
 80023f4:	430a      	orrs	r2, r1
 80023f6:	4930      	ldr	r1, [pc, #192]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023fc:	4b2e      	ldr	r3, [pc, #184]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2d      	ldr	r2, [pc, #180]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002406:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002408:	4b2b      	ldr	r3, [pc, #172]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a2a      	ldr	r2, [pc, #168]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 800240e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002412:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002414:	f7ff f8fe 	bl	8001614 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff f8fa 	bl	8001614 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e058      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242e:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800243a:	e050      	b.n	80024de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e04f      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002440:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d148      	bne.n	80024de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800244c:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a19      	ldr	r2, [pc, #100]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 8002452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002456:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002458:	4b17      	ldr	r3, [pc, #92]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a16      	ldr	r2, [pc, #88]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 800245e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002462:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002464:	f7ff f8d6 	bl	8001614 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff f8d2 	bl	8001614 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e030      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247e:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x734>
 800248a:	e028      	b.n	80024de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d023      	beq.n	80024da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a08      	ldr	r2, [pc, #32]	@ (80024b8 <HAL_RCC_OscConfig+0x780>)
 8002498:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800249c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7ff f8b9 	bl	8001614 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a4:	e00c      	b.n	80024c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a6:	f7ff f8b5 	bl	8001614 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d905      	bls.n	80024c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e013      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
 80024b8:	40021000 	.word	0x40021000
 80024bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c0:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <HAL_RCC_OscConfig+0x7b0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ec      	bne.n	80024a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <HAL_RCC_OscConfig+0x7b0>)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	4905      	ldr	r1, [pc, #20]	@ (80024e8 <HAL_RCC_OscConfig+0x7b0>)
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_RCC_OscConfig+0x7b4>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
 80024d8:	e001      	b.n	80024de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	feeefffc 	.word	0xfeeefffc

080024f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0e7      	b.n	80026d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b75      	ldr	r3, [pc, #468]	@ (80026dc <HAL_RCC_ClockConfig+0x1ec>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d910      	bls.n	8002534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b72      	ldr	r3, [pc, #456]	@ (80026dc <HAL_RCC_ClockConfig+0x1ec>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 0207 	bic.w	r2, r3, #7
 800251a:	4970      	ldr	r1, [pc, #448]	@ (80026dc <HAL_RCC_ClockConfig+0x1ec>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b6e      	ldr	r3, [pc, #440]	@ (80026dc <HAL_RCC_ClockConfig+0x1ec>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0cf      	b.n	80026d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d010      	beq.n	8002562 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	4b66      	ldr	r3, [pc, #408]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800254c:	429a      	cmp	r2, r3
 800254e:	d908      	bls.n	8002562 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002550:	4b63      	ldr	r3, [pc, #396]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4960      	ldr	r1, [pc, #384]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d04c      	beq.n	8002608 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002576:	4b5a      	ldr	r3, [pc, #360]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d121      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e0a6      	b.n	80026d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258e:	4b54      	ldr	r3, [pc, #336]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d115      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e09a      	b.n	80026d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a6:	4b4e      	ldr	r3, [pc, #312]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e08e      	b.n	80026d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b6:	4b4a      	ldr	r3, [pc, #296]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e086      	b.n	80026d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025c6:	4b46      	ldr	r3, [pc, #280]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f023 0203 	bic.w	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4943      	ldr	r1, [pc, #268]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d8:	f7ff f81c 	bl	8001614 <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e0:	f7ff f818 	bl	8001614 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e06e      	b.n	80026d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	4b3a      	ldr	r3, [pc, #232]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 020c 	and.w	r2, r3, #12
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	429a      	cmp	r2, r3
 8002606:	d1eb      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	4b31      	ldr	r3, [pc, #196]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002620:	429a      	cmp	r2, r3
 8002622:	d208      	bcs.n	8002636 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b2e      	ldr	r3, [pc, #184]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	492b      	ldr	r1, [pc, #172]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002636:	4b29      	ldr	r3, [pc, #164]	@ (80026dc <HAL_RCC_ClockConfig+0x1ec>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d210      	bcs.n	8002666 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002644:	4b25      	ldr	r3, [pc, #148]	@ (80026dc <HAL_RCC_ClockConfig+0x1ec>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 0207 	bic.w	r2, r3, #7
 800264c:	4923      	ldr	r1, [pc, #140]	@ (80026dc <HAL_RCC_ClockConfig+0x1ec>)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002654:	4b21      	ldr	r3, [pc, #132]	@ (80026dc <HAL_RCC_ClockConfig+0x1ec>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e036      	b.n	80026d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002672:	4b1b      	ldr	r3, [pc, #108]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4918      	ldr	r1, [pc, #96]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002680:	4313      	orrs	r3, r2
 8002682:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d009      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002690:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4910      	ldr	r1, [pc, #64]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026a4:	f000 f824 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	490b      	ldr	r1, [pc, #44]	@ (80026e4 <HAL_RCC_ClockConfig+0x1f4>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
 80026c0:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <HAL_RCC_ClockConfig+0x1f8>)
 80026c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026c4:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_RCC_ClockConfig+0x1fc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe ff53 	bl	8001574 <HAL_InitTick>
 80026ce:	4603      	mov	r3, r0
 80026d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80026d2:	7afb      	ldrb	r3, [r7, #11]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40022000 	.word	0x40022000
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08005660 	.word	0x08005660
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fe:	4b3e      	ldr	r3, [pc, #248]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002708:	4b3b      	ldr	r3, [pc, #236]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x34>
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d121      	bne.n	8002762 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d11e      	bne.n	8002762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002724:	4b34      	ldr	r3, [pc, #208]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d107      	bne.n	8002740 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002730:	4b31      	ldr	r3, [pc, #196]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e005      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002740:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800274c:	4a2b      	ldr	r2, [pc, #172]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002754:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10d      	bne.n	8002778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d102      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002768:	4b25      	ldr	r3, [pc, #148]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x110>)
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	e004      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b08      	cmp	r3, #8
 8002772:	d101      	bne.n	8002778 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002774:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x114>)
 8002776:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b0c      	cmp	r3, #12
 800277c:	d134      	bne.n	80027e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800277e:	4b1e      	ldr	r3, [pc, #120]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d003      	beq.n	8002796 <HAL_RCC_GetSysClockFreq+0xa6>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d003      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0xac>
 8002794:	e005      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002796:	4b1a      	ldr	r3, [pc, #104]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x110>)
 8002798:	617b      	str	r3, [r7, #20]
      break;
 800279a:	e005      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800279c:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x114>)
 800279e:	617b      	str	r3, [r7, #20]
      break;
 80027a0:	e002      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	617b      	str	r3, [r7, #20]
      break;
 80027a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027a8:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	3301      	adds	r3, #1
 80027b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	fb03 f202 	mul.w	r2, r3, r2
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	0e5b      	lsrs	r3, r3, #25
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	3301      	adds	r3, #1
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027e8:	69bb      	ldr	r3, [r7, #24]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	@ 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08005670 	.word	0x08005670
 8002800:	00f42400 	.word	0x00f42400
 8002804:	007a1200 	.word	0x007a1200

08002808 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002820:	f7ff fa26 	bl	8001c70 <HAL_PWREx_GetVoltageRange>
 8002824:	6178      	str	r0, [r7, #20]
 8002826:	e014      	b.n	8002852 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002828:	4b25      	ldr	r3, [pc, #148]	@ (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	4a24      	ldr	r2, [pc, #144]	@ (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002832:	6593      	str	r3, [r2, #88]	@ 0x58
 8002834:	4b22      	ldr	r3, [pc, #136]	@ (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002840:	f7ff fa16 	bl	8001c70 <HAL_PWREx_GetVoltageRange>
 8002844:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	4a1d      	ldr	r2, [pc, #116]	@ (80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002850:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002858:	d10b      	bne.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b80      	cmp	r3, #128	@ 0x80
 800285e:	d919      	bls.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2ba0      	cmp	r3, #160	@ 0xa0
 8002864:	d902      	bls.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002866:	2302      	movs	r3, #2
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	e013      	b.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800286c:	2301      	movs	r3, #1
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e010      	b.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b80      	cmp	r3, #128	@ 0x80
 8002876:	d902      	bls.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002878:	2303      	movs	r3, #3
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e00a      	b.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b80      	cmp	r3, #128	@ 0x80
 8002882:	d102      	bne.n	800288a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002884:	2302      	movs	r3, #2
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	e004      	b.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b70      	cmp	r3, #112	@ 0x70
 800288e:	d101      	bne.n	8002894 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002890:	2301      	movs	r3, #1
 8002892:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 0207 	bic.w	r2, r3, #7
 800289c:	4909      	ldr	r1, [pc, #36]	@ (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028a4:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d001      	beq.n	80028b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40022000 	.word	0x40022000

080028c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a04      	ldr	r2, [pc, #16]	@ (80028e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e049      	b.n	800298e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe fd0a 	bl	8001328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f000 ff48 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d001      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e04f      	b.n	8002a50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a23      	ldr	r2, [pc, #140]	@ (8002a5c <HAL_TIM_Base_Start_IT+0xc4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01d      	beq.n	8002a0e <HAL_TIM_Base_Start_IT+0x76>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029da:	d018      	beq.n	8002a0e <HAL_TIM_Base_Start_IT+0x76>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a60 <HAL_TIM_Base_Start_IT+0xc8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_TIM_Base_Start_IT+0x76>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002a64 <HAL_TIM_Base_Start_IT+0xcc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00e      	beq.n	8002a0e <HAL_TIM_Base_Start_IT+0x76>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_TIM_Base_Start_IT+0x76>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a1b      	ldr	r2, [pc, #108]	@ (8002a6c <HAL_TIM_Base_Start_IT+0xd4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d004      	beq.n	8002a0e <HAL_TIM_Base_Start_IT+0x76>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a19      	ldr	r2, [pc, #100]	@ (8002a70 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d115      	bne.n	8002a3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b06      	cmp	r3, #6
 8002a1e:	d015      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0xb4>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a26:	d011      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a38:	e008      	b.n	8002a4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e000      	b.n	8002a4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40000800 	.word	0x40000800
 8002a68:	40000c00 	.word	0x40000c00
 8002a6c:	40013400 	.word	0x40013400
 8002a70:	40014000 	.word	0x40014000
 8002a74:	00010007 	.word	0x00010007

08002a78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e049      	b.n	8002b1e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f841 	bl	8002b26 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 fe80 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_TIM_OC_Start_IT+0x28>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e03c      	b.n	8002bde <HAL_TIM_OC_Start_IT+0xa2>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d109      	bne.n	8002b7e <HAL_TIM_OC_Start_IT+0x42>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	bf14      	ite	ne
 8002b76:	2301      	movne	r3, #1
 8002b78:	2300      	moveq	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	e02f      	b.n	8002bde <HAL_TIM_OC_Start_IT+0xa2>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d109      	bne.n	8002b98 <HAL_TIM_OC_Start_IT+0x5c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e022      	b.n	8002bde <HAL_TIM_OC_Start_IT+0xa2>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d109      	bne.n	8002bb2 <HAL_TIM_OC_Start_IT+0x76>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	e015      	b.n	8002bde <HAL_TIM_OC_Start_IT+0xa2>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d109      	bne.n	8002bcc <HAL_TIM_OC_Start_IT+0x90>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	e008      	b.n	8002bde <HAL_TIM_OC_Start_IT+0xa2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0e7      	b.n	8002db6 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_TIM_OC_Start_IT+0xba>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bf4:	e023      	b.n	8002c3e <HAL_TIM_OC_Start_IT+0x102>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_OC_Start_IT+0xca>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c04:	e01b      	b.n	8002c3e <HAL_TIM_OC_Start_IT+0x102>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_OC_Start_IT+0xda>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c14:	e013      	b.n	8002c3e <HAL_TIM_OC_Start_IT+0x102>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	d104      	bne.n	8002c26 <HAL_TIM_OC_Start_IT+0xea>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c24:	e00b      	b.n	8002c3e <HAL_TIM_OC_Start_IT+0x102>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d104      	bne.n	8002c36 <HAL_TIM_OC_Start_IT+0xfa>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c34:	e003      	b.n	8002c3e <HAL_TIM_OC_Start_IT+0x102>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d841      	bhi.n	8002cc8 <HAL_TIM_OC_Start_IT+0x18c>
 8002c44:	a201      	add	r2, pc, #4	@ (adr r2, 8002c4c <HAL_TIM_OC_Start_IT+0x110>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	08002c81 	.word	0x08002c81
 8002c50:	08002cc9 	.word	0x08002cc9
 8002c54:	08002cc9 	.word	0x08002cc9
 8002c58:	08002cc9 	.word	0x08002cc9
 8002c5c:	08002c93 	.word	0x08002c93
 8002c60:	08002cc9 	.word	0x08002cc9
 8002c64:	08002cc9 	.word	0x08002cc9
 8002c68:	08002cc9 	.word	0x08002cc9
 8002c6c:	08002ca5 	.word	0x08002ca5
 8002c70:	08002cc9 	.word	0x08002cc9
 8002c74:	08002cc9 	.word	0x08002cc9
 8002c78:	08002cc9 	.word	0x08002cc9
 8002c7c:	08002cb7 	.word	0x08002cb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0202 	orr.w	r2, r2, #2
 8002c8e:	60da      	str	r2, [r3, #12]
      break;
 8002c90:	e01d      	b.n	8002cce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0204 	orr.w	r2, r2, #4
 8002ca0:	60da      	str	r2, [r3, #12]
      break;
 8002ca2:	e014      	b.n	8002cce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0208 	orr.w	r2, r2, #8
 8002cb2:	60da      	str	r2, [r3, #12]
      break;
 8002cb4:	e00b      	b.n	8002cce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0210 	orr.w	r2, r2, #16
 8002cc4:	60da      	str	r2, [r3, #12]
      break;
 8002cc6:	e002      	b.n	8002cce <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ccc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d16f      	bne.n	8002db4 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 f977 	bl	8003fd0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a36      	ldr	r2, [pc, #216]	@ (8002dc0 <HAL_TIM_OC_Start_IT+0x284>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d013      	beq.n	8002d14 <HAL_TIM_OC_Start_IT+0x1d8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a34      	ldr	r2, [pc, #208]	@ (8002dc4 <HAL_TIM_OC_Start_IT+0x288>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00e      	beq.n	8002d14 <HAL_TIM_OC_Start_IT+0x1d8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a33      	ldr	r2, [pc, #204]	@ (8002dc8 <HAL_TIM_OC_Start_IT+0x28c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d009      	beq.n	8002d14 <HAL_TIM_OC_Start_IT+0x1d8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a31      	ldr	r2, [pc, #196]	@ (8002dcc <HAL_TIM_OC_Start_IT+0x290>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d004      	beq.n	8002d14 <HAL_TIM_OC_Start_IT+0x1d8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a30      	ldr	r2, [pc, #192]	@ (8002dd0 <HAL_TIM_OC_Start_IT+0x294>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d101      	bne.n	8002d18 <HAL_TIM_OC_Start_IT+0x1dc>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_TIM_OC_Start_IT+0x1de>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a23      	ldr	r2, [pc, #140]	@ (8002dc0 <HAL_TIM_OC_Start_IT+0x284>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d01d      	beq.n	8002d74 <HAL_TIM_OC_Start_IT+0x238>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d40:	d018      	beq.n	8002d74 <HAL_TIM_OC_Start_IT+0x238>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a23      	ldr	r2, [pc, #140]	@ (8002dd4 <HAL_TIM_OC_Start_IT+0x298>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_TIM_OC_Start_IT+0x238>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a21      	ldr	r2, [pc, #132]	@ (8002dd8 <HAL_TIM_OC_Start_IT+0x29c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <HAL_TIM_OC_Start_IT+0x238>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a20      	ldr	r2, [pc, #128]	@ (8002ddc <HAL_TIM_OC_Start_IT+0x2a0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_TIM_OC_Start_IT+0x238>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a17      	ldr	r2, [pc, #92]	@ (8002dc4 <HAL_TIM_OC_Start_IT+0x288>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_TIM_OC_Start_IT+0x238>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a16      	ldr	r2, [pc, #88]	@ (8002dc8 <HAL_TIM_OC_Start_IT+0x28c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d115      	bne.n	8002da0 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	4b19      	ldr	r3, [pc, #100]	@ (8002de0 <HAL_TIM_OC_Start_IT+0x2a4>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d015      	beq.n	8002db2 <HAL_TIM_OC_Start_IT+0x276>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d8c:	d011      	beq.n	8002db2 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0201 	orr.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9e:	e008      	b.n	8002db2 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e000      	b.n	8002db4 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40013400 	.word	0x40013400
 8002dc8:	40014000 	.word	0x40014000
 8002dcc:	40014400 	.word	0x40014400
 8002dd0:	40014800 	.word	0x40014800
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40000c00 	.word	0x40000c00
 8002de0:	00010007 	.word	0x00010007

08002de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e049      	b.n	8002e8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f841 	bl	8002e92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f000 fcca 	bl	80037bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d109      	bne.n	8002ecc <HAL_TIM_PWM_Start+0x24>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e03c      	b.n	8002f46 <HAL_TIM_PWM_Start+0x9e>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d109      	bne.n	8002ee6 <HAL_TIM_PWM_Start+0x3e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	bf14      	ite	ne
 8002ede:	2301      	movne	r3, #1
 8002ee0:	2300      	moveq	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	e02f      	b.n	8002f46 <HAL_TIM_PWM_Start+0x9e>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d109      	bne.n	8002f00 <HAL_TIM_PWM_Start+0x58>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e022      	b.n	8002f46 <HAL_TIM_PWM_Start+0x9e>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b0c      	cmp	r3, #12
 8002f04:	d109      	bne.n	8002f1a <HAL_TIM_PWM_Start+0x72>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	bf14      	ite	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	2300      	moveq	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	e015      	b.n	8002f46 <HAL_TIM_PWM_Start+0x9e>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b10      	cmp	r3, #16
 8002f1e:	d109      	bne.n	8002f34 <HAL_TIM_PWM_Start+0x8c>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	bf14      	ite	ne
 8002f2c:	2301      	movne	r3, #1
 8002f2e:	2300      	moveq	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e008      	b.n	8002f46 <HAL_TIM_PWM_Start+0x9e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e09c      	b.n	8003088 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d104      	bne.n	8002f5e <HAL_TIM_PWM_Start+0xb6>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f5c:	e023      	b.n	8002fa6 <HAL_TIM_PWM_Start+0xfe>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d104      	bne.n	8002f6e <HAL_TIM_PWM_Start+0xc6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f6c:	e01b      	b.n	8002fa6 <HAL_TIM_PWM_Start+0xfe>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d104      	bne.n	8002f7e <HAL_TIM_PWM_Start+0xd6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f7c:	e013      	b.n	8002fa6 <HAL_TIM_PWM_Start+0xfe>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d104      	bne.n	8002f8e <HAL_TIM_PWM_Start+0xe6>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f8c:	e00b      	b.n	8002fa6 <HAL_TIM_PWM_Start+0xfe>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d104      	bne.n	8002f9e <HAL_TIM_PWM_Start+0xf6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f9c:	e003      	b.n	8002fa6 <HAL_TIM_PWM_Start+0xfe>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2201      	movs	r2, #1
 8002fac:	6839      	ldr	r1, [r7, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f001 f80e 	bl	8003fd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a35      	ldr	r2, [pc, #212]	@ (8003090 <HAL_TIM_PWM_Start+0x1e8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0x13e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a34      	ldr	r2, [pc, #208]	@ (8003094 <HAL_TIM_PWM_Start+0x1ec>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0x13e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a32      	ldr	r2, [pc, #200]	@ (8003098 <HAL_TIM_PWM_Start+0x1f0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0x13e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a31      	ldr	r2, [pc, #196]	@ (800309c <HAL_TIM_PWM_Start+0x1f4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0x13e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80030a0 <HAL_TIM_PWM_Start+0x1f8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_PWM_Start+0x142>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_TIM_PWM_Start+0x144>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a22      	ldr	r2, [pc, #136]	@ (8003090 <HAL_TIM_PWM_Start+0x1e8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01d      	beq.n	8003046 <HAL_TIM_PWM_Start+0x19e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003012:	d018      	beq.n	8003046 <HAL_TIM_PWM_Start+0x19e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a22      	ldr	r2, [pc, #136]	@ (80030a4 <HAL_TIM_PWM_Start+0x1fc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <HAL_TIM_PWM_Start+0x19e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a21      	ldr	r2, [pc, #132]	@ (80030a8 <HAL_TIM_PWM_Start+0x200>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00e      	beq.n	8003046 <HAL_TIM_PWM_Start+0x19e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1f      	ldr	r2, [pc, #124]	@ (80030ac <HAL_TIM_PWM_Start+0x204>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d009      	beq.n	8003046 <HAL_TIM_PWM_Start+0x19e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a17      	ldr	r2, [pc, #92]	@ (8003094 <HAL_TIM_PWM_Start+0x1ec>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d004      	beq.n	8003046 <HAL_TIM_PWM_Start+0x19e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a15      	ldr	r2, [pc, #84]	@ (8003098 <HAL_TIM_PWM_Start+0x1f0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d115      	bne.n	8003072 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4b18      	ldr	r3, [pc, #96]	@ (80030b0 <HAL_TIM_PWM_Start+0x208>)
 800304e:	4013      	ands	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b06      	cmp	r3, #6
 8003056:	d015      	beq.n	8003084 <HAL_TIM_PWM_Start+0x1dc>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800305e:	d011      	beq.n	8003084 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003070:	e008      	b.n	8003084 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e000      	b.n	8003086 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003084:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40012c00 	.word	0x40012c00
 8003094:	40013400 	.word	0x40013400
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400
 80030a0:	40014800 	.word	0x40014800
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40000c00 	.word	0x40000c00
 80030b0:	00010007 	.word	0x00010007

080030b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d020      	beq.n	8003118 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01b      	beq.n	8003118 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0202 	mvn.w	r2, #2
 80030e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fb31 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd fd58 	bl	8000bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fb34 	bl	800377a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	d020      	beq.n	8003164 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01b      	beq.n	8003164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0204 	mvn.w	r2, #4
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fb0b 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fd32 	bl	8000bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fb0e 	bl	800377a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d020      	beq.n	80031b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01b      	beq.n	80031b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0208 	mvn.w	r2, #8
 8003180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2204      	movs	r2, #4
 8003186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fae5 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fd0c 	bl	8000bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fae8 	bl	800377a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d020      	beq.n	80031fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01b      	beq.n	80031fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0210 	mvn.w	r2, #16
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2208      	movs	r2, #8
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fabf 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fd fce6 	bl	8000bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fac2 	bl	800377a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0201 	mvn.w	r2, #1
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd fca2 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 ff7e 	bl	8004140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 ff76 	bl	8004154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00c      	beq.n	800328c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa81 	bl	800378e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00c      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0220 	mvn.w	r2, #32
 80032a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 ff3e 	bl	800412c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e066      	b.n	80033a4 <HAL_TIM_OC_ConfigChannel+0xec>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b14      	cmp	r3, #20
 80032e2:	d857      	bhi.n	8003394 <HAL_TIM_OC_ConfigChannel+0xdc>
 80032e4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ec <HAL_TIM_OC_ConfigChannel+0x34>)
 80032e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ea:	bf00      	nop
 80032ec:	08003341 	.word	0x08003341
 80032f0:	08003395 	.word	0x08003395
 80032f4:	08003395 	.word	0x08003395
 80032f8:	08003395 	.word	0x08003395
 80032fc:	0800334f 	.word	0x0800334f
 8003300:	08003395 	.word	0x08003395
 8003304:	08003395 	.word	0x08003395
 8003308:	08003395 	.word	0x08003395
 800330c:	0800335d 	.word	0x0800335d
 8003310:	08003395 	.word	0x08003395
 8003314:	08003395 	.word	0x08003395
 8003318:	08003395 	.word	0x08003395
 800331c:	0800336b 	.word	0x0800336b
 8003320:	08003395 	.word	0x08003395
 8003324:	08003395 	.word	0x08003395
 8003328:	08003395 	.word	0x08003395
 800332c:	08003379 	.word	0x08003379
 8003330:	08003395 	.word	0x08003395
 8003334:	08003395 	.word	0x08003395
 8003338:	08003395 	.word	0x08003395
 800333c:	08003387 	.word	0x08003387
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fad2 	bl	80038f0 <TIM_OC1_SetConfig>
      break;
 800334c:	e025      	b.n	800339a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fb5b 	bl	8003a10 <TIM_OC2_SetConfig>
      break;
 800335a:	e01e      	b.n	800339a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fbde 	bl	8003b24 <TIM_OC3_SetConfig>
      break;
 8003368:	e017      	b.n	800339a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fc5f 	bl	8003c34 <TIM_OC4_SetConfig>
      break;
 8003376:	e010      	b.n	800339a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fcc2 	bl	8003d08 <TIM_OC5_SetConfig>
      break;
 8003384:	e009      	b.n	800339a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fd1f 	bl	8003dd0 <TIM_OC6_SetConfig>
      break;
 8003392:	e002      	b.n	800339a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	75fb      	strb	r3, [r7, #23]
      break;
 8003398:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0ff      	b.n	80035ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b14      	cmp	r3, #20
 80033d6:	f200 80f0 	bhi.w	80035ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033da:	a201      	add	r2, pc, #4	@ (adr r2, 80033e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	08003435 	.word	0x08003435
 80033e4:	080035bb 	.word	0x080035bb
 80033e8:	080035bb 	.word	0x080035bb
 80033ec:	080035bb 	.word	0x080035bb
 80033f0:	08003475 	.word	0x08003475
 80033f4:	080035bb 	.word	0x080035bb
 80033f8:	080035bb 	.word	0x080035bb
 80033fc:	080035bb 	.word	0x080035bb
 8003400:	080034b7 	.word	0x080034b7
 8003404:	080035bb 	.word	0x080035bb
 8003408:	080035bb 	.word	0x080035bb
 800340c:	080035bb 	.word	0x080035bb
 8003410:	080034f7 	.word	0x080034f7
 8003414:	080035bb 	.word	0x080035bb
 8003418:	080035bb 	.word	0x080035bb
 800341c:	080035bb 	.word	0x080035bb
 8003420:	08003539 	.word	0x08003539
 8003424:	080035bb 	.word	0x080035bb
 8003428:	080035bb 	.word	0x080035bb
 800342c:	080035bb 	.word	0x080035bb
 8003430:	08003579 	.word	0x08003579
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fa58 	bl	80038f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0208 	orr.w	r2, r2, #8
 800344e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0204 	bic.w	r2, r2, #4
 800345e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6999      	ldr	r1, [r3, #24]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	619a      	str	r2, [r3, #24]
      break;
 8003472:	e0a5      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fac8 	bl	8003a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800348e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800349e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6999      	ldr	r1, [r3, #24]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	021a      	lsls	r2, r3, #8
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	619a      	str	r2, [r3, #24]
      break;
 80034b4:	e084      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fb31 	bl	8003b24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0208 	orr.w	r2, r2, #8
 80034d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0204 	bic.w	r2, r2, #4
 80034e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69d9      	ldr	r1, [r3, #28]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	61da      	str	r2, [r3, #28]
      break;
 80034f4:	e064      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fb99 	bl	8003c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69d9      	ldr	r1, [r3, #28]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	021a      	lsls	r2, r3, #8
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	61da      	str	r2, [r3, #28]
      break;
 8003536:	e043      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fbe2 	bl	8003d08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0208 	orr.w	r2, r2, #8
 8003552:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003576:	e023      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fc26 	bl	8003dd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003592:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	021a      	lsls	r2, r3, #8
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035b8:	e002      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
      break;
 80035be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop

080035d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_TIM_ConfigClockSource+0x1c>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0b6      	b.n	800375e <HAL_TIM_ConfigClockSource+0x18a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800360e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800361a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800362c:	d03e      	beq.n	80036ac <HAL_TIM_ConfigClockSource+0xd8>
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003632:	f200 8087 	bhi.w	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800363a:	f000 8086 	beq.w	800374a <HAL_TIM_ConfigClockSource+0x176>
 800363e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003642:	d87f      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003644:	2b70      	cmp	r3, #112	@ 0x70
 8003646:	d01a      	beq.n	800367e <HAL_TIM_ConfigClockSource+0xaa>
 8003648:	2b70      	cmp	r3, #112	@ 0x70
 800364a:	d87b      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 800364c:	2b60      	cmp	r3, #96	@ 0x60
 800364e:	d050      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x11e>
 8003650:	2b60      	cmp	r3, #96	@ 0x60
 8003652:	d877      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003654:	2b50      	cmp	r3, #80	@ 0x50
 8003656:	d03c      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0xfe>
 8003658:	2b50      	cmp	r3, #80	@ 0x50
 800365a:	d873      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d058      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x13e>
 8003660:	2b40      	cmp	r3, #64	@ 0x40
 8003662:	d86f      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003664:	2b30      	cmp	r3, #48	@ 0x30
 8003666:	d064      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 8003668:	2b30      	cmp	r3, #48	@ 0x30
 800366a:	d86b      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 800366c:	2b20      	cmp	r3, #32
 800366e:	d060      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 8003670:	2b20      	cmp	r3, #32
 8003672:	d867      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d05c      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 8003678:	2b10      	cmp	r3, #16
 800367a:	d05a      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 800367c:	e062      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800368e:	f000 fc7f 	bl	8003f90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	609a      	str	r2, [r3, #8]
      break;
 80036aa:	e04f      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036bc:	f000 fc68 	bl	8003f90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036ce:	609a      	str	r2, [r3, #8]
      break;
 80036d0:	e03c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036de:	461a      	mov	r2, r3
 80036e0:	f000 fbdc 	bl	8003e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2150      	movs	r1, #80	@ 0x50
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fc35 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 80036f0:	e02c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036fe:	461a      	mov	r2, r3
 8003700:	f000 fbfb 	bl	8003efa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2160      	movs	r1, #96	@ 0x60
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fc25 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003710:	e01c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800371e:	461a      	mov	r2, r3
 8003720:	f000 fbbc 	bl	8003e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2140      	movs	r1, #64	@ 0x40
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fc15 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003730:	e00c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f000 fc0c 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003742:	e003      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      break;
 8003748:	e000      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800374a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7f1b      	ldrb	r3, [r3, #28]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a40      	ldr	r2, [pc, #256]	@ (80038d0 <TIM_Base_SetConfig+0x114>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037da:	d00f      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3d      	ldr	r2, [pc, #244]	@ (80038d4 <TIM_Base_SetConfig+0x118>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00b      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3c      	ldr	r2, [pc, #240]	@ (80038d8 <TIM_Base_SetConfig+0x11c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d007      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3b      	ldr	r2, [pc, #236]	@ (80038dc <TIM_Base_SetConfig+0x120>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3a      	ldr	r2, [pc, #232]	@ (80038e0 <TIM_Base_SetConfig+0x124>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d108      	bne.n	800380e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a2f      	ldr	r2, [pc, #188]	@ (80038d0 <TIM_Base_SetConfig+0x114>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01f      	beq.n	8003856 <TIM_Base_SetConfig+0x9a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381c:	d01b      	beq.n	8003856 <TIM_Base_SetConfig+0x9a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2c      	ldr	r2, [pc, #176]	@ (80038d4 <TIM_Base_SetConfig+0x118>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d017      	beq.n	8003856 <TIM_Base_SetConfig+0x9a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2b      	ldr	r2, [pc, #172]	@ (80038d8 <TIM_Base_SetConfig+0x11c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <TIM_Base_SetConfig+0x9a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2a      	ldr	r2, [pc, #168]	@ (80038dc <TIM_Base_SetConfig+0x120>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00f      	beq.n	8003856 <TIM_Base_SetConfig+0x9a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a29      	ldr	r2, [pc, #164]	@ (80038e0 <TIM_Base_SetConfig+0x124>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00b      	beq.n	8003856 <TIM_Base_SetConfig+0x9a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a28      	ldr	r2, [pc, #160]	@ (80038e4 <TIM_Base_SetConfig+0x128>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <TIM_Base_SetConfig+0x9a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a27      	ldr	r2, [pc, #156]	@ (80038e8 <TIM_Base_SetConfig+0x12c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d003      	beq.n	8003856 <TIM_Base_SetConfig+0x9a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a26      	ldr	r2, [pc, #152]	@ (80038ec <TIM_Base_SetConfig+0x130>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d108      	bne.n	8003868 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a10      	ldr	r2, [pc, #64]	@ (80038d0 <TIM_Base_SetConfig+0x114>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00f      	beq.n	80038b4 <TIM_Base_SetConfig+0xf8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a12      	ldr	r2, [pc, #72]	@ (80038e0 <TIM_Base_SetConfig+0x124>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00b      	beq.n	80038b4 <TIM_Base_SetConfig+0xf8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a11      	ldr	r2, [pc, #68]	@ (80038e4 <TIM_Base_SetConfig+0x128>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d007      	beq.n	80038b4 <TIM_Base_SetConfig+0xf8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a10      	ldr	r2, [pc, #64]	@ (80038e8 <TIM_Base_SetConfig+0x12c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_Base_SetConfig+0xf8>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0f      	ldr	r2, [pc, #60]	@ (80038ec <TIM_Base_SetConfig+0x130>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d103      	bne.n	80038bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	615a      	str	r2, [r3, #20]
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40013400 	.word	0x40013400
 80038e4:	40014000 	.word	0x40014000
 80038e8:	40014400 	.word	0x40014400
 80038ec:	40014800 	.word	0x40014800

080038f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f023 0201 	bic.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800391e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0303 	bic.w	r3, r3, #3
 800392a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f023 0302 	bic.w	r3, r3, #2
 800393c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a2c      	ldr	r2, [pc, #176]	@ (80039fc <TIM_OC1_SetConfig+0x10c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00f      	beq.n	8003970 <TIM_OC1_SetConfig+0x80>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a2b      	ldr	r2, [pc, #172]	@ (8003a00 <TIM_OC1_SetConfig+0x110>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00b      	beq.n	8003970 <TIM_OC1_SetConfig+0x80>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a04 <TIM_OC1_SetConfig+0x114>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <TIM_OC1_SetConfig+0x80>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a29      	ldr	r2, [pc, #164]	@ (8003a08 <TIM_OC1_SetConfig+0x118>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_OC1_SetConfig+0x80>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a28      	ldr	r2, [pc, #160]	@ (8003a0c <TIM_OC1_SetConfig+0x11c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d10c      	bne.n	800398a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f023 0308 	bic.w	r3, r3, #8
 8003976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f023 0304 	bic.w	r3, r3, #4
 8003988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a1b      	ldr	r2, [pc, #108]	@ (80039fc <TIM_OC1_SetConfig+0x10c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00f      	beq.n	80039b2 <TIM_OC1_SetConfig+0xc2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a1a      	ldr	r2, [pc, #104]	@ (8003a00 <TIM_OC1_SetConfig+0x110>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00b      	beq.n	80039b2 <TIM_OC1_SetConfig+0xc2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a19      	ldr	r2, [pc, #100]	@ (8003a04 <TIM_OC1_SetConfig+0x114>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d007      	beq.n	80039b2 <TIM_OC1_SetConfig+0xc2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a18      	ldr	r2, [pc, #96]	@ (8003a08 <TIM_OC1_SetConfig+0x118>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d003      	beq.n	80039b2 <TIM_OC1_SetConfig+0xc2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a17      	ldr	r2, [pc, #92]	@ (8003a0c <TIM_OC1_SetConfig+0x11c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d111      	bne.n	80039d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	621a      	str	r2, [r3, #32]
}
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40013400 	.word	0x40013400
 8003a04:	40014000 	.word	0x40014000
 8003a08:	40014400 	.word	0x40014400
 8003a0c:	40014800 	.word	0x40014800

08003a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f023 0210 	bic.w	r2, r3, #16
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	021b      	lsls	r3, r3, #8
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f023 0320 	bic.w	r3, r3, #32
 8003a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a28      	ldr	r2, [pc, #160]	@ (8003b10 <TIM_OC2_SetConfig+0x100>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_OC2_SetConfig+0x6c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a27      	ldr	r2, [pc, #156]	@ (8003b14 <TIM_OC2_SetConfig+0x104>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10d      	bne.n	8003a98 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b10 <TIM_OC2_SetConfig+0x100>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00f      	beq.n	8003ac0 <TIM_OC2_SetConfig+0xb0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b14 <TIM_OC2_SetConfig+0x104>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <TIM_OC2_SetConfig+0xb0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8003b18 <TIM_OC2_SetConfig+0x108>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <TIM_OC2_SetConfig+0xb0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8003b1c <TIM_OC2_SetConfig+0x10c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <TIM_OC2_SetConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a19      	ldr	r2, [pc, #100]	@ (8003b20 <TIM_OC2_SetConfig+0x110>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d113      	bne.n	8003ae8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	40013400 	.word	0x40013400
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40014400 	.word	0x40014400
 8003b20:	40014800 	.word	0x40014800

08003b24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a27      	ldr	r2, [pc, #156]	@ (8003c20 <TIM_OC3_SetConfig+0xfc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_OC3_SetConfig+0x6a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a26      	ldr	r2, [pc, #152]	@ (8003c24 <TIM_OC3_SetConfig+0x100>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d10d      	bne.n	8003baa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a1c      	ldr	r2, [pc, #112]	@ (8003c20 <TIM_OC3_SetConfig+0xfc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00f      	beq.n	8003bd2 <TIM_OC3_SetConfig+0xae>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c24 <TIM_OC3_SetConfig+0x100>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00b      	beq.n	8003bd2 <TIM_OC3_SetConfig+0xae>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a1a      	ldr	r2, [pc, #104]	@ (8003c28 <TIM_OC3_SetConfig+0x104>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <TIM_OC3_SetConfig+0xae>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a19      	ldr	r2, [pc, #100]	@ (8003c2c <TIM_OC3_SetConfig+0x108>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d003      	beq.n	8003bd2 <TIM_OC3_SetConfig+0xae>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a18      	ldr	r2, [pc, #96]	@ (8003c30 <TIM_OC3_SetConfig+0x10c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d113      	bne.n	8003bfa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	621a      	str	r2, [r3, #32]
}
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40013400 	.word	0x40013400
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800

08003c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	031b      	lsls	r3, r3, #12
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a18      	ldr	r2, [pc, #96]	@ (8003cf4 <TIM_OC4_SetConfig+0xc0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00f      	beq.n	8003cb8 <TIM_OC4_SetConfig+0x84>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a17      	ldr	r2, [pc, #92]	@ (8003cf8 <TIM_OC4_SetConfig+0xc4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_OC4_SetConfig+0x84>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a16      	ldr	r2, [pc, #88]	@ (8003cfc <TIM_OC4_SetConfig+0xc8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_OC4_SetConfig+0x84>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a15      	ldr	r2, [pc, #84]	@ (8003d00 <TIM_OC4_SetConfig+0xcc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_OC4_SetConfig+0x84>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a14      	ldr	r2, [pc, #80]	@ (8003d04 <TIM_OC4_SetConfig+0xd0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d109      	bne.n	8003ccc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	019b      	lsls	r3, r3, #6
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40013400 	.word	0x40013400
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	40014400 	.word	0x40014400
 8003d04:	40014800 	.word	0x40014800

08003d08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003d4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	041b      	lsls	r3, r3, #16
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a17      	ldr	r2, [pc, #92]	@ (8003dbc <TIM_OC5_SetConfig+0xb4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00f      	beq.n	8003d82 <TIM_OC5_SetConfig+0x7a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a16      	ldr	r2, [pc, #88]	@ (8003dc0 <TIM_OC5_SetConfig+0xb8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00b      	beq.n	8003d82 <TIM_OC5_SetConfig+0x7a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a15      	ldr	r2, [pc, #84]	@ (8003dc4 <TIM_OC5_SetConfig+0xbc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d007      	beq.n	8003d82 <TIM_OC5_SetConfig+0x7a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a14      	ldr	r2, [pc, #80]	@ (8003dc8 <TIM_OC5_SetConfig+0xc0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d003      	beq.n	8003d82 <TIM_OC5_SetConfig+0x7a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a13      	ldr	r2, [pc, #76]	@ (8003dcc <TIM_OC5_SetConfig+0xc4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d109      	bne.n	8003d96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	621a      	str	r2, [r3, #32]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40013400 	.word	0x40013400
 8003dc4:	40014000 	.word	0x40014000
 8003dc8:	40014400 	.word	0x40014400
 8003dcc:	40014800 	.word	0x40014800

08003dd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	051b      	lsls	r3, r3, #20
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a18      	ldr	r2, [pc, #96]	@ (8003e88 <TIM_OC6_SetConfig+0xb8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00f      	beq.n	8003e4c <TIM_OC6_SetConfig+0x7c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <TIM_OC6_SetConfig+0xbc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00b      	beq.n	8003e4c <TIM_OC6_SetConfig+0x7c>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a16      	ldr	r2, [pc, #88]	@ (8003e90 <TIM_OC6_SetConfig+0xc0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <TIM_OC6_SetConfig+0x7c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a15      	ldr	r2, [pc, #84]	@ (8003e94 <TIM_OC6_SetConfig+0xc4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_OC6_SetConfig+0x7c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a14      	ldr	r2, [pc, #80]	@ (8003e98 <TIM_OC6_SetConfig+0xc8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d109      	bne.n	8003e60 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	029b      	lsls	r3, r3, #10
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40013400 	.word	0x40013400
 8003e90:	40014000 	.word	0x40014000
 8003e94:	40014400 	.word	0x40014400
 8003e98:	40014800 	.word	0x40014800

08003e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f023 0201 	bic.w	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f023 030a 	bic.w	r3, r3, #10
 8003ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f023 0210 	bic.w	r2, r3, #16
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	031b      	lsls	r3, r3, #12
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f043 0307 	orr.w	r3, r3, #7
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	021a      	lsls	r2, r3, #8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	609a      	str	r2, [r3, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1a      	ldr	r2, [r3, #32]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	431a      	orrs	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004030:	2302      	movs	r3, #2
 8004032:	e068      	b.n	8004106 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a2e      	ldr	r2, [pc, #184]	@ (8004114 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d004      	beq.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2d      	ldr	r2, [pc, #180]	@ (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d108      	bne.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800406e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004080:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1e      	ldr	r2, [pc, #120]	@ (8004114 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d01d      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a6:	d018      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1b      	ldr	r2, [pc, #108]	@ (800411c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004120 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00e      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a18      	ldr	r2, [pc, #96]	@ (8004124 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a13      	ldr	r2, [pc, #76]	@ (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a14      	ldr	r2, [pc, #80]	@ (8004128 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10c      	bne.n	80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40013400 	.word	0x40013400
 800411c:	40000400 	.word	0x40000400
 8004120:	40000800 	.word	0x40000800
 8004124:	40000c00 	.word	0x40000c00
 8004128:	40014000 	.word	0x40014000

0800412c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <memset>:
 8004168:	4402      	add	r2, r0
 800416a:	4603      	mov	r3, r0
 800416c:	4293      	cmp	r3, r2
 800416e:	d100      	bne.n	8004172 <memset+0xa>
 8004170:	4770      	bx	lr
 8004172:	f803 1b01 	strb.w	r1, [r3], #1
 8004176:	e7f9      	b.n	800416c <memset+0x4>

08004178 <__errno>:
 8004178:	4b01      	ldr	r3, [pc, #4]	@ (8004180 <__errno+0x8>)
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	2000000c 	.word	0x2000000c

08004184 <__libc_init_array>:
 8004184:	b570      	push	{r4, r5, r6, lr}
 8004186:	4d0d      	ldr	r5, [pc, #52]	@ (80041bc <__libc_init_array+0x38>)
 8004188:	4c0d      	ldr	r4, [pc, #52]	@ (80041c0 <__libc_init_array+0x3c>)
 800418a:	1b64      	subs	r4, r4, r5
 800418c:	10a4      	asrs	r4, r4, #2
 800418e:	2600      	movs	r6, #0
 8004190:	42a6      	cmp	r6, r4
 8004192:	d109      	bne.n	80041a8 <__libc_init_array+0x24>
 8004194:	4d0b      	ldr	r5, [pc, #44]	@ (80041c4 <__libc_init_array+0x40>)
 8004196:	4c0c      	ldr	r4, [pc, #48]	@ (80041c8 <__libc_init_array+0x44>)
 8004198:	f001 fa56 	bl	8005648 <_init>
 800419c:	1b64      	subs	r4, r4, r5
 800419e:	10a4      	asrs	r4, r4, #2
 80041a0:	2600      	movs	r6, #0
 80041a2:	42a6      	cmp	r6, r4
 80041a4:	d105      	bne.n	80041b2 <__libc_init_array+0x2e>
 80041a6:	bd70      	pop	{r4, r5, r6, pc}
 80041a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ac:	4798      	blx	r3
 80041ae:	3601      	adds	r6, #1
 80041b0:	e7ee      	b.n	8004190 <__libc_init_array+0xc>
 80041b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b6:	4798      	blx	r3
 80041b8:	3601      	adds	r6, #1
 80041ba:	e7f2      	b.n	80041a2 <__libc_init_array+0x1e>
 80041bc:	080058a8 	.word	0x080058a8
 80041c0:	080058a8 	.word	0x080058a8
 80041c4:	080058a8 	.word	0x080058a8
 80041c8:	080058ac 	.word	0x080058ac
 80041cc:	00000000 	.word	0x00000000

080041d0 <exp>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	ed2d 8b02 	vpush	{d8}
 80041d6:	ec55 4b10 	vmov	r4, r5, d0
 80041da:	f000 fa25 	bl	8004628 <__ieee754_exp>
 80041de:	eeb0 8a40 	vmov.f32	s16, s0
 80041e2:	eef0 8a60 	vmov.f32	s17, s1
 80041e6:	ec45 4b10 	vmov	d0, r4, r5
 80041ea:	f000 f88d 	bl	8004308 <finite>
 80041ee:	b168      	cbz	r0, 800420c <exp+0x3c>
 80041f0:	a317      	add	r3, pc, #92	@ (adr r3, 8004250 <exp+0x80>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	4620      	mov	r0, r4
 80041f8:	4629      	mov	r1, r5
 80041fa:	f7fc fc31 	bl	8000a60 <__aeabi_dcmpgt>
 80041fe:	b160      	cbz	r0, 800421a <exp+0x4a>
 8004200:	f7ff ffba 	bl	8004178 <__errno>
 8004204:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8004240 <exp+0x70>
 8004208:	2322      	movs	r3, #34	@ 0x22
 800420a:	6003      	str	r3, [r0, #0]
 800420c:	eeb0 0a48 	vmov.f32	s0, s16
 8004210:	eef0 0a68 	vmov.f32	s1, s17
 8004214:	ecbd 8b02 	vpop	{d8}
 8004218:	bd38      	pop	{r3, r4, r5, pc}
 800421a:	a30f      	add	r3, pc, #60	@ (adr r3, 8004258 <exp+0x88>)
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	4620      	mov	r0, r4
 8004222:	4629      	mov	r1, r5
 8004224:	f7fc fbfe 	bl	8000a24 <__aeabi_dcmplt>
 8004228:	2800      	cmp	r0, #0
 800422a:	d0ef      	beq.n	800420c <exp+0x3c>
 800422c:	f7ff ffa4 	bl	8004178 <__errno>
 8004230:	2322      	movs	r3, #34	@ 0x22
 8004232:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8004248 <exp+0x78>
 8004236:	6003      	str	r3, [r0, #0]
 8004238:	e7e8      	b.n	800420c <exp+0x3c>
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w
 8004240:	00000000 	.word	0x00000000
 8004244:	7ff00000 	.word	0x7ff00000
	...
 8004250:	fefa39ef 	.word	0xfefa39ef
 8004254:	40862e42 	.word	0x40862e42
 8004258:	d52d3051 	.word	0xd52d3051
 800425c:	c0874910 	.word	0xc0874910

08004260 <sin>:
 8004260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004262:	ec53 2b10 	vmov	r2, r3, d0
 8004266:	4826      	ldr	r0, [pc, #152]	@ (8004300 <sin+0xa0>)
 8004268:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800426c:	4281      	cmp	r1, r0
 800426e:	d807      	bhi.n	8004280 <sin+0x20>
 8004270:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80042f8 <sin+0x98>
 8004274:	2000      	movs	r0, #0
 8004276:	b005      	add	sp, #20
 8004278:	f85d eb04 	ldr.w	lr, [sp], #4
 800427c:	f000 b918 	b.w	80044b0 <__kernel_sin>
 8004280:	4820      	ldr	r0, [pc, #128]	@ (8004304 <sin+0xa4>)
 8004282:	4281      	cmp	r1, r0
 8004284:	d908      	bls.n	8004298 <sin+0x38>
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	f7fb ffa1 	bl	80001d0 <__aeabi_dsub>
 800428e:	ec41 0b10 	vmov	d0, r0, r1
 8004292:	b005      	add	sp, #20
 8004294:	f85d fb04 	ldr.w	pc, [sp], #4
 8004298:	4668      	mov	r0, sp
 800429a:	f000 fb41 	bl	8004920 <__ieee754_rem_pio2>
 800429e:	f000 0003 	and.w	r0, r0, #3
 80042a2:	2801      	cmp	r0, #1
 80042a4:	d00c      	beq.n	80042c0 <sin+0x60>
 80042a6:	2802      	cmp	r0, #2
 80042a8:	d011      	beq.n	80042ce <sin+0x6e>
 80042aa:	b9e8      	cbnz	r0, 80042e8 <sin+0x88>
 80042ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80042b0:	ed9d 0b00 	vldr	d0, [sp]
 80042b4:	2001      	movs	r0, #1
 80042b6:	f000 f8fb 	bl	80044b0 <__kernel_sin>
 80042ba:	ec51 0b10 	vmov	r0, r1, d0
 80042be:	e7e6      	b.n	800428e <sin+0x2e>
 80042c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80042c4:	ed9d 0b00 	vldr	d0, [sp]
 80042c8:	f000 f82a 	bl	8004320 <__kernel_cos>
 80042cc:	e7f5      	b.n	80042ba <sin+0x5a>
 80042ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80042d2:	ed9d 0b00 	vldr	d0, [sp]
 80042d6:	2001      	movs	r0, #1
 80042d8:	f000 f8ea 	bl	80044b0 <__kernel_sin>
 80042dc:	ec53 2b10 	vmov	r2, r3, d0
 80042e0:	4610      	mov	r0, r2
 80042e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80042e6:	e7d2      	b.n	800428e <sin+0x2e>
 80042e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80042ec:	ed9d 0b00 	vldr	d0, [sp]
 80042f0:	f000 f816 	bl	8004320 <__kernel_cos>
 80042f4:	e7f2      	b.n	80042dc <sin+0x7c>
 80042f6:	bf00      	nop
	...
 8004300:	3fe921fb 	.word	0x3fe921fb
 8004304:	7fefffff 	.word	0x7fefffff

08004308 <finite>:
 8004308:	b082      	sub	sp, #8
 800430a:	ed8d 0b00 	vstr	d0, [sp]
 800430e:	9801      	ldr	r0, [sp, #4]
 8004310:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004314:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004318:	0fc0      	lsrs	r0, r0, #31
 800431a:	b002      	add	sp, #8
 800431c:	4770      	bx	lr
	...

08004320 <__kernel_cos>:
 8004320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	ec57 6b10 	vmov	r6, r7, d0
 8004328:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800432c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004330:	ed8d 1b00 	vstr	d1, [sp]
 8004334:	d206      	bcs.n	8004344 <__kernel_cos+0x24>
 8004336:	4630      	mov	r0, r6
 8004338:	4639      	mov	r1, r7
 800433a:	f7fc fb9b 	bl	8000a74 <__aeabi_d2iz>
 800433e:	2800      	cmp	r0, #0
 8004340:	f000 8088 	beq.w	8004454 <__kernel_cos+0x134>
 8004344:	4632      	mov	r2, r6
 8004346:	463b      	mov	r3, r7
 8004348:	4630      	mov	r0, r6
 800434a:	4639      	mov	r1, r7
 800434c:	f7fc f8f8 	bl	8000540 <__aeabi_dmul>
 8004350:	4b51      	ldr	r3, [pc, #324]	@ (8004498 <__kernel_cos+0x178>)
 8004352:	2200      	movs	r2, #0
 8004354:	4604      	mov	r4, r0
 8004356:	460d      	mov	r5, r1
 8004358:	f7fc f8f2 	bl	8000540 <__aeabi_dmul>
 800435c:	a340      	add	r3, pc, #256	@ (adr r3, 8004460 <__kernel_cos+0x140>)
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	4682      	mov	sl, r0
 8004364:	468b      	mov	fp, r1
 8004366:	4620      	mov	r0, r4
 8004368:	4629      	mov	r1, r5
 800436a:	f7fc f8e9 	bl	8000540 <__aeabi_dmul>
 800436e:	a33e      	add	r3, pc, #248	@ (adr r3, 8004468 <__kernel_cos+0x148>)
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f7fb ff2e 	bl	80001d4 <__adddf3>
 8004378:	4622      	mov	r2, r4
 800437a:	462b      	mov	r3, r5
 800437c:	f7fc f8e0 	bl	8000540 <__aeabi_dmul>
 8004380:	a33b      	add	r3, pc, #236	@ (adr r3, 8004470 <__kernel_cos+0x150>)
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	f7fb ff23 	bl	80001d0 <__aeabi_dsub>
 800438a:	4622      	mov	r2, r4
 800438c:	462b      	mov	r3, r5
 800438e:	f7fc f8d7 	bl	8000540 <__aeabi_dmul>
 8004392:	a339      	add	r3, pc, #228	@ (adr r3, 8004478 <__kernel_cos+0x158>)
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f7fb ff1c 	bl	80001d4 <__adddf3>
 800439c:	4622      	mov	r2, r4
 800439e:	462b      	mov	r3, r5
 80043a0:	f7fc f8ce 	bl	8000540 <__aeabi_dmul>
 80043a4:	a336      	add	r3, pc, #216	@ (adr r3, 8004480 <__kernel_cos+0x160>)
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f7fb ff11 	bl	80001d0 <__aeabi_dsub>
 80043ae:	4622      	mov	r2, r4
 80043b0:	462b      	mov	r3, r5
 80043b2:	f7fc f8c5 	bl	8000540 <__aeabi_dmul>
 80043b6:	a334      	add	r3, pc, #208	@ (adr r3, 8004488 <__kernel_cos+0x168>)
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f7fb ff0a 	bl	80001d4 <__adddf3>
 80043c0:	4622      	mov	r2, r4
 80043c2:	462b      	mov	r3, r5
 80043c4:	f7fc f8bc 	bl	8000540 <__aeabi_dmul>
 80043c8:	4622      	mov	r2, r4
 80043ca:	462b      	mov	r3, r5
 80043cc:	f7fc f8b8 	bl	8000540 <__aeabi_dmul>
 80043d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043d4:	4604      	mov	r4, r0
 80043d6:	460d      	mov	r5, r1
 80043d8:	4630      	mov	r0, r6
 80043da:	4639      	mov	r1, r7
 80043dc:	f7fc f8b0 	bl	8000540 <__aeabi_dmul>
 80043e0:	460b      	mov	r3, r1
 80043e2:	4602      	mov	r2, r0
 80043e4:	4629      	mov	r1, r5
 80043e6:	4620      	mov	r0, r4
 80043e8:	f7fb fef2 	bl	80001d0 <__aeabi_dsub>
 80043ec:	4b2b      	ldr	r3, [pc, #172]	@ (800449c <__kernel_cos+0x17c>)
 80043ee:	4598      	cmp	r8, r3
 80043f0:	4606      	mov	r6, r0
 80043f2:	460f      	mov	r7, r1
 80043f4:	d810      	bhi.n	8004418 <__kernel_cos+0xf8>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4650      	mov	r0, sl
 80043fc:	4659      	mov	r1, fp
 80043fe:	f7fb fee7 	bl	80001d0 <__aeabi_dsub>
 8004402:	460b      	mov	r3, r1
 8004404:	4926      	ldr	r1, [pc, #152]	@ (80044a0 <__kernel_cos+0x180>)
 8004406:	4602      	mov	r2, r0
 8004408:	2000      	movs	r0, #0
 800440a:	f7fb fee1 	bl	80001d0 <__aeabi_dsub>
 800440e:	ec41 0b10 	vmov	d0, r0, r1
 8004412:	b003      	add	sp, #12
 8004414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004418:	4b22      	ldr	r3, [pc, #136]	@ (80044a4 <__kernel_cos+0x184>)
 800441a:	4921      	ldr	r1, [pc, #132]	@ (80044a0 <__kernel_cos+0x180>)
 800441c:	4598      	cmp	r8, r3
 800441e:	bf8c      	ite	hi
 8004420:	4d21      	ldrhi	r5, [pc, #132]	@ (80044a8 <__kernel_cos+0x188>)
 8004422:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004426:	2400      	movs	r4, #0
 8004428:	4622      	mov	r2, r4
 800442a:	462b      	mov	r3, r5
 800442c:	2000      	movs	r0, #0
 800442e:	f7fb fecf 	bl	80001d0 <__aeabi_dsub>
 8004432:	4622      	mov	r2, r4
 8004434:	4680      	mov	r8, r0
 8004436:	4689      	mov	r9, r1
 8004438:	462b      	mov	r3, r5
 800443a:	4650      	mov	r0, sl
 800443c:	4659      	mov	r1, fp
 800443e:	f7fb fec7 	bl	80001d0 <__aeabi_dsub>
 8004442:	4632      	mov	r2, r6
 8004444:	463b      	mov	r3, r7
 8004446:	f7fb fec3 	bl	80001d0 <__aeabi_dsub>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4640      	mov	r0, r8
 8004450:	4649      	mov	r1, r9
 8004452:	e7da      	b.n	800440a <__kernel_cos+0xea>
 8004454:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004490 <__kernel_cos+0x170>
 8004458:	e7db      	b.n	8004412 <__kernel_cos+0xf2>
 800445a:	bf00      	nop
 800445c:	f3af 8000 	nop.w
 8004460:	be8838d4 	.word	0xbe8838d4
 8004464:	bda8fae9 	.word	0xbda8fae9
 8004468:	bdb4b1c4 	.word	0xbdb4b1c4
 800446c:	3e21ee9e 	.word	0x3e21ee9e
 8004470:	809c52ad 	.word	0x809c52ad
 8004474:	3e927e4f 	.word	0x3e927e4f
 8004478:	19cb1590 	.word	0x19cb1590
 800447c:	3efa01a0 	.word	0x3efa01a0
 8004480:	16c15177 	.word	0x16c15177
 8004484:	3f56c16c 	.word	0x3f56c16c
 8004488:	5555554c 	.word	0x5555554c
 800448c:	3fa55555 	.word	0x3fa55555
 8004490:	00000000 	.word	0x00000000
 8004494:	3ff00000 	.word	0x3ff00000
 8004498:	3fe00000 	.word	0x3fe00000
 800449c:	3fd33332 	.word	0x3fd33332
 80044a0:	3ff00000 	.word	0x3ff00000
 80044a4:	3fe90000 	.word	0x3fe90000
 80044a8:	3fd20000 	.word	0x3fd20000
 80044ac:	00000000 	.word	0x00000000

080044b0 <__kernel_sin>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	ec55 4b10 	vmov	r4, r5, d0
 80044b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80044bc:	b085      	sub	sp, #20
 80044be:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80044c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80044c6:	4680      	mov	r8, r0
 80044c8:	d205      	bcs.n	80044d6 <__kernel_sin+0x26>
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	f7fc fad1 	bl	8000a74 <__aeabi_d2iz>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d052      	beq.n	800457c <__kernel_sin+0xcc>
 80044d6:	4622      	mov	r2, r4
 80044d8:	462b      	mov	r3, r5
 80044da:	4620      	mov	r0, r4
 80044dc:	4629      	mov	r1, r5
 80044de:	f7fc f82f 	bl	8000540 <__aeabi_dmul>
 80044e2:	4682      	mov	sl, r0
 80044e4:	468b      	mov	fp, r1
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4620      	mov	r0, r4
 80044ec:	4629      	mov	r1, r5
 80044ee:	f7fc f827 	bl	8000540 <__aeabi_dmul>
 80044f2:	a342      	add	r3, pc, #264	@ (adr r3, 80045fc <__kernel_sin+0x14c>)
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	e9cd 0100 	strd	r0, r1, [sp]
 80044fc:	4650      	mov	r0, sl
 80044fe:	4659      	mov	r1, fp
 8004500:	f7fc f81e 	bl	8000540 <__aeabi_dmul>
 8004504:	a33f      	add	r3, pc, #252	@ (adr r3, 8004604 <__kernel_sin+0x154>)
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f7fb fe61 	bl	80001d0 <__aeabi_dsub>
 800450e:	4652      	mov	r2, sl
 8004510:	465b      	mov	r3, fp
 8004512:	f7fc f815 	bl	8000540 <__aeabi_dmul>
 8004516:	a33d      	add	r3, pc, #244	@ (adr r3, 800460c <__kernel_sin+0x15c>)
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f7fb fe5a 	bl	80001d4 <__adddf3>
 8004520:	4652      	mov	r2, sl
 8004522:	465b      	mov	r3, fp
 8004524:	f7fc f80c 	bl	8000540 <__aeabi_dmul>
 8004528:	a33a      	add	r3, pc, #232	@ (adr r3, 8004614 <__kernel_sin+0x164>)
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f7fb fe4f 	bl	80001d0 <__aeabi_dsub>
 8004532:	4652      	mov	r2, sl
 8004534:	465b      	mov	r3, fp
 8004536:	f7fc f803 	bl	8000540 <__aeabi_dmul>
 800453a:	a338      	add	r3, pc, #224	@ (adr r3, 800461c <__kernel_sin+0x16c>)
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f7fb fe48 	bl	80001d4 <__adddf3>
 8004544:	4606      	mov	r6, r0
 8004546:	460f      	mov	r7, r1
 8004548:	f1b8 0f00 	cmp.w	r8, #0
 800454c:	d11b      	bne.n	8004586 <__kernel_sin+0xd6>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4650      	mov	r0, sl
 8004554:	4659      	mov	r1, fp
 8004556:	f7fb fff3 	bl	8000540 <__aeabi_dmul>
 800455a:	a325      	add	r3, pc, #148	@ (adr r3, 80045f0 <__kernel_sin+0x140>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f7fb fe36 	bl	80001d0 <__aeabi_dsub>
 8004564:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004568:	f7fb ffea 	bl	8000540 <__aeabi_dmul>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4620      	mov	r0, r4
 8004572:	4629      	mov	r1, r5
 8004574:	f7fb fe2e 	bl	80001d4 <__adddf3>
 8004578:	4604      	mov	r4, r0
 800457a:	460d      	mov	r5, r1
 800457c:	ec45 4b10 	vmov	d0, r4, r5
 8004580:	b005      	add	sp, #20
 8004582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800458a:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <__kernel_sin+0x148>)
 800458c:	2200      	movs	r2, #0
 800458e:	f7fb ffd7 	bl	8000540 <__aeabi_dmul>
 8004592:	4632      	mov	r2, r6
 8004594:	4680      	mov	r8, r0
 8004596:	4689      	mov	r9, r1
 8004598:	463b      	mov	r3, r7
 800459a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800459e:	f7fb ffcf 	bl	8000540 <__aeabi_dmul>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4640      	mov	r0, r8
 80045a8:	4649      	mov	r1, r9
 80045aa:	f7fb fe11 	bl	80001d0 <__aeabi_dsub>
 80045ae:	4652      	mov	r2, sl
 80045b0:	465b      	mov	r3, fp
 80045b2:	f7fb ffc5 	bl	8000540 <__aeabi_dmul>
 80045b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045ba:	f7fb fe09 	bl	80001d0 <__aeabi_dsub>
 80045be:	a30c      	add	r3, pc, #48	@ (adr r3, 80045f0 <__kernel_sin+0x140>)
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	4606      	mov	r6, r0
 80045c6:	460f      	mov	r7, r1
 80045c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045cc:	f7fb ffb8 	bl	8000540 <__aeabi_dmul>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4630      	mov	r0, r6
 80045d6:	4639      	mov	r1, r7
 80045d8:	f7fb fdfc 	bl	80001d4 <__adddf3>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4620      	mov	r0, r4
 80045e2:	4629      	mov	r1, r5
 80045e4:	f7fb fdf4 	bl	80001d0 <__aeabi_dsub>
 80045e8:	e7c6      	b.n	8004578 <__kernel_sin+0xc8>
 80045ea:	bf00      	nop
 80045ec:	f3af 8000 	nop.w
 80045f0:	55555549 	.word	0x55555549
 80045f4:	3fc55555 	.word	0x3fc55555
 80045f8:	3fe00000 	.word	0x3fe00000
 80045fc:	5acfd57c 	.word	0x5acfd57c
 8004600:	3de5d93a 	.word	0x3de5d93a
 8004604:	8a2b9ceb 	.word	0x8a2b9ceb
 8004608:	3e5ae5e6 	.word	0x3e5ae5e6
 800460c:	57b1fe7d 	.word	0x57b1fe7d
 8004610:	3ec71de3 	.word	0x3ec71de3
 8004614:	19c161d5 	.word	0x19c161d5
 8004618:	3f2a01a0 	.word	0x3f2a01a0
 800461c:	1110f8a6 	.word	0x1110f8a6
 8004620:	3f811111 	.word	0x3f811111
 8004624:	00000000 	.word	0x00000000

08004628 <__ieee754_exp>:
 8004628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	ec55 4b10 	vmov	r4, r5, d0
 8004630:	49b1      	ldr	r1, [pc, #708]	@ (80048f8 <__ieee754_exp+0x2d0>)
 8004632:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004636:	428a      	cmp	r2, r1
 8004638:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800463c:	d936      	bls.n	80046ac <__ieee754_exp+0x84>
 800463e:	49af      	ldr	r1, [pc, #700]	@ (80048fc <__ieee754_exp+0x2d4>)
 8004640:	428a      	cmp	r2, r1
 8004642:	d914      	bls.n	800466e <__ieee754_exp+0x46>
 8004644:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004648:	4323      	orrs	r3, r4
 800464a:	4622      	mov	r2, r4
 800464c:	d007      	beq.n	800465e <__ieee754_exp+0x36>
 800464e:	462b      	mov	r3, r5
 8004650:	4620      	mov	r0, r4
 8004652:	4629      	mov	r1, r5
 8004654:	f7fb fdbe 	bl	80001d4 <__adddf3>
 8004658:	4604      	mov	r4, r0
 800465a:	460d      	mov	r5, r1
 800465c:	e002      	b.n	8004664 <__ieee754_exp+0x3c>
 800465e:	2e00      	cmp	r6, #0
 8004660:	f040 8118 	bne.w	8004894 <__ieee754_exp+0x26c>
 8004664:	ec45 4b10 	vmov	d0, r4, r5
 8004668:	b004      	add	sp, #16
 800466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466e:	a38c      	add	r3, pc, #560	@ (adr r3, 80048a0 <__ieee754_exp+0x278>)
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	4620      	mov	r0, r4
 8004676:	4629      	mov	r1, r5
 8004678:	f7fc f9f2 	bl	8000a60 <__aeabi_dcmpgt>
 800467c:	4607      	mov	r7, r0
 800467e:	b128      	cbz	r0, 800468c <__ieee754_exp+0x64>
 8004680:	2000      	movs	r0, #0
 8004682:	b004      	add	sp, #16
 8004684:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004688:	f000 bb82 	b.w	8004d90 <__math_oflow>
 800468c:	a386      	add	r3, pc, #536	@ (adr r3, 80048a8 <__ieee754_exp+0x280>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	4620      	mov	r0, r4
 8004694:	4629      	mov	r1, r5
 8004696:	f7fc f9c5 	bl	8000a24 <__aeabi_dcmplt>
 800469a:	2800      	cmp	r0, #0
 800469c:	f000 8087 	beq.w	80047ae <__ieee754_exp+0x186>
 80046a0:	4638      	mov	r0, r7
 80046a2:	b004      	add	sp, #16
 80046a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a8:	f000 bb6a 	b.w	8004d80 <__math_uflow>
 80046ac:	4b94      	ldr	r3, [pc, #592]	@ (8004900 <__ieee754_exp+0x2d8>)
 80046ae:	429a      	cmp	r2, r3
 80046b0:	f240 80a9 	bls.w	8004806 <__ieee754_exp+0x1de>
 80046b4:	4b93      	ldr	r3, [pc, #588]	@ (8004904 <__ieee754_exp+0x2dc>)
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d879      	bhi.n	80047ae <__ieee754_exp+0x186>
 80046ba:	4b93      	ldr	r3, [pc, #588]	@ (8004908 <__ieee754_exp+0x2e0>)
 80046bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	4620      	mov	r0, r4
 80046c6:	4629      	mov	r1, r5
 80046c8:	f7fb fd82 	bl	80001d0 <__aeabi_dsub>
 80046cc:	4b8f      	ldr	r3, [pc, #572]	@ (800490c <__ieee754_exp+0x2e4>)
 80046ce:	00f7      	lsls	r7, r6, #3
 80046d0:	443b      	add	r3, r7
 80046d2:	ed93 7b00 	vldr	d7, [r3]
 80046d6:	ed8d 7b00 	vstr	d7, [sp]
 80046da:	f1c6 0a01 	rsb	sl, r6, #1
 80046de:	4680      	mov	r8, r0
 80046e0:	4689      	mov	r9, r1
 80046e2:	ebaa 0a06 	sub.w	sl, sl, r6
 80046e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046ea:	4640      	mov	r0, r8
 80046ec:	4649      	mov	r1, r9
 80046ee:	f7fb fd6f 	bl	80001d0 <__aeabi_dsub>
 80046f2:	4604      	mov	r4, r0
 80046f4:	460d      	mov	r5, r1
 80046f6:	4622      	mov	r2, r4
 80046f8:	462b      	mov	r3, r5
 80046fa:	4620      	mov	r0, r4
 80046fc:	4629      	mov	r1, r5
 80046fe:	f7fb ff1f 	bl	8000540 <__aeabi_dmul>
 8004702:	a36b      	add	r3, pc, #428	@ (adr r3, 80048b0 <__ieee754_exp+0x288>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	4606      	mov	r6, r0
 800470a:	460f      	mov	r7, r1
 800470c:	f7fb ff18 	bl	8000540 <__aeabi_dmul>
 8004710:	a369      	add	r3, pc, #420	@ (adr r3, 80048b8 <__ieee754_exp+0x290>)
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f7fb fd5b 	bl	80001d0 <__aeabi_dsub>
 800471a:	4632      	mov	r2, r6
 800471c:	463b      	mov	r3, r7
 800471e:	f7fb ff0f 	bl	8000540 <__aeabi_dmul>
 8004722:	a367      	add	r3, pc, #412	@ (adr r3, 80048c0 <__ieee754_exp+0x298>)
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f7fb fd54 	bl	80001d4 <__adddf3>
 800472c:	4632      	mov	r2, r6
 800472e:	463b      	mov	r3, r7
 8004730:	f7fb ff06 	bl	8000540 <__aeabi_dmul>
 8004734:	a364      	add	r3, pc, #400	@ (adr r3, 80048c8 <__ieee754_exp+0x2a0>)
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f7fb fd49 	bl	80001d0 <__aeabi_dsub>
 800473e:	4632      	mov	r2, r6
 8004740:	463b      	mov	r3, r7
 8004742:	f7fb fefd 	bl	8000540 <__aeabi_dmul>
 8004746:	a362      	add	r3, pc, #392	@ (adr r3, 80048d0 <__ieee754_exp+0x2a8>)
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f7fb fd42 	bl	80001d4 <__adddf3>
 8004750:	4632      	mov	r2, r6
 8004752:	463b      	mov	r3, r7
 8004754:	f7fb fef4 	bl	8000540 <__aeabi_dmul>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4620      	mov	r0, r4
 800475e:	4629      	mov	r1, r5
 8004760:	f7fb fd36 	bl	80001d0 <__aeabi_dsub>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4606      	mov	r6, r0
 800476a:	460f      	mov	r7, r1
 800476c:	4620      	mov	r0, r4
 800476e:	4629      	mov	r1, r5
 8004770:	f7fb fee6 	bl	8000540 <__aeabi_dmul>
 8004774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004778:	f1ba 0f00 	cmp.w	sl, #0
 800477c:	d15c      	bne.n	8004838 <__ieee754_exp+0x210>
 800477e:	2200      	movs	r2, #0
 8004780:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004784:	4630      	mov	r0, r6
 8004786:	4639      	mov	r1, r7
 8004788:	f7fb fd22 	bl	80001d0 <__aeabi_dsub>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004794:	f7fb fffe 	bl	8000794 <__aeabi_ddiv>
 8004798:	4622      	mov	r2, r4
 800479a:	462b      	mov	r3, r5
 800479c:	f7fb fd18 	bl	80001d0 <__aeabi_dsub>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	2000      	movs	r0, #0
 80047a6:	495a      	ldr	r1, [pc, #360]	@ (8004910 <__ieee754_exp+0x2e8>)
 80047a8:	f7fb fd12 	bl	80001d0 <__aeabi_dsub>
 80047ac:	e754      	b.n	8004658 <__ieee754_exp+0x30>
 80047ae:	4b59      	ldr	r3, [pc, #356]	@ (8004914 <__ieee754_exp+0x2ec>)
 80047b0:	4620      	mov	r0, r4
 80047b2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80047b6:	4629      	mov	r1, r5
 80047b8:	a347      	add	r3, pc, #284	@ (adr r3, 80048d8 <__ieee754_exp+0x2b0>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f7fb febf 	bl	8000540 <__aeabi_dmul>
 80047c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80047c6:	f7fb fd05 	bl	80001d4 <__adddf3>
 80047ca:	f7fc f953 	bl	8000a74 <__aeabi_d2iz>
 80047ce:	4682      	mov	sl, r0
 80047d0:	f7fb fe4c 	bl	800046c <__aeabi_i2d>
 80047d4:	a342      	add	r3, pc, #264	@ (adr r3, 80048e0 <__ieee754_exp+0x2b8>)
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	4606      	mov	r6, r0
 80047dc:	460f      	mov	r7, r1
 80047de:	f7fb feaf 	bl	8000540 <__aeabi_dmul>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4620      	mov	r0, r4
 80047e8:	4629      	mov	r1, r5
 80047ea:	f7fb fcf1 	bl	80001d0 <__aeabi_dsub>
 80047ee:	a33e      	add	r3, pc, #248	@ (adr r3, 80048e8 <__ieee754_exp+0x2c0>)
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	4680      	mov	r8, r0
 80047f6:	4689      	mov	r9, r1
 80047f8:	4630      	mov	r0, r6
 80047fa:	4639      	mov	r1, r7
 80047fc:	f7fb fea0 	bl	8000540 <__aeabi_dmul>
 8004800:	e9cd 0100 	strd	r0, r1, [sp]
 8004804:	e76f      	b.n	80046e6 <__ieee754_exp+0xbe>
 8004806:	4b44      	ldr	r3, [pc, #272]	@ (8004918 <__ieee754_exp+0x2f0>)
 8004808:	429a      	cmp	r2, r3
 800480a:	d810      	bhi.n	800482e <__ieee754_exp+0x206>
 800480c:	a338      	add	r3, pc, #224	@ (adr r3, 80048f0 <__ieee754_exp+0x2c8>)
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	4620      	mov	r0, r4
 8004814:	4629      	mov	r1, r5
 8004816:	f7fb fcdd 	bl	80001d4 <__adddf3>
 800481a:	4b3d      	ldr	r3, [pc, #244]	@ (8004910 <__ieee754_exp+0x2e8>)
 800481c:	2200      	movs	r2, #0
 800481e:	f7fc f91f 	bl	8000a60 <__aeabi_dcmpgt>
 8004822:	b138      	cbz	r0, 8004834 <__ieee754_exp+0x20c>
 8004824:	4b3a      	ldr	r3, [pc, #232]	@ (8004910 <__ieee754_exp+0x2e8>)
 8004826:	2200      	movs	r2, #0
 8004828:	4620      	mov	r0, r4
 800482a:	4629      	mov	r1, r5
 800482c:	e712      	b.n	8004654 <__ieee754_exp+0x2c>
 800482e:	f04f 0a00 	mov.w	sl, #0
 8004832:	e760      	b.n	80046f6 <__ieee754_exp+0xce>
 8004834:	4682      	mov	sl, r0
 8004836:	e75e      	b.n	80046f6 <__ieee754_exp+0xce>
 8004838:	4632      	mov	r2, r6
 800483a:	463b      	mov	r3, r7
 800483c:	2000      	movs	r0, #0
 800483e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004842:	f7fb fcc5 	bl	80001d0 <__aeabi_dsub>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800484e:	f7fb ffa1 	bl	8000794 <__aeabi_ddiv>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	e9dd 0100 	ldrd	r0, r1, [sp]
 800485a:	f7fb fcb9 	bl	80001d0 <__aeabi_dsub>
 800485e:	4642      	mov	r2, r8
 8004860:	464b      	mov	r3, r9
 8004862:	f7fb fcb5 	bl	80001d0 <__aeabi_dsub>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	2000      	movs	r0, #0
 800486c:	4928      	ldr	r1, [pc, #160]	@ (8004910 <__ieee754_exp+0x2e8>)
 800486e:	f7fb fcaf 	bl	80001d0 <__aeabi_dsub>
 8004872:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8004876:	4592      	cmp	sl, r2
 8004878:	db02      	blt.n	8004880 <__ieee754_exp+0x258>
 800487a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800487e:	e6eb      	b.n	8004658 <__ieee754_exp+0x30>
 8004880:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8004884:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8004888:	2200      	movs	r2, #0
 800488a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800488e:	f7fb fe57 	bl	8000540 <__aeabi_dmul>
 8004892:	e6e1      	b.n	8004658 <__ieee754_exp+0x30>
 8004894:	2400      	movs	r4, #0
 8004896:	2500      	movs	r5, #0
 8004898:	e6e4      	b.n	8004664 <__ieee754_exp+0x3c>
 800489a:	bf00      	nop
 800489c:	f3af 8000 	nop.w
 80048a0:	fefa39ef 	.word	0xfefa39ef
 80048a4:	40862e42 	.word	0x40862e42
 80048a8:	d52d3051 	.word	0xd52d3051
 80048ac:	c0874910 	.word	0xc0874910
 80048b0:	72bea4d0 	.word	0x72bea4d0
 80048b4:	3e663769 	.word	0x3e663769
 80048b8:	c5d26bf1 	.word	0xc5d26bf1
 80048bc:	3ebbbd41 	.word	0x3ebbbd41
 80048c0:	af25de2c 	.word	0xaf25de2c
 80048c4:	3f11566a 	.word	0x3f11566a
 80048c8:	16bebd93 	.word	0x16bebd93
 80048cc:	3f66c16c 	.word	0x3f66c16c
 80048d0:	5555553e 	.word	0x5555553e
 80048d4:	3fc55555 	.word	0x3fc55555
 80048d8:	652b82fe 	.word	0x652b82fe
 80048dc:	3ff71547 	.word	0x3ff71547
 80048e0:	fee00000 	.word	0xfee00000
 80048e4:	3fe62e42 	.word	0x3fe62e42
 80048e8:	35793c76 	.word	0x35793c76
 80048ec:	3dea39ef 	.word	0x3dea39ef
 80048f0:	8800759c 	.word	0x8800759c
 80048f4:	7e37e43c 	.word	0x7e37e43c
 80048f8:	40862e41 	.word	0x40862e41
 80048fc:	7fefffff 	.word	0x7fefffff
 8004900:	3fd62e42 	.word	0x3fd62e42
 8004904:	3ff0a2b1 	.word	0x3ff0a2b1
 8004908:	080056b0 	.word	0x080056b0
 800490c:	080056a0 	.word	0x080056a0
 8004910:	3ff00000 	.word	0x3ff00000
 8004914:	080056c0 	.word	0x080056c0
 8004918:	3defffff 	.word	0x3defffff
 800491c:	00000000 	.word	0x00000000

08004920 <__ieee754_rem_pio2>:
 8004920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004924:	ec57 6b10 	vmov	r6, r7, d0
 8004928:	4bc5      	ldr	r3, [pc, #788]	@ (8004c40 <__ieee754_rem_pio2+0x320>)
 800492a:	b08d      	sub	sp, #52	@ 0x34
 800492c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004930:	4598      	cmp	r8, r3
 8004932:	4604      	mov	r4, r0
 8004934:	9704      	str	r7, [sp, #16]
 8004936:	d807      	bhi.n	8004948 <__ieee754_rem_pio2+0x28>
 8004938:	2200      	movs	r2, #0
 800493a:	2300      	movs	r3, #0
 800493c:	ed80 0b00 	vstr	d0, [r0]
 8004940:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004944:	2500      	movs	r5, #0
 8004946:	e028      	b.n	800499a <__ieee754_rem_pio2+0x7a>
 8004948:	4bbe      	ldr	r3, [pc, #760]	@ (8004c44 <__ieee754_rem_pio2+0x324>)
 800494a:	4598      	cmp	r8, r3
 800494c:	d878      	bhi.n	8004a40 <__ieee754_rem_pio2+0x120>
 800494e:	9b04      	ldr	r3, [sp, #16]
 8004950:	4dbd      	ldr	r5, [pc, #756]	@ (8004c48 <__ieee754_rem_pio2+0x328>)
 8004952:	2b00      	cmp	r3, #0
 8004954:	4630      	mov	r0, r6
 8004956:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004c08 <__ieee754_rem_pio2+0x2e8>)
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	4639      	mov	r1, r7
 800495e:	dd38      	ble.n	80049d2 <__ieee754_rem_pio2+0xb2>
 8004960:	f7fb fc36 	bl	80001d0 <__aeabi_dsub>
 8004964:	45a8      	cmp	r8, r5
 8004966:	4606      	mov	r6, r0
 8004968:	460f      	mov	r7, r1
 800496a:	d01a      	beq.n	80049a2 <__ieee754_rem_pio2+0x82>
 800496c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004c10 <__ieee754_rem_pio2+0x2f0>)
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f7fb fc2d 	bl	80001d0 <__aeabi_dsub>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4680      	mov	r8, r0
 800497c:	4689      	mov	r9, r1
 800497e:	4630      	mov	r0, r6
 8004980:	4639      	mov	r1, r7
 8004982:	f7fb fc25 	bl	80001d0 <__aeabi_dsub>
 8004986:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004c10 <__ieee754_rem_pio2+0x2f0>)
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	f7fb fc20 	bl	80001d0 <__aeabi_dsub>
 8004990:	e9c4 8900 	strd	r8, r9, [r4]
 8004994:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004998:	2501      	movs	r5, #1
 800499a:	4628      	mov	r0, r5
 800499c:	b00d      	add	sp, #52	@ 0x34
 800499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a2:	a39d      	add	r3, pc, #628	@ (adr r3, 8004c18 <__ieee754_rem_pio2+0x2f8>)
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f7fb fc12 	bl	80001d0 <__aeabi_dsub>
 80049ac:	a39c      	add	r3, pc, #624	@ (adr r3, 8004c20 <__ieee754_rem_pio2+0x300>)
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	4606      	mov	r6, r0
 80049b4:	460f      	mov	r7, r1
 80049b6:	f7fb fc0b 	bl	80001d0 <__aeabi_dsub>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4680      	mov	r8, r0
 80049c0:	4689      	mov	r9, r1
 80049c2:	4630      	mov	r0, r6
 80049c4:	4639      	mov	r1, r7
 80049c6:	f7fb fc03 	bl	80001d0 <__aeabi_dsub>
 80049ca:	a395      	add	r3, pc, #596	@ (adr r3, 8004c20 <__ieee754_rem_pio2+0x300>)
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	e7dc      	b.n	800498c <__ieee754_rem_pio2+0x6c>
 80049d2:	f7fb fbff 	bl	80001d4 <__adddf3>
 80049d6:	45a8      	cmp	r8, r5
 80049d8:	4606      	mov	r6, r0
 80049da:	460f      	mov	r7, r1
 80049dc:	d018      	beq.n	8004a10 <__ieee754_rem_pio2+0xf0>
 80049de:	a38c      	add	r3, pc, #560	@ (adr r3, 8004c10 <__ieee754_rem_pio2+0x2f0>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fb fbf6 	bl	80001d4 <__adddf3>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4680      	mov	r8, r0
 80049ee:	4689      	mov	r9, r1
 80049f0:	4630      	mov	r0, r6
 80049f2:	4639      	mov	r1, r7
 80049f4:	f7fb fbec 	bl	80001d0 <__aeabi_dsub>
 80049f8:	a385      	add	r3, pc, #532	@ (adr r3, 8004c10 <__ieee754_rem_pio2+0x2f0>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f7fb fbe9 	bl	80001d4 <__adddf3>
 8004a02:	f04f 35ff 	mov.w	r5, #4294967295
 8004a06:	e9c4 8900 	strd	r8, r9, [r4]
 8004a0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004a0e:	e7c4      	b.n	800499a <__ieee754_rem_pio2+0x7a>
 8004a10:	a381      	add	r3, pc, #516	@ (adr r3, 8004c18 <__ieee754_rem_pio2+0x2f8>)
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	f7fb fbdd 	bl	80001d4 <__adddf3>
 8004a1a:	a381      	add	r3, pc, #516	@ (adr r3, 8004c20 <__ieee754_rem_pio2+0x300>)
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	4606      	mov	r6, r0
 8004a22:	460f      	mov	r7, r1
 8004a24:	f7fb fbd6 	bl	80001d4 <__adddf3>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4680      	mov	r8, r0
 8004a2e:	4689      	mov	r9, r1
 8004a30:	4630      	mov	r0, r6
 8004a32:	4639      	mov	r1, r7
 8004a34:	f7fb fbcc 	bl	80001d0 <__aeabi_dsub>
 8004a38:	a379      	add	r3, pc, #484	@ (adr r3, 8004c20 <__ieee754_rem_pio2+0x300>)
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	e7de      	b.n	80049fe <__ieee754_rem_pio2+0xde>
 8004a40:	4b82      	ldr	r3, [pc, #520]	@ (8004c4c <__ieee754_rem_pio2+0x32c>)
 8004a42:	4598      	cmp	r8, r3
 8004a44:	f200 80d1 	bhi.w	8004bea <__ieee754_rem_pio2+0x2ca>
 8004a48:	f000 f966 	bl	8004d18 <fabs>
 8004a4c:	ec57 6b10 	vmov	r6, r7, d0
 8004a50:	a375      	add	r3, pc, #468	@ (adr r3, 8004c28 <__ieee754_rem_pio2+0x308>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	4630      	mov	r0, r6
 8004a58:	4639      	mov	r1, r7
 8004a5a:	f7fb fd71 	bl	8000540 <__aeabi_dmul>
 8004a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c50 <__ieee754_rem_pio2+0x330>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	f7fb fbb7 	bl	80001d4 <__adddf3>
 8004a66:	f7fc f805 	bl	8000a74 <__aeabi_d2iz>
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	f7fb fcfe 	bl	800046c <__aeabi_i2d>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a78:	a363      	add	r3, pc, #396	@ (adr r3, 8004c08 <__ieee754_rem_pio2+0x2e8>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb fd5f 	bl	8000540 <__aeabi_dmul>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4630      	mov	r0, r6
 8004a88:	4639      	mov	r1, r7
 8004a8a:	f7fb fba1 	bl	80001d0 <__aeabi_dsub>
 8004a8e:	a360      	add	r3, pc, #384	@ (adr r3, 8004c10 <__ieee754_rem_pio2+0x2f0>)
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	4682      	mov	sl, r0
 8004a96:	468b      	mov	fp, r1
 8004a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a9c:	f7fb fd50 	bl	8000540 <__aeabi_dmul>
 8004aa0:	2d1f      	cmp	r5, #31
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	460f      	mov	r7, r1
 8004aa6:	dc0c      	bgt.n	8004ac2 <__ieee754_rem_pio2+0x1a2>
 8004aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8004c54 <__ieee754_rem_pio2+0x334>)
 8004aaa:	1e6a      	subs	r2, r5, #1
 8004aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab0:	4543      	cmp	r3, r8
 8004ab2:	d006      	beq.n	8004ac2 <__ieee754_rem_pio2+0x1a2>
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	4650      	mov	r0, sl
 8004aba:	4659      	mov	r1, fp
 8004abc:	f7fb fb88 	bl	80001d0 <__aeabi_dsub>
 8004ac0:	e00e      	b.n	8004ae0 <__ieee754_rem_pio2+0x1c0>
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	4650      	mov	r0, sl
 8004ac8:	4659      	mov	r1, fp
 8004aca:	f7fb fb81 	bl	80001d0 <__aeabi_dsub>
 8004ace:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004ad2:	9305      	str	r3, [sp, #20]
 8004ad4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ad8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	dc02      	bgt.n	8004ae6 <__ieee754_rem_pio2+0x1c6>
 8004ae0:	e9c4 0100 	strd	r0, r1, [r4]
 8004ae4:	e039      	b.n	8004b5a <__ieee754_rem_pio2+0x23a>
 8004ae6:	a34c      	add	r3, pc, #304	@ (adr r3, 8004c18 <__ieee754_rem_pio2+0x2f8>)
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004af0:	f7fb fd26 	bl	8000540 <__aeabi_dmul>
 8004af4:	4606      	mov	r6, r0
 8004af6:	460f      	mov	r7, r1
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4650      	mov	r0, sl
 8004afe:	4659      	mov	r1, fp
 8004b00:	f7fb fb66 	bl	80001d0 <__aeabi_dsub>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4680      	mov	r8, r0
 8004b0a:	4689      	mov	r9, r1
 8004b0c:	4650      	mov	r0, sl
 8004b0e:	4659      	mov	r1, fp
 8004b10:	f7fb fb5e 	bl	80001d0 <__aeabi_dsub>
 8004b14:	4632      	mov	r2, r6
 8004b16:	463b      	mov	r3, r7
 8004b18:	f7fb fb5a 	bl	80001d0 <__aeabi_dsub>
 8004b1c:	a340      	add	r3, pc, #256	@ (adr r3, 8004c20 <__ieee754_rem_pio2+0x300>)
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	4606      	mov	r6, r0
 8004b24:	460f      	mov	r7, r1
 8004b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b2a:	f7fb fd09 	bl	8000540 <__aeabi_dmul>
 8004b2e:	4632      	mov	r2, r6
 8004b30:	463b      	mov	r3, r7
 8004b32:	f7fb fb4d 	bl	80001d0 <__aeabi_dsub>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	460f      	mov	r7, r1
 8004b3e:	4640      	mov	r0, r8
 8004b40:	4649      	mov	r1, r9
 8004b42:	f7fb fb45 	bl	80001d0 <__aeabi_dsub>
 8004b46:	9a05      	ldr	r2, [sp, #20]
 8004b48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b31      	cmp	r3, #49	@ 0x31
 8004b50:	dc20      	bgt.n	8004b94 <__ieee754_rem_pio2+0x274>
 8004b52:	e9c4 0100 	strd	r0, r1, [r4]
 8004b56:	46c2      	mov	sl, r8
 8004b58:	46cb      	mov	fp, r9
 8004b5a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004b5e:	4650      	mov	r0, sl
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	4659      	mov	r1, fp
 8004b66:	f7fb fb33 	bl	80001d0 <__aeabi_dsub>
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	f7fb fb2f 	bl	80001d0 <__aeabi_dsub>
 8004b72:	9b04      	ldr	r3, [sp, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b7a:	f6bf af0e 	bge.w	800499a <__ieee754_rem_pio2+0x7a>
 8004b7e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004b82:	6063      	str	r3, [r4, #4]
 8004b84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004b88:	f8c4 8000 	str.w	r8, [r4]
 8004b8c:	60a0      	str	r0, [r4, #8]
 8004b8e:	60e3      	str	r3, [r4, #12]
 8004b90:	426d      	negs	r5, r5
 8004b92:	e702      	b.n	800499a <__ieee754_rem_pio2+0x7a>
 8004b94:	a326      	add	r3, pc, #152	@ (adr r3, 8004c30 <__ieee754_rem_pio2+0x310>)
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b9e:	f7fb fccf 	bl	8000540 <__aeabi_dmul>
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460f      	mov	r7, r1
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4640      	mov	r0, r8
 8004bac:	4649      	mov	r1, r9
 8004bae:	f7fb fb0f 	bl	80001d0 <__aeabi_dsub>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4682      	mov	sl, r0
 8004bb8:	468b      	mov	fp, r1
 8004bba:	4640      	mov	r0, r8
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	f7fb fb07 	bl	80001d0 <__aeabi_dsub>
 8004bc2:	4632      	mov	r2, r6
 8004bc4:	463b      	mov	r3, r7
 8004bc6:	f7fb fb03 	bl	80001d0 <__aeabi_dsub>
 8004bca:	a31b      	add	r3, pc, #108	@ (adr r3, 8004c38 <__ieee754_rem_pio2+0x318>)
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	4606      	mov	r6, r0
 8004bd2:	460f      	mov	r7, r1
 8004bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bd8:	f7fb fcb2 	bl	8000540 <__aeabi_dmul>
 8004bdc:	4632      	mov	r2, r6
 8004bde:	463b      	mov	r3, r7
 8004be0:	f7fb faf6 	bl	80001d0 <__aeabi_dsub>
 8004be4:	4606      	mov	r6, r0
 8004be6:	460f      	mov	r7, r1
 8004be8:	e764      	b.n	8004ab4 <__ieee754_rem_pio2+0x194>
 8004bea:	4b1b      	ldr	r3, [pc, #108]	@ (8004c58 <__ieee754_rem_pio2+0x338>)
 8004bec:	4598      	cmp	r8, r3
 8004bee:	d935      	bls.n	8004c5c <__ieee754_rem_pio2+0x33c>
 8004bf0:	4632      	mov	r2, r6
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	4639      	mov	r1, r7
 8004bf8:	f7fb faea 	bl	80001d0 <__aeabi_dsub>
 8004bfc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004c00:	e9c4 0100 	strd	r0, r1, [r4]
 8004c04:	e69e      	b.n	8004944 <__ieee754_rem_pio2+0x24>
 8004c06:	bf00      	nop
 8004c08:	54400000 	.word	0x54400000
 8004c0c:	3ff921fb 	.word	0x3ff921fb
 8004c10:	1a626331 	.word	0x1a626331
 8004c14:	3dd0b461 	.word	0x3dd0b461
 8004c18:	1a600000 	.word	0x1a600000
 8004c1c:	3dd0b461 	.word	0x3dd0b461
 8004c20:	2e037073 	.word	0x2e037073
 8004c24:	3ba3198a 	.word	0x3ba3198a
 8004c28:	6dc9c883 	.word	0x6dc9c883
 8004c2c:	3fe45f30 	.word	0x3fe45f30
 8004c30:	2e000000 	.word	0x2e000000
 8004c34:	3ba3198a 	.word	0x3ba3198a
 8004c38:	252049c1 	.word	0x252049c1
 8004c3c:	397b839a 	.word	0x397b839a
 8004c40:	3fe921fb 	.word	0x3fe921fb
 8004c44:	4002d97b 	.word	0x4002d97b
 8004c48:	3ff921fb 	.word	0x3ff921fb
 8004c4c:	413921fb 	.word	0x413921fb
 8004c50:	3fe00000 	.word	0x3fe00000
 8004c54:	080056d0 	.word	0x080056d0
 8004c58:	7fefffff 	.word	0x7fefffff
 8004c5c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004c60:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004c64:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004c68:	4630      	mov	r0, r6
 8004c6a:	460f      	mov	r7, r1
 8004c6c:	f7fb ff02 	bl	8000a74 <__aeabi_d2iz>
 8004c70:	f7fb fbfc 	bl	800046c <__aeabi_i2d>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4630      	mov	r0, r6
 8004c7a:	4639      	mov	r1, r7
 8004c7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c80:	f7fb faa6 	bl	80001d0 <__aeabi_dsub>
 8004c84:	4b22      	ldr	r3, [pc, #136]	@ (8004d10 <__ieee754_rem_pio2+0x3f0>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	f7fb fc5a 	bl	8000540 <__aeabi_dmul>
 8004c8c:	460f      	mov	r7, r1
 8004c8e:	4606      	mov	r6, r0
 8004c90:	f7fb fef0 	bl	8000a74 <__aeabi_d2iz>
 8004c94:	f7fb fbea 	bl	800046c <__aeabi_i2d>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ca4:	f7fb fa94 	bl	80001d0 <__aeabi_dsub>
 8004ca8:	4b19      	ldr	r3, [pc, #100]	@ (8004d10 <__ieee754_rem_pio2+0x3f0>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	f7fb fc48 	bl	8000540 <__aeabi_dmul>
 8004cb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004cb4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004cb8:	f04f 0803 	mov.w	r8, #3
 8004cbc:	2600      	movs	r6, #0
 8004cbe:	2700      	movs	r7, #0
 8004cc0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004cc4:	4632      	mov	r2, r6
 8004cc6:	463b      	mov	r3, r7
 8004cc8:	46c2      	mov	sl, r8
 8004cca:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cce:	f7fb fe9f 	bl	8000a10 <__aeabi_dcmpeq>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d1f4      	bne.n	8004cc0 <__ieee754_rem_pio2+0x3a0>
 8004cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8004d14 <__ieee754_rem_pio2+0x3f4>)
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	2302      	movs	r3, #2
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	462a      	mov	r2, r5
 8004ce0:	4653      	mov	r3, sl
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	a806      	add	r0, sp, #24
 8004ce6:	f000 f85b 	bl	8004da0 <__kernel_rem_pio2>
 8004cea:	9b04      	ldr	r3, [sp, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	4605      	mov	r5, r0
 8004cf0:	f6bf ae53 	bge.w	800499a <__ieee754_rem_pio2+0x7a>
 8004cf4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004cf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004cfc:	e9c4 2300 	strd	r2, r3, [r4]
 8004d00:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004d04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d08:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004d0c:	e740      	b.n	8004b90 <__ieee754_rem_pio2+0x270>
 8004d0e:	bf00      	nop
 8004d10:	41700000 	.word	0x41700000
 8004d14:	08005750 	.word	0x08005750

08004d18 <fabs>:
 8004d18:	ec51 0b10 	vmov	r0, r1, d0
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004d22:	ec43 2b10 	vmov	d0, r2, r3
 8004d26:	4770      	bx	lr

08004d28 <with_errno>:
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	ed2d 8b02 	vpush	{d8}
 8004d2e:	eeb0 8a40 	vmov.f32	s16, s0
 8004d32:	eef0 8a60 	vmov.f32	s17, s1
 8004d36:	4604      	mov	r4, r0
 8004d38:	f7ff fa1e 	bl	8004178 <__errno>
 8004d3c:	eeb0 0a48 	vmov.f32	s0, s16
 8004d40:	eef0 0a68 	vmov.f32	s1, s17
 8004d44:	ecbd 8b02 	vpop	{d8}
 8004d48:	6004      	str	r4, [r0, #0]
 8004d4a:	bd10      	pop	{r4, pc}

08004d4c <xflow>:
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	b507      	push	{r0, r1, r2, lr}
 8004d50:	ec51 0b10 	vmov	r0, r1, d0
 8004d54:	b183      	cbz	r3, 8004d78 <xflow+0x2c>
 8004d56:	4602      	mov	r2, r0
 8004d58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004d5c:	e9cd 2300 	strd	r2, r3, [sp]
 8004d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d64:	f7fb fbec 	bl	8000540 <__aeabi_dmul>
 8004d68:	ec41 0b10 	vmov	d0, r0, r1
 8004d6c:	2022      	movs	r0, #34	@ 0x22
 8004d6e:	b003      	add	sp, #12
 8004d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d74:	f7ff bfd8 	b.w	8004d28 <with_errno>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	e7ee      	b.n	8004d5c <xflow+0x10>
	...

08004d80 <__math_uflow>:
 8004d80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004d88 <__math_uflow+0x8>
 8004d84:	f7ff bfe2 	b.w	8004d4c <xflow>
 8004d88:	00000000 	.word	0x00000000
 8004d8c:	10000000 	.word	0x10000000

08004d90 <__math_oflow>:
 8004d90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004d98 <__math_oflow+0x8>
 8004d94:	f7ff bfda 	b.w	8004d4c <xflow>
 8004d98:	00000000 	.word	0x00000000
 8004d9c:	70000000 	.word	0x70000000

08004da0 <__kernel_rem_pio2>:
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	ed2d 8b02 	vpush	{d8}
 8004da8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004dac:	f112 0f14 	cmn.w	r2, #20
 8004db0:	9306      	str	r3, [sp, #24]
 8004db2:	9104      	str	r1, [sp, #16]
 8004db4:	4bbe      	ldr	r3, [pc, #760]	@ (80050b0 <__kernel_rem_pio2+0x310>)
 8004db6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004db8:	9008      	str	r0, [sp, #32]
 8004dba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	9b06      	ldr	r3, [sp, #24]
 8004dc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004dc6:	bfa8      	it	ge
 8004dc8:	1ed4      	subge	r4, r2, #3
 8004dca:	9305      	str	r3, [sp, #20]
 8004dcc:	bfb2      	itee	lt
 8004dce:	2400      	movlt	r4, #0
 8004dd0:	2318      	movge	r3, #24
 8004dd2:	fb94 f4f3 	sdivge	r4, r4, r3
 8004dd6:	f06f 0317 	mvn.w	r3, #23
 8004dda:	fb04 3303 	mla	r3, r4, r3, r3
 8004dde:	eb03 0b02 	add.w	fp, r3, r2
 8004de2:	9b00      	ldr	r3, [sp, #0]
 8004de4:	9a05      	ldr	r2, [sp, #20]
 8004de6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80050a0 <__kernel_rem_pio2+0x300>
 8004dea:	eb03 0802 	add.w	r8, r3, r2
 8004dee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004df0:	1aa7      	subs	r7, r4, r2
 8004df2:	ae20      	add	r6, sp, #128	@ 0x80
 8004df4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004df8:	2500      	movs	r5, #0
 8004dfa:	4545      	cmp	r5, r8
 8004dfc:	dd13      	ble.n	8004e26 <__kernel_rem_pio2+0x86>
 8004dfe:	9b06      	ldr	r3, [sp, #24]
 8004e00:	aa20      	add	r2, sp, #128	@ 0x80
 8004e02:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004e06:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8004e0a:	f04f 0800 	mov.w	r8, #0
 8004e0e:	9b00      	ldr	r3, [sp, #0]
 8004e10:	4598      	cmp	r8, r3
 8004e12:	dc31      	bgt.n	8004e78 <__kernel_rem_pio2+0xd8>
 8004e14:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80050a0 <__kernel_rem_pio2+0x300>
 8004e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004e20:	462f      	mov	r7, r5
 8004e22:	2600      	movs	r6, #0
 8004e24:	e01b      	b.n	8004e5e <__kernel_rem_pio2+0xbe>
 8004e26:	42ef      	cmn	r7, r5
 8004e28:	d407      	bmi.n	8004e3a <__kernel_rem_pio2+0x9a>
 8004e2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004e2e:	f7fb fb1d 	bl	800046c <__aeabi_i2d>
 8004e32:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004e36:	3501      	adds	r5, #1
 8004e38:	e7df      	b.n	8004dfa <__kernel_rem_pio2+0x5a>
 8004e3a:	ec51 0b18 	vmov	r0, r1, d8
 8004e3e:	e7f8      	b.n	8004e32 <__kernel_rem_pio2+0x92>
 8004e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004e48:	f7fb fb7a 	bl	8000540 <__aeabi_dmul>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e54:	f7fb f9be 	bl	80001d4 <__adddf3>
 8004e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e5c:	3601      	adds	r6, #1
 8004e5e:	9b05      	ldr	r3, [sp, #20]
 8004e60:	429e      	cmp	r6, r3
 8004e62:	f1a7 0708 	sub.w	r7, r7, #8
 8004e66:	ddeb      	ble.n	8004e40 <__kernel_rem_pio2+0xa0>
 8004e68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e6c:	f108 0801 	add.w	r8, r8, #1
 8004e70:	ecaa 7b02 	vstmia	sl!, {d7}
 8004e74:	3508      	adds	r5, #8
 8004e76:	e7ca      	b.n	8004e0e <__kernel_rem_pio2+0x6e>
 8004e78:	9b00      	ldr	r3, [sp, #0]
 8004e7a:	f8dd 8000 	ldr.w	r8, [sp]
 8004e7e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004e80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004e84:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e86:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004e88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e8e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004e92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e94:	ab98      	add	r3, sp, #608	@ 0x260
 8004e96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004e9a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8004e9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ea2:	ac0c      	add	r4, sp, #48	@ 0x30
 8004ea4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004ea6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8004eaa:	46a1      	mov	r9, r4
 8004eac:	46c2      	mov	sl, r8
 8004eae:	f1ba 0f00 	cmp.w	sl, #0
 8004eb2:	f1a5 0508 	sub.w	r5, r5, #8
 8004eb6:	dc77      	bgt.n	8004fa8 <__kernel_rem_pio2+0x208>
 8004eb8:	4658      	mov	r0, fp
 8004eba:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004ebe:	f000 fac7 	bl	8005450 <scalbn>
 8004ec2:	ec57 6b10 	vmov	r6, r7, d0
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004ecc:	4630      	mov	r0, r6
 8004ece:	4639      	mov	r1, r7
 8004ed0:	f7fb fb36 	bl	8000540 <__aeabi_dmul>
 8004ed4:	ec41 0b10 	vmov	d0, r0, r1
 8004ed8:	f000 fb3a 	bl	8005550 <floor>
 8004edc:	4b75      	ldr	r3, [pc, #468]	@ (80050b4 <__kernel_rem_pio2+0x314>)
 8004ede:	ec51 0b10 	vmov	r0, r1, d0
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f7fb fb2c 	bl	8000540 <__aeabi_dmul>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4630      	mov	r0, r6
 8004eee:	4639      	mov	r1, r7
 8004ef0:	f7fb f96e 	bl	80001d0 <__aeabi_dsub>
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	f7fb fdbc 	bl	8000a74 <__aeabi_d2iz>
 8004efc:	9002      	str	r0, [sp, #8]
 8004efe:	f7fb fab5 	bl	800046c <__aeabi_i2d>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4630      	mov	r0, r6
 8004f08:	4639      	mov	r1, r7
 8004f0a:	f7fb f961 	bl	80001d0 <__aeabi_dsub>
 8004f0e:	f1bb 0f00 	cmp.w	fp, #0
 8004f12:	4606      	mov	r6, r0
 8004f14:	460f      	mov	r7, r1
 8004f16:	dd6c      	ble.n	8004ff2 <__kernel_rem_pio2+0x252>
 8004f18:	f108 31ff 	add.w	r1, r8, #4294967295
 8004f1c:	ab0c      	add	r3, sp, #48	@ 0x30
 8004f1e:	9d02      	ldr	r5, [sp, #8]
 8004f20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004f24:	f1cb 0018 	rsb	r0, fp, #24
 8004f28:	fa43 f200 	asr.w	r2, r3, r0
 8004f2c:	4415      	add	r5, r2
 8004f2e:	4082      	lsls	r2, r0
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	aa0c      	add	r2, sp, #48	@ 0x30
 8004f34:	9502      	str	r5, [sp, #8]
 8004f36:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004f3a:	f1cb 0217 	rsb	r2, fp, #23
 8004f3e:	fa43 f902 	asr.w	r9, r3, r2
 8004f42:	f1b9 0f00 	cmp.w	r9, #0
 8004f46:	dd64      	ble.n	8005012 <__kernel_rem_pio2+0x272>
 8004f48:	9b02      	ldr	r3, [sp, #8]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	9302      	str	r3, [sp, #8]
 8004f50:	4615      	mov	r5, r2
 8004f52:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004f56:	4590      	cmp	r8, r2
 8004f58:	f300 80b8 	bgt.w	80050cc <__kernel_rem_pio2+0x32c>
 8004f5c:	f1bb 0f00 	cmp.w	fp, #0
 8004f60:	dd07      	ble.n	8004f72 <__kernel_rem_pio2+0x1d2>
 8004f62:	f1bb 0f01 	cmp.w	fp, #1
 8004f66:	f000 80bf 	beq.w	80050e8 <__kernel_rem_pio2+0x348>
 8004f6a:	f1bb 0f02 	cmp.w	fp, #2
 8004f6e:	f000 80c6 	beq.w	80050fe <__kernel_rem_pio2+0x35e>
 8004f72:	f1b9 0f02 	cmp.w	r9, #2
 8004f76:	d14c      	bne.n	8005012 <__kernel_rem_pio2+0x272>
 8004f78:	4632      	mov	r2, r6
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	494e      	ldr	r1, [pc, #312]	@ (80050b8 <__kernel_rem_pio2+0x318>)
 8004f7e:	2000      	movs	r0, #0
 8004f80:	f7fb f926 	bl	80001d0 <__aeabi_dsub>
 8004f84:	4606      	mov	r6, r0
 8004f86:	460f      	mov	r7, r1
 8004f88:	2d00      	cmp	r5, #0
 8004f8a:	d042      	beq.n	8005012 <__kernel_rem_pio2+0x272>
 8004f8c:	4658      	mov	r0, fp
 8004f8e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80050a8 <__kernel_rem_pio2+0x308>
 8004f92:	f000 fa5d 	bl	8005450 <scalbn>
 8004f96:	4630      	mov	r0, r6
 8004f98:	4639      	mov	r1, r7
 8004f9a:	ec53 2b10 	vmov	r2, r3, d0
 8004f9e:	f7fb f917 	bl	80001d0 <__aeabi_dsub>
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	460f      	mov	r7, r1
 8004fa6:	e034      	b.n	8005012 <__kernel_rem_pio2+0x272>
 8004fa8:	4b44      	ldr	r3, [pc, #272]	@ (80050bc <__kernel_rem_pio2+0x31c>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fb0:	f7fb fac6 	bl	8000540 <__aeabi_dmul>
 8004fb4:	f7fb fd5e 	bl	8000a74 <__aeabi_d2iz>
 8004fb8:	f7fb fa58 	bl	800046c <__aeabi_i2d>
 8004fbc:	4b40      	ldr	r3, [pc, #256]	@ (80050c0 <__kernel_rem_pio2+0x320>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	f7fb fabc 	bl	8000540 <__aeabi_dmul>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fd0:	f7fb f8fe 	bl	80001d0 <__aeabi_dsub>
 8004fd4:	f7fb fd4e 	bl	8000a74 <__aeabi_d2iz>
 8004fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fdc:	f849 0b04 	str.w	r0, [r9], #4
 8004fe0:	4639      	mov	r1, r7
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f7fb f8f6 	bl	80001d4 <__adddf3>
 8004fe8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ff0:	e75d      	b.n	8004eae <__kernel_rem_pio2+0x10e>
 8004ff2:	d107      	bne.n	8005004 <__kernel_rem_pio2+0x264>
 8004ff4:	f108 33ff 	add.w	r3, r8, #4294967295
 8004ff8:	aa0c      	add	r2, sp, #48	@ 0x30
 8004ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffe:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005002:	e79e      	b.n	8004f42 <__kernel_rem_pio2+0x1a2>
 8005004:	4b2f      	ldr	r3, [pc, #188]	@ (80050c4 <__kernel_rem_pio2+0x324>)
 8005006:	2200      	movs	r2, #0
 8005008:	f7fb fd20 	bl	8000a4c <__aeabi_dcmpge>
 800500c:	2800      	cmp	r0, #0
 800500e:	d143      	bne.n	8005098 <__kernel_rem_pio2+0x2f8>
 8005010:	4681      	mov	r9, r0
 8005012:	2200      	movs	r2, #0
 8005014:	2300      	movs	r3, #0
 8005016:	4630      	mov	r0, r6
 8005018:	4639      	mov	r1, r7
 800501a:	f7fb fcf9 	bl	8000a10 <__aeabi_dcmpeq>
 800501e:	2800      	cmp	r0, #0
 8005020:	f000 80bf 	beq.w	80051a2 <__kernel_rem_pio2+0x402>
 8005024:	f108 33ff 	add.w	r3, r8, #4294967295
 8005028:	2200      	movs	r2, #0
 800502a:	9900      	ldr	r1, [sp, #0]
 800502c:	428b      	cmp	r3, r1
 800502e:	da6e      	bge.n	800510e <__kernel_rem_pio2+0x36e>
 8005030:	2a00      	cmp	r2, #0
 8005032:	f000 8089 	beq.w	8005148 <__kernel_rem_pio2+0x3a8>
 8005036:	f108 38ff 	add.w	r8, r8, #4294967295
 800503a:	ab0c      	add	r3, sp, #48	@ 0x30
 800503c:	f1ab 0b18 	sub.w	fp, fp, #24
 8005040:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f6      	beq.n	8005036 <__kernel_rem_pio2+0x296>
 8005048:	4658      	mov	r0, fp
 800504a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80050a8 <__kernel_rem_pio2+0x308>
 800504e:	f000 f9ff 	bl	8005450 <scalbn>
 8005052:	f108 0301 	add.w	r3, r8, #1
 8005056:	00da      	lsls	r2, r3, #3
 8005058:	9205      	str	r2, [sp, #20]
 800505a:	ec55 4b10 	vmov	r4, r5, d0
 800505e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005060:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80050bc <__kernel_rem_pio2+0x31c>
 8005064:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005068:	4646      	mov	r6, r8
 800506a:	f04f 0a00 	mov.w	sl, #0
 800506e:	2e00      	cmp	r6, #0
 8005070:	f280 80cf 	bge.w	8005212 <__kernel_rem_pio2+0x472>
 8005074:	4644      	mov	r4, r8
 8005076:	2c00      	cmp	r4, #0
 8005078:	f2c0 80fd 	blt.w	8005276 <__kernel_rem_pio2+0x4d6>
 800507c:	4b12      	ldr	r3, [pc, #72]	@ (80050c8 <__kernel_rem_pio2+0x328>)
 800507e:	461f      	mov	r7, r3
 8005080:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005082:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005086:	9306      	str	r3, [sp, #24]
 8005088:	f04f 0a00 	mov.w	sl, #0
 800508c:	f04f 0b00 	mov.w	fp, #0
 8005090:	2600      	movs	r6, #0
 8005092:	eba8 0504 	sub.w	r5, r8, r4
 8005096:	e0e2      	b.n	800525e <__kernel_rem_pio2+0x4be>
 8005098:	f04f 0902 	mov.w	r9, #2
 800509c:	e754      	b.n	8004f48 <__kernel_rem_pio2+0x1a8>
 800509e:	bf00      	nop
	...
 80050ac:	3ff00000 	.word	0x3ff00000
 80050b0:	08005898 	.word	0x08005898
 80050b4:	40200000 	.word	0x40200000
 80050b8:	3ff00000 	.word	0x3ff00000
 80050bc:	3e700000 	.word	0x3e700000
 80050c0:	41700000 	.word	0x41700000
 80050c4:	3fe00000 	.word	0x3fe00000
 80050c8:	08005858 	.word	0x08005858
 80050cc:	f854 3b04 	ldr.w	r3, [r4], #4
 80050d0:	b945      	cbnz	r5, 80050e4 <__kernel_rem_pio2+0x344>
 80050d2:	b123      	cbz	r3, 80050de <__kernel_rem_pio2+0x33e>
 80050d4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80050d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80050dc:	2301      	movs	r3, #1
 80050de:	3201      	adds	r2, #1
 80050e0:	461d      	mov	r5, r3
 80050e2:	e738      	b.n	8004f56 <__kernel_rem_pio2+0x1b6>
 80050e4:	1acb      	subs	r3, r1, r3
 80050e6:	e7f7      	b.n	80050d8 <__kernel_rem_pio2+0x338>
 80050e8:	f108 32ff 	add.w	r2, r8, #4294967295
 80050ec:	ab0c      	add	r3, sp, #48	@ 0x30
 80050ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80050f6:	a90c      	add	r1, sp, #48	@ 0x30
 80050f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80050fc:	e739      	b.n	8004f72 <__kernel_rem_pio2+0x1d2>
 80050fe:	f108 32ff 	add.w	r2, r8, #4294967295
 8005102:	ab0c      	add	r3, sp, #48	@ 0x30
 8005104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005108:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800510c:	e7f3      	b.n	80050f6 <__kernel_rem_pio2+0x356>
 800510e:	a90c      	add	r1, sp, #48	@ 0x30
 8005110:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005114:	3b01      	subs	r3, #1
 8005116:	430a      	orrs	r2, r1
 8005118:	e787      	b.n	800502a <__kernel_rem_pio2+0x28a>
 800511a:	3401      	adds	r4, #1
 800511c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005120:	2a00      	cmp	r2, #0
 8005122:	d0fa      	beq.n	800511a <__kernel_rem_pio2+0x37a>
 8005124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005126:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800512a:	eb0d 0503 	add.w	r5, sp, r3
 800512e:	9b06      	ldr	r3, [sp, #24]
 8005130:	aa20      	add	r2, sp, #128	@ 0x80
 8005132:	4443      	add	r3, r8
 8005134:	f108 0701 	add.w	r7, r8, #1
 8005138:	3d98      	subs	r5, #152	@ 0x98
 800513a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800513e:	4444      	add	r4, r8
 8005140:	42bc      	cmp	r4, r7
 8005142:	da04      	bge.n	800514e <__kernel_rem_pio2+0x3ae>
 8005144:	46a0      	mov	r8, r4
 8005146:	e6a2      	b.n	8004e8e <__kernel_rem_pio2+0xee>
 8005148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800514a:	2401      	movs	r4, #1
 800514c:	e7e6      	b.n	800511c <__kernel_rem_pio2+0x37c>
 800514e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005150:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005154:	f7fb f98a 	bl	800046c <__aeabi_i2d>
 8005158:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005420 <__kernel_rem_pio2+0x680>
 800515c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005160:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005168:	46b2      	mov	sl, r6
 800516a:	f04f 0800 	mov.w	r8, #0
 800516e:	9b05      	ldr	r3, [sp, #20]
 8005170:	4598      	cmp	r8, r3
 8005172:	dd05      	ble.n	8005180 <__kernel_rem_pio2+0x3e0>
 8005174:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005178:	3701      	adds	r7, #1
 800517a:	eca5 7b02 	vstmia	r5!, {d7}
 800517e:	e7df      	b.n	8005140 <__kernel_rem_pio2+0x3a0>
 8005180:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005184:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005188:	f7fb f9da 	bl	8000540 <__aeabi_dmul>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005194:	f7fb f81e 	bl	80001d4 <__adddf3>
 8005198:	f108 0801 	add.w	r8, r8, #1
 800519c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051a0:	e7e5      	b.n	800516e <__kernel_rem_pio2+0x3ce>
 80051a2:	f1cb 0000 	rsb	r0, fp, #0
 80051a6:	ec47 6b10 	vmov	d0, r6, r7
 80051aa:	f000 f951 	bl	8005450 <scalbn>
 80051ae:	ec55 4b10 	vmov	r4, r5, d0
 80051b2:	4b9d      	ldr	r3, [pc, #628]	@ (8005428 <__kernel_rem_pio2+0x688>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	4620      	mov	r0, r4
 80051b8:	4629      	mov	r1, r5
 80051ba:	f7fb fc47 	bl	8000a4c <__aeabi_dcmpge>
 80051be:	b300      	cbz	r0, 8005202 <__kernel_rem_pio2+0x462>
 80051c0:	4b9a      	ldr	r3, [pc, #616]	@ (800542c <__kernel_rem_pio2+0x68c>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	4620      	mov	r0, r4
 80051c6:	4629      	mov	r1, r5
 80051c8:	f7fb f9ba 	bl	8000540 <__aeabi_dmul>
 80051cc:	f7fb fc52 	bl	8000a74 <__aeabi_d2iz>
 80051d0:	4606      	mov	r6, r0
 80051d2:	f7fb f94b 	bl	800046c <__aeabi_i2d>
 80051d6:	4b94      	ldr	r3, [pc, #592]	@ (8005428 <__kernel_rem_pio2+0x688>)
 80051d8:	2200      	movs	r2, #0
 80051da:	f7fb f9b1 	bl	8000540 <__aeabi_dmul>
 80051de:	460b      	mov	r3, r1
 80051e0:	4602      	mov	r2, r0
 80051e2:	4629      	mov	r1, r5
 80051e4:	4620      	mov	r0, r4
 80051e6:	f7fa fff3 	bl	80001d0 <__aeabi_dsub>
 80051ea:	f7fb fc43 	bl	8000a74 <__aeabi_d2iz>
 80051ee:	ab0c      	add	r3, sp, #48	@ 0x30
 80051f0:	f10b 0b18 	add.w	fp, fp, #24
 80051f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80051f8:	f108 0801 	add.w	r8, r8, #1
 80051fc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005200:	e722      	b.n	8005048 <__kernel_rem_pio2+0x2a8>
 8005202:	4620      	mov	r0, r4
 8005204:	4629      	mov	r1, r5
 8005206:	f7fb fc35 	bl	8000a74 <__aeabi_d2iz>
 800520a:	ab0c      	add	r3, sp, #48	@ 0x30
 800520c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005210:	e71a      	b.n	8005048 <__kernel_rem_pio2+0x2a8>
 8005212:	ab0c      	add	r3, sp, #48	@ 0x30
 8005214:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005218:	f7fb f928 	bl	800046c <__aeabi_i2d>
 800521c:	4622      	mov	r2, r4
 800521e:	462b      	mov	r3, r5
 8005220:	f7fb f98e 	bl	8000540 <__aeabi_dmul>
 8005224:	4652      	mov	r2, sl
 8005226:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800522a:	465b      	mov	r3, fp
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f7fb f986 	bl	8000540 <__aeabi_dmul>
 8005234:	3e01      	subs	r6, #1
 8005236:	4604      	mov	r4, r0
 8005238:	460d      	mov	r5, r1
 800523a:	e718      	b.n	800506e <__kernel_rem_pio2+0x2ce>
 800523c:	9906      	ldr	r1, [sp, #24]
 800523e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005242:	9106      	str	r1, [sp, #24]
 8005244:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005248:	f7fb f97a 	bl	8000540 <__aeabi_dmul>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4650      	mov	r0, sl
 8005252:	4659      	mov	r1, fp
 8005254:	f7fa ffbe 	bl	80001d4 <__adddf3>
 8005258:	3601      	adds	r6, #1
 800525a:	4682      	mov	sl, r0
 800525c:	468b      	mov	fp, r1
 800525e:	9b00      	ldr	r3, [sp, #0]
 8005260:	429e      	cmp	r6, r3
 8005262:	dc01      	bgt.n	8005268 <__kernel_rem_pio2+0x4c8>
 8005264:	42b5      	cmp	r5, r6
 8005266:	dae9      	bge.n	800523c <__kernel_rem_pio2+0x49c>
 8005268:	ab48      	add	r3, sp, #288	@ 0x120
 800526a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800526e:	e9c5 ab00 	strd	sl, fp, [r5]
 8005272:	3c01      	subs	r4, #1
 8005274:	e6ff      	b.n	8005076 <__kernel_rem_pio2+0x2d6>
 8005276:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005278:	2b02      	cmp	r3, #2
 800527a:	dc0b      	bgt.n	8005294 <__kernel_rem_pio2+0x4f4>
 800527c:	2b00      	cmp	r3, #0
 800527e:	dc39      	bgt.n	80052f4 <__kernel_rem_pio2+0x554>
 8005280:	d05d      	beq.n	800533e <__kernel_rem_pio2+0x59e>
 8005282:	9b02      	ldr	r3, [sp, #8]
 8005284:	f003 0007 	and.w	r0, r3, #7
 8005288:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800528c:	ecbd 8b02 	vpop	{d8}
 8005290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005294:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005296:	2b03      	cmp	r3, #3
 8005298:	d1f3      	bne.n	8005282 <__kernel_rem_pio2+0x4e2>
 800529a:	9b05      	ldr	r3, [sp, #20]
 800529c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80052a0:	eb0d 0403 	add.w	r4, sp, r3
 80052a4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80052a8:	4625      	mov	r5, r4
 80052aa:	46c2      	mov	sl, r8
 80052ac:	f1ba 0f00 	cmp.w	sl, #0
 80052b0:	f1a5 0508 	sub.w	r5, r5, #8
 80052b4:	dc6b      	bgt.n	800538e <__kernel_rem_pio2+0x5ee>
 80052b6:	4645      	mov	r5, r8
 80052b8:	2d01      	cmp	r5, #1
 80052ba:	f1a4 0408 	sub.w	r4, r4, #8
 80052be:	f300 8087 	bgt.w	80053d0 <__kernel_rem_pio2+0x630>
 80052c2:	9c05      	ldr	r4, [sp, #20]
 80052c4:	ab48      	add	r3, sp, #288	@ 0x120
 80052c6:	441c      	add	r4, r3
 80052c8:	2000      	movs	r0, #0
 80052ca:	2100      	movs	r1, #0
 80052cc:	f1b8 0f01 	cmp.w	r8, #1
 80052d0:	f300 809c 	bgt.w	800540c <__kernel_rem_pio2+0x66c>
 80052d4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80052d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80052dc:	f1b9 0f00 	cmp.w	r9, #0
 80052e0:	f040 80a6 	bne.w	8005430 <__kernel_rem_pio2+0x690>
 80052e4:	9b04      	ldr	r3, [sp, #16]
 80052e6:	e9c3 7800 	strd	r7, r8, [r3]
 80052ea:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80052ee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80052f2:	e7c6      	b.n	8005282 <__kernel_rem_pio2+0x4e2>
 80052f4:	9d05      	ldr	r5, [sp, #20]
 80052f6:	ab48      	add	r3, sp, #288	@ 0x120
 80052f8:	441d      	add	r5, r3
 80052fa:	4644      	mov	r4, r8
 80052fc:	2000      	movs	r0, #0
 80052fe:	2100      	movs	r1, #0
 8005300:	2c00      	cmp	r4, #0
 8005302:	da35      	bge.n	8005370 <__kernel_rem_pio2+0x5d0>
 8005304:	f1b9 0f00 	cmp.w	r9, #0
 8005308:	d038      	beq.n	800537c <__kernel_rem_pio2+0x5dc>
 800530a:	4602      	mov	r2, r0
 800530c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005310:	9c04      	ldr	r4, [sp, #16]
 8005312:	e9c4 2300 	strd	r2, r3, [r4]
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800531e:	f7fa ff57 	bl	80001d0 <__aeabi_dsub>
 8005322:	ad4a      	add	r5, sp, #296	@ 0x128
 8005324:	2401      	movs	r4, #1
 8005326:	45a0      	cmp	r8, r4
 8005328:	da2b      	bge.n	8005382 <__kernel_rem_pio2+0x5e2>
 800532a:	f1b9 0f00 	cmp.w	r9, #0
 800532e:	d002      	beq.n	8005336 <__kernel_rem_pio2+0x596>
 8005330:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005334:	4619      	mov	r1, r3
 8005336:	9b04      	ldr	r3, [sp, #16]
 8005338:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800533c:	e7a1      	b.n	8005282 <__kernel_rem_pio2+0x4e2>
 800533e:	9c05      	ldr	r4, [sp, #20]
 8005340:	ab48      	add	r3, sp, #288	@ 0x120
 8005342:	441c      	add	r4, r3
 8005344:	2000      	movs	r0, #0
 8005346:	2100      	movs	r1, #0
 8005348:	f1b8 0f00 	cmp.w	r8, #0
 800534c:	da09      	bge.n	8005362 <__kernel_rem_pio2+0x5c2>
 800534e:	f1b9 0f00 	cmp.w	r9, #0
 8005352:	d002      	beq.n	800535a <__kernel_rem_pio2+0x5ba>
 8005354:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005358:	4619      	mov	r1, r3
 800535a:	9b04      	ldr	r3, [sp, #16]
 800535c:	e9c3 0100 	strd	r0, r1, [r3]
 8005360:	e78f      	b.n	8005282 <__kernel_rem_pio2+0x4e2>
 8005362:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005366:	f7fa ff35 	bl	80001d4 <__adddf3>
 800536a:	f108 38ff 	add.w	r8, r8, #4294967295
 800536e:	e7eb      	b.n	8005348 <__kernel_rem_pio2+0x5a8>
 8005370:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005374:	f7fa ff2e 	bl	80001d4 <__adddf3>
 8005378:	3c01      	subs	r4, #1
 800537a:	e7c1      	b.n	8005300 <__kernel_rem_pio2+0x560>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	e7c6      	b.n	8005310 <__kernel_rem_pio2+0x570>
 8005382:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005386:	f7fa ff25 	bl	80001d4 <__adddf3>
 800538a:	3401      	adds	r4, #1
 800538c:	e7cb      	b.n	8005326 <__kernel_rem_pio2+0x586>
 800538e:	ed95 7b00 	vldr	d7, [r5]
 8005392:	ed8d 7b00 	vstr	d7, [sp]
 8005396:	ed95 7b02 	vldr	d7, [r5, #8]
 800539a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800539e:	ec53 2b17 	vmov	r2, r3, d7
 80053a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80053a6:	f7fa ff15 	bl	80001d4 <__adddf3>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4606      	mov	r6, r0
 80053b0:	460f      	mov	r7, r1
 80053b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053b6:	f7fa ff0b 	bl	80001d0 <__aeabi_dsub>
 80053ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053be:	f7fa ff09 	bl	80001d4 <__adddf3>
 80053c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053c6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80053ca:	e9c5 6700 	strd	r6, r7, [r5]
 80053ce:	e76d      	b.n	80052ac <__kernel_rem_pio2+0x50c>
 80053d0:	ed94 7b00 	vldr	d7, [r4]
 80053d4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80053d8:	ec51 0b17 	vmov	r0, r1, d7
 80053dc:	4652      	mov	r2, sl
 80053de:	465b      	mov	r3, fp
 80053e0:	ed8d 7b00 	vstr	d7, [sp]
 80053e4:	f7fa fef6 	bl	80001d4 <__adddf3>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4606      	mov	r6, r0
 80053ee:	460f      	mov	r7, r1
 80053f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053f4:	f7fa feec 	bl	80001d0 <__aeabi_dsub>
 80053f8:	4652      	mov	r2, sl
 80053fa:	465b      	mov	r3, fp
 80053fc:	f7fa feea 	bl	80001d4 <__adddf3>
 8005400:	3d01      	subs	r5, #1
 8005402:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005406:	e9c4 6700 	strd	r6, r7, [r4]
 800540a:	e755      	b.n	80052b8 <__kernel_rem_pio2+0x518>
 800540c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005410:	f7fa fee0 	bl	80001d4 <__adddf3>
 8005414:	f108 38ff 	add.w	r8, r8, #4294967295
 8005418:	e758      	b.n	80052cc <__kernel_rem_pio2+0x52c>
 800541a:	bf00      	nop
 800541c:	f3af 8000 	nop.w
	...
 8005428:	41700000 	.word	0x41700000
 800542c:	3e700000 	.word	0x3e700000
 8005430:	9b04      	ldr	r3, [sp, #16]
 8005432:	9a04      	ldr	r2, [sp, #16]
 8005434:	601f      	str	r7, [r3, #0]
 8005436:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800543a:	605c      	str	r4, [r3, #4]
 800543c:	609d      	str	r5, [r3, #8]
 800543e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005442:	60d3      	str	r3, [r2, #12]
 8005444:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005448:	6110      	str	r0, [r2, #16]
 800544a:	6153      	str	r3, [r2, #20]
 800544c:	e719      	b.n	8005282 <__kernel_rem_pio2+0x4e2>
 800544e:	bf00      	nop

08005450 <scalbn>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	ec55 4b10 	vmov	r4, r5, d0
 8005456:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800545a:	4606      	mov	r6, r0
 800545c:	462b      	mov	r3, r5
 800545e:	b991      	cbnz	r1, 8005486 <scalbn+0x36>
 8005460:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005464:	4323      	orrs	r3, r4
 8005466:	d03d      	beq.n	80054e4 <scalbn+0x94>
 8005468:	4b35      	ldr	r3, [pc, #212]	@ (8005540 <scalbn+0xf0>)
 800546a:	4620      	mov	r0, r4
 800546c:	4629      	mov	r1, r5
 800546e:	2200      	movs	r2, #0
 8005470:	f7fb f866 	bl	8000540 <__aeabi_dmul>
 8005474:	4b33      	ldr	r3, [pc, #204]	@ (8005544 <scalbn+0xf4>)
 8005476:	429e      	cmp	r6, r3
 8005478:	4604      	mov	r4, r0
 800547a:	460d      	mov	r5, r1
 800547c:	da0f      	bge.n	800549e <scalbn+0x4e>
 800547e:	a328      	add	r3, pc, #160	@ (adr r3, 8005520 <scalbn+0xd0>)
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	e01e      	b.n	80054c4 <scalbn+0x74>
 8005486:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800548a:	4291      	cmp	r1, r2
 800548c:	d10b      	bne.n	80054a6 <scalbn+0x56>
 800548e:	4622      	mov	r2, r4
 8005490:	4620      	mov	r0, r4
 8005492:	4629      	mov	r1, r5
 8005494:	f7fa fe9e 	bl	80001d4 <__adddf3>
 8005498:	4604      	mov	r4, r0
 800549a:	460d      	mov	r5, r1
 800549c:	e022      	b.n	80054e4 <scalbn+0x94>
 800549e:	460b      	mov	r3, r1
 80054a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80054a4:	3936      	subs	r1, #54	@ 0x36
 80054a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80054aa:	4296      	cmp	r6, r2
 80054ac:	dd0d      	ble.n	80054ca <scalbn+0x7a>
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8005528 <scalbn+0xd8>)
 80054b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054b6:	da02      	bge.n	80054be <scalbn+0x6e>
 80054b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8005530 <scalbn+0xe0>)
 80054ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054be:	a31a      	add	r3, pc, #104	@ (adr r3, 8005528 <scalbn+0xd8>)
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f7fb f83c 	bl	8000540 <__aeabi_dmul>
 80054c8:	e7e6      	b.n	8005498 <scalbn+0x48>
 80054ca:	1872      	adds	r2, r6, r1
 80054cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80054d0:	428a      	cmp	r2, r1
 80054d2:	dcec      	bgt.n	80054ae <scalbn+0x5e>
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	dd08      	ble.n	80054ea <scalbn+0x9a>
 80054d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80054dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80054e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80054e4:	ec45 4b10 	vmov	d0, r4, r5
 80054e8:	bd70      	pop	{r4, r5, r6, pc}
 80054ea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80054ee:	da08      	bge.n	8005502 <scalbn+0xb2>
 80054f0:	2d00      	cmp	r5, #0
 80054f2:	a10b      	add	r1, pc, #44	@ (adr r1, 8005520 <scalbn+0xd0>)
 80054f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054f8:	dac1      	bge.n	800547e <scalbn+0x2e>
 80054fa:	a10f      	add	r1, pc, #60	@ (adr r1, 8005538 <scalbn+0xe8>)
 80054fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005500:	e7bd      	b.n	800547e <scalbn+0x2e>
 8005502:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005506:	3236      	adds	r2, #54	@ 0x36
 8005508:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800550c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005510:	4620      	mov	r0, r4
 8005512:	4b0d      	ldr	r3, [pc, #52]	@ (8005548 <scalbn+0xf8>)
 8005514:	4629      	mov	r1, r5
 8005516:	2200      	movs	r2, #0
 8005518:	e7d4      	b.n	80054c4 <scalbn+0x74>
 800551a:	bf00      	nop
 800551c:	f3af 8000 	nop.w
 8005520:	c2f8f359 	.word	0xc2f8f359
 8005524:	01a56e1f 	.word	0x01a56e1f
 8005528:	8800759c 	.word	0x8800759c
 800552c:	7e37e43c 	.word	0x7e37e43c
 8005530:	8800759c 	.word	0x8800759c
 8005534:	fe37e43c 	.word	0xfe37e43c
 8005538:	c2f8f359 	.word	0xc2f8f359
 800553c:	81a56e1f 	.word	0x81a56e1f
 8005540:	43500000 	.word	0x43500000
 8005544:	ffff3cb0 	.word	0xffff3cb0
 8005548:	3c900000 	.word	0x3c900000
 800554c:	00000000 	.word	0x00000000

08005550 <floor>:
 8005550:	ec51 0b10 	vmov	r0, r1, d0
 8005554:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005560:	2e13      	cmp	r6, #19
 8005562:	460c      	mov	r4, r1
 8005564:	4605      	mov	r5, r0
 8005566:	4680      	mov	r8, r0
 8005568:	dc34      	bgt.n	80055d4 <floor+0x84>
 800556a:	2e00      	cmp	r6, #0
 800556c:	da17      	bge.n	800559e <floor+0x4e>
 800556e:	a332      	add	r3, pc, #200	@ (adr r3, 8005638 <floor+0xe8>)
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	f7fa fe2e 	bl	80001d4 <__adddf3>
 8005578:	2200      	movs	r2, #0
 800557a:	2300      	movs	r3, #0
 800557c:	f7fb fa70 	bl	8000a60 <__aeabi_dcmpgt>
 8005580:	b150      	cbz	r0, 8005598 <floor+0x48>
 8005582:	2c00      	cmp	r4, #0
 8005584:	da55      	bge.n	8005632 <floor+0xe2>
 8005586:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800558a:	432c      	orrs	r4, r5
 800558c:	2500      	movs	r5, #0
 800558e:	42ac      	cmp	r4, r5
 8005590:	4c2b      	ldr	r4, [pc, #172]	@ (8005640 <floor+0xf0>)
 8005592:	bf08      	it	eq
 8005594:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005598:	4621      	mov	r1, r4
 800559a:	4628      	mov	r0, r5
 800559c:	e023      	b.n	80055e6 <floor+0x96>
 800559e:	4f29      	ldr	r7, [pc, #164]	@ (8005644 <floor+0xf4>)
 80055a0:	4137      	asrs	r7, r6
 80055a2:	ea01 0307 	and.w	r3, r1, r7
 80055a6:	4303      	orrs	r3, r0
 80055a8:	d01d      	beq.n	80055e6 <floor+0x96>
 80055aa:	a323      	add	r3, pc, #140	@ (adr r3, 8005638 <floor+0xe8>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f7fa fe10 	bl	80001d4 <__adddf3>
 80055b4:	2200      	movs	r2, #0
 80055b6:	2300      	movs	r3, #0
 80055b8:	f7fb fa52 	bl	8000a60 <__aeabi_dcmpgt>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d0eb      	beq.n	8005598 <floor+0x48>
 80055c0:	2c00      	cmp	r4, #0
 80055c2:	bfbe      	ittt	lt
 80055c4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80055c8:	4133      	asrlt	r3, r6
 80055ca:	18e4      	addlt	r4, r4, r3
 80055cc:	ea24 0407 	bic.w	r4, r4, r7
 80055d0:	2500      	movs	r5, #0
 80055d2:	e7e1      	b.n	8005598 <floor+0x48>
 80055d4:	2e33      	cmp	r6, #51	@ 0x33
 80055d6:	dd0a      	ble.n	80055ee <floor+0x9e>
 80055d8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80055dc:	d103      	bne.n	80055e6 <floor+0x96>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	f7fa fdf7 	bl	80001d4 <__adddf3>
 80055e6:	ec41 0b10 	vmov	d0, r0, r1
 80055ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ee:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80055f2:	f04f 37ff 	mov.w	r7, #4294967295
 80055f6:	40df      	lsrs	r7, r3
 80055f8:	4207      	tst	r7, r0
 80055fa:	d0f4      	beq.n	80055e6 <floor+0x96>
 80055fc:	a30e      	add	r3, pc, #56	@ (adr r3, 8005638 <floor+0xe8>)
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f7fa fde7 	bl	80001d4 <__adddf3>
 8005606:	2200      	movs	r2, #0
 8005608:	2300      	movs	r3, #0
 800560a:	f7fb fa29 	bl	8000a60 <__aeabi_dcmpgt>
 800560e:	2800      	cmp	r0, #0
 8005610:	d0c2      	beq.n	8005598 <floor+0x48>
 8005612:	2c00      	cmp	r4, #0
 8005614:	da0a      	bge.n	800562c <floor+0xdc>
 8005616:	2e14      	cmp	r6, #20
 8005618:	d101      	bne.n	800561e <floor+0xce>
 800561a:	3401      	adds	r4, #1
 800561c:	e006      	b.n	800562c <floor+0xdc>
 800561e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005622:	2301      	movs	r3, #1
 8005624:	40b3      	lsls	r3, r6
 8005626:	441d      	add	r5, r3
 8005628:	4545      	cmp	r5, r8
 800562a:	d3f6      	bcc.n	800561a <floor+0xca>
 800562c:	ea25 0507 	bic.w	r5, r5, r7
 8005630:	e7b2      	b.n	8005598 <floor+0x48>
 8005632:	2500      	movs	r5, #0
 8005634:	462c      	mov	r4, r5
 8005636:	e7af      	b.n	8005598 <floor+0x48>
 8005638:	8800759c 	.word	0x8800759c
 800563c:	7e37e43c 	.word	0x7e37e43c
 8005640:	bff00000 	.word	0xbff00000
 8005644:	000fffff 	.word	0x000fffff

08005648 <_init>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	bf00      	nop
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr

08005654 <_fini>:
 8005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005656:	bf00      	nop
 8005658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565a:	bc08      	pop	{r3}
 800565c:	469e      	mov	lr, r3
 800565e:	4770      	bx	lr
