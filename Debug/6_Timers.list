
6_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006170  08006170  00007170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061fc  080061fc  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080061fc  080061fc  000071fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006204  08006204  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006204  08006204  00007204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006208  08006208  00007208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800620c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000068  08006274  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08006274  00008390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010829  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b7  00000000  00000000  000188c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  0001ab78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c45  00000000  00000000  0001bb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a76  00000000  00000000  0001c77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f76  00000000  00000000  000441f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f49cd  00000000  00000000  00056169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ab36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004968  00000000  00000000  0014ab7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014f4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006158 	.word	0x08006158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006158 	.word	0x08006158

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

//Funkcja wywolywana po pojawieniu sie przerwania po przepelnieniu dowolnego licznika
//(Po przepelnieniu licznika wywolywane jest przerwanie)
//Funkcja obslugujaca przerwania po przepelnieniu dowolnego licznika:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	//Jeżeli przerwanie wywolane zostalo po przepelnieniu sie licznika TIM6:
	if(htim == &htim6) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a10      	ldr	r2, [pc, #64]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d104      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x1a>
		//Miganie dioda opiera sie o timer sprzetowy TIM6 i system przerwan
		//Program glowny nie jest blokowany.
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000570:	2120      	movs	r1, #32
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f001 f917 	bl	80017a8 <HAL_GPIO_TogglePin>
	}

	//Jeżeli przerwanie wywolane zostalo po przepelnieniu licznika TIM3:
	if(htim == &htim3) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a0c      	ldr	r2, [pc, #48]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d110      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x44>
		//Zapalenie 3 zewnetrznych diod na plytce stykowej:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2140      	movs	r1, #64	@ 0x40
 8000586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058a:	f001 f8f5 	bl	8001778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000596:	f001 f8ef 	bl	8001778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2101      	movs	r1, #1
 800059e:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005a0:	f001 f8ea 	bl	8001778 <HAL_GPIO_WritePin>
	}

}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000168 	.word	0x20000168
 80005b0:	200000d0 	.word	0x200000d0
 80005b4:	48000400 	.word	0x48000400

080005b8 <HAL_TIM_OC_DelayElapsedCallback>:

//Funkcja obslugujaca przerwania generowanych przez poszczzegolne kanaly licznika
//(po przepelnieniu danego kanalu licznika - wartosc w parametrze pulse w konfiguracji):
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

	//Jezeli przerwanie zostalo wywolane przez kanaly licznika TIM3
	if(htim == &htim3) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d121      	bne.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
		switch(HAL_TIM_GetActiveChannel(&htim3)) {
 80005c8:	4812      	ldr	r0, [pc, #72]	@ (8000614 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005ca:	f003 fc0c 	bl	8003de6 <HAL_TIM_GetActiveChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d014      	beq.n	80005fe <HAL_TIM_OC_DelayElapsedCallback+0x46>
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	dc18      	bgt.n	800060a <HAL_TIM_OC_DelayElapsedCallback+0x52>
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d002      	beq.n	80005e2 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d007      	beq.n	80005f0 <HAL_TIM_OC_DelayElapsedCallback+0x38>
			break;
		case HAL_TIM_ACTIVE_CHANNEL_3:
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
			break;
		default:
			break;
 80005e0:	e013      	b.n	800060a <HAL_TIM_OC_DelayElapsedCallback+0x52>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2140      	movs	r1, #64	@ 0x40
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ea:	f001 f8c5 	bl	8001778 <HAL_GPIO_WritePin>
			break;
 80005ee:	e00d      	b.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2180      	movs	r1, #128	@ 0x80
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f8:	f001 f8be 	bl	8001778 <HAL_GPIO_WritePin>
			break;
 80005fc:	e006      	b.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000604:	f001 f8b8 	bl	8001778 <HAL_GPIO_WritePin>
			break;
 8000608:	e000      	b.n	800060c <HAL_TIM_OC_DelayElapsedCallback+0x54>
			break;
 800060a:	bf00      	nop
		}
	}
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000d0 	.word	0x200000d0
 8000618:	48000400 	.word	0x48000400

0800061c <__io_putchar>:
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
}

//Przekierowanie komunikatów wysylanych przez printf na UART:
int __io_putchar(int ch)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b0a      	cmp	r3, #10
 8000628:	d102      	bne.n	8000630 <__io_putchar+0x14>
    __io_putchar('\r');
 800062a:	200d      	movs	r0, #13
 800062c:	f7ff fff6 	bl	800061c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000630:	1d39      	adds	r1, r7, #4
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	2201      	movs	r2, #1
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <__io_putchar+0x2c>)
 800063a:	f004 f905 	bl	8004848 <HAL_UART_Transmit>

  return 1;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200001b4 	.word	0x200001b4

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fd60 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f84d 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 fa8f 	bl	8000b7c <MX_GPIO_Init>
  MX_TIM6_Init();
 800065e:	f000 fa25 	bl	8000aac <MX_TIM6_Init>
  MX_TIM3_Init();
 8000662:	f000 f8fd 	bl	8000860 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000666:	f000 f98d 	bl	8000984 <MX_TIM4_Init>
  MX_TIM2_Init();
 800066a:	f000 f8a5 	bl	80007b8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800066e:	f000 fa55 	bl	8000b1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Uruchomienie licznika TIM6:
  HAL_TIM_Base_Start_IT(&htim6);
 8000672:	481b      	ldr	r0, [pc, #108]	@ (80006e0 <main+0x94>)
 8000674:	f002 fcb2 	bl	8002fdc <HAL_TIM_Base_Start_IT>

  //Uruchomienie licznika TIM3:
  HAL_TIM_Base_Start_IT(&htim3);
 8000678:	481a      	ldr	r0, [pc, #104]	@ (80006e4 <main+0x98>)
 800067a:	f002 fcaf 	bl	8002fdc <HAL_TIM_Base_Start_IT>
  //Uruchomienie kanalow licznika TIM3 w trybie przerwan (przerwania sa obslugiwane w funkcji
  //HAL_TIM_OC_DelayElapsedCallback:
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800067e:	2100      	movs	r1, #0
 8000680:	4818      	ldr	r0, [pc, #96]	@ (80006e4 <main+0x98>)
 8000682:	f002 fd7d 	bl	8003180 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000686:	2104      	movs	r1, #4
 8000688:	4816      	ldr	r0, [pc, #88]	@ (80006e4 <main+0x98>)
 800068a:	f002 fd79 	bl	8003180 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 800068e:	2108      	movs	r1, #8
 8000690:	4814      	ldr	r0, [pc, #80]	@ (80006e4 <main+0x98>)
 8000692:	f002 fd75 	bl	8003180 <HAL_TIM_OC_Start_IT>

  //Uruchomienie licznika TIM4:
  HAL_TIM_Base_Start_IT(&htim4);
 8000696:	4814      	ldr	r0, [pc, #80]	@ (80006e8 <main+0x9c>)
 8000698:	f002 fca0 	bl	8002fdc <HAL_TIM_Base_Start_IT>
  //Uruchomienie kanalow licznika TIM4 w trybie wyjscia PWM (kanaly licznika bezposrednio
  //steruja pinami). W konfiguracji sprzętowej (Pulse) mozna ustawic staly wspolczynnik
  //wypelnienia sygnalu PWM, natomiast w makrze __HAL_TIM_SET_COMPARE mozna sterowac
  //wspolczynnikiem wypelninia.:
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800069c:	2100      	movs	r1, #0
 800069e:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <main+0x9c>)
 80006a0:	f002 ff24 	bl	80034ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80006a4:	2104      	movs	r1, #4
 80006a6:	4810      	ldr	r0, [pc, #64]	@ (80006e8 <main+0x9c>)
 80006a8:	f002 ff20 	bl	80034ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80006ac:	2108      	movs	r1, #8
 80006ae:	480e      	ldr	r0, [pc, #56]	@ (80006e8 <main+0x9c>)
 80006b0:	f002 ff1c 	bl	80034ec <HAL_TIM_PWM_Start>

  //Uruchomienie licznika TIM2:
  HAL_TIM_Base_Start(&htim2);
 80006b4:	480d      	ldr	r0, [pc, #52]	@ (80006ec <main+0xa0>)
 80006b6:	f002 fc29 	bl	8002f0c <HAL_TIM_Base_Start>
  uint32_t old_value = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]

  int counter = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]

	  HAL_Delay(10);
	  counter++;
	  */

	  uint32_t value = __HAL_TIM_GET_COUNTER(&htim2);
 80006c2:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <main+0xa0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006c8:	607b      	str	r3, [r7, #4]
	  if(old_value != value) {
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d0f7      	beq.n	80006c2 <main+0x76>
		  old_value = value;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	60fb      	str	r3, [r7, #12]
		  printf("value = %lu\n", value);
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <main+0xa4>)
 80006da:	f004 fecf 	bl	800547c <iprintf>
  {
 80006de:	e7f0      	b.n	80006c2 <main+0x76>
 80006e0:	20000168 	.word	0x20000168
 80006e4:	200000d0 	.word	0x200000d0
 80006e8:	2000011c 	.word	0x2000011c
 80006ec:	20000084 	.word	0x20000084
 80006f0:	08006170 	.word	0x08006170

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b096      	sub	sp, #88	@ 0x58
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2244      	movs	r2, #68	@ 0x44
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 ff0f 	bl	8005526 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000716:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800071a:	f001 f87d 	bl	8001818 <HAL_PWREx_ControlVoltageScaling>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000724:	f000 fa8a 	bl	8000c3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000728:	f001 f858 	bl	80017dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800072c:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <SystemClock_Config+0xc0>)
 800072e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000732:	4a20      	ldr	r2, [pc, #128]	@ (80007b4 <SystemClock_Config+0xc0>)
 8000734:	f023 0318 	bic.w	r3, r3, #24
 8000738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800073c:	2314      	movs	r3, #20
 800073e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800074c:	2360      	movs	r3, #96	@ 0x60
 800074e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000754:	2301      	movs	r3, #1
 8000756:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800075c:	2328      	movs	r3, #40	@ 0x28
 800075e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000760:	2307      	movs	r3, #7
 8000762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4618      	mov	r0, r3
 8000772:	f001 f8a7 	bl	80018c4 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800077c:	f000 fa5e 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2303      	movs	r3, #3
 8000786:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	2104      	movs	r1, #4
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fc6f 	bl	800207c <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007a4:	f000 fa4a 	bl	8000c3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007a8:	f002 f976 	bl	8002a98 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007ac:	bf00      	nop
 80007ae:	3758      	adds	r7, #88	@ 0x58
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000

080007b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d6:	4b21      	ldr	r3, [pc, #132]	@ (800085c <MX_TIM2_Init+0xa4>)
 80007d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_TIM2_Init+0xa4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_TIM2_Init+0xa4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <MX_TIM2_Init+0xa4>)
 80007ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <MX_TIM2_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f8:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_TIM2_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007fe:	4817      	ldr	r0, [pc, #92]	@ (800085c <MX_TIM2_Init+0xa4>)
 8000800:	f002 fb2c 	bl	8002e5c <HAL_TIM_Base_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800080a:	f000 fa17 	bl	8000c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800080e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000812:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	4619      	mov	r1, r3
 8000826:	480d      	ldr	r0, [pc, #52]	@ (800085c <MX_TIM2_Init+0xa4>)
 8000828:	f003 f9f6 	bl	8003c18 <HAL_TIM_ConfigClockSource>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000832:	f000 fa03 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	@ (800085c <MX_TIM2_Init+0xa4>)
 8000844:	f003 ff0c 	bl	8004660 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800084e:	f000 f9f5 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000084 	.word	0x20000084

08000860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	@ 0x38
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000880:	463b      	mov	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000892:	4b3a      	ldr	r3, [pc, #232]	@ (800097c <MX_TIM3_Init+0x11c>)
 8000894:	4a3a      	ldr	r2, [pc, #232]	@ (8000980 <MX_TIM3_Init+0x120>)
 8000896:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000898:	4b38      	ldr	r3, [pc, #224]	@ (800097c <MX_TIM3_Init+0x11c>)
 800089a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800089e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b36      	ldr	r3, [pc, #216]	@ (800097c <MX_TIM3_Init+0x11c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80008a6:	4b35      	ldr	r3, [pc, #212]	@ (800097c <MX_TIM3_Init+0x11c>)
 80008a8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b33      	ldr	r3, [pc, #204]	@ (800097c <MX_TIM3_Init+0x11c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b31      	ldr	r3, [pc, #196]	@ (800097c <MX_TIM3_Init+0x11c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ba:	4830      	ldr	r0, [pc, #192]	@ (800097c <MX_TIM3_Init+0x11c>)
 80008bc:	f002 face 	bl	8002e5c <HAL_TIM_Base_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80008c6:	f000 f9b9 	bl	8000c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4829      	ldr	r0, [pc, #164]	@ (800097c <MX_TIM3_Init+0x11c>)
 80008d8:	f003 f99e 	bl	8003c18 <HAL_TIM_ConfigClockSource>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80008e2:	f000 f9ab 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008e6:	4825      	ldr	r0, [pc, #148]	@ (800097c <MX_TIM3_Init+0x11c>)
 80008e8:	f002 fbe8 	bl	80030bc <HAL_TIM_OC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80008f2:	f000 f9a3 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	481d      	ldr	r0, [pc, #116]	@ (800097c <MX_TIM3_Init+0x11c>)
 8000906:	f003 feab 	bl	8004660 <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000910:	f000 f994 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000914:	2300      	movs	r3, #0
 8000916:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2500;
 8000918:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800091c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	4813      	ldr	r0, [pc, #76]	@ (800097c <MX_TIM3_Init+0x11c>)
 800092e:	f002 ffe5 	bl	80038fc <HAL_TIM_OC_ConfigChannel>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8000938:	f000 f980 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 800093c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000940:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000942:	463b      	mov	r3, r7
 8000944:	2204      	movs	r2, #4
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <MX_TIM3_Init+0x11c>)
 800094a:	f002 ffd7 	bl	80038fc <HAL_TIM_OC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000954:	f000 f972 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.Pulse = 7500;
 8000958:	f641 534c 	movw	r3, #7500	@ 0x1d4c
 800095c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	2208      	movs	r2, #8
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_TIM3_Init+0x11c>)
 8000966:	f002 ffc9 	bl	80038fc <HAL_TIM_OC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM3_Init+0x114>
  {
    Error_Handler();
 8000970:	f000 f964 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3738      	adds	r7, #56	@ 0x38
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200000d0 	.word	0x200000d0
 8000980:	40000400 	.word	0x40000400

08000984 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08e      	sub	sp, #56	@ 0x38
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009b6:	4b3b      	ldr	r3, [pc, #236]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 80009b8:	4a3b      	ldr	r2, [pc, #236]	@ (8000aa8 <MX_TIM4_Init+0x124>)
 80009ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80009bc:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 80009be:	224f      	movs	r2, #79	@ 0x4f
 80009c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b38      	ldr	r3, [pc, #224]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80009c8:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 80009ca:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	4b34      	ldr	r3, [pc, #208]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009dc:	4831      	ldr	r0, [pc, #196]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 80009de:	f002 fa3d 	bl	8002e5c <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80009e8:	f000 f928 	bl	8000c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009f6:	4619      	mov	r1, r3
 80009f8:	482a      	ldr	r0, [pc, #168]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 80009fa:	f003 f90d 	bl	8003c18 <HAL_TIM_ConfigClockSource>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000a04:	f000 f91a 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a08:	4826      	ldr	r0, [pc, #152]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 8000a0a:	f002 fd0d 	bl	8003428 <HAL_TIM_PWM_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a14:	f000 f912 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481f      	ldr	r0, [pc, #124]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 8000a28:	f003 fe1a 	bl	8004660 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a32:	f000 f903 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a36:	2360      	movs	r3, #96	@ 0x60
 8000a38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000a3a:	2332      	movs	r3, #50	@ 0x32
 8000a3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4815      	ldr	r0, [pc, #84]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 8000a4e:	f002 ffcf 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000a58:	f000 f8f0 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8000a5c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a60:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	2204      	movs	r2, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	480e      	ldr	r0, [pc, #56]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 8000a6a:	f002 ffc1 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8000a74:	f000 f8e2 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8000a78:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2208      	movs	r2, #8
 8000a82:	4619      	mov	r1, r3
 8000a84:	4807      	ldr	r0, [pc, #28]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 8000a86:	f002 ffb3 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8000a90:	f000 f8d4 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a94:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <MX_TIM4_Init+0x120>)
 8000a96:	f000 f987 	bl	8000da8 <HAL_TIM_MspPostInit>

}
 8000a9a:	bf00      	nop
 8000a9c:	3738      	adds	r7, #56	@ 0x38
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000011c 	.word	0x2000011c
 8000aa8:	40000800 	.word	0x40000800

08000aac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <MX_TIM6_Init+0x68>)
 8000abe:	4a16      	ldr	r2, [pc, #88]	@ (8000b18 <MX_TIM6_Init+0x6c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <MX_TIM6_Init+0x68>)
 8000ac4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ac8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <MX_TIM6_Init+0x68>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_TIM6_Init+0x68>)
 8000ad2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ad6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_TIM6_Init+0x68>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ade:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <MX_TIM6_Init+0x68>)
 8000ae0:	f002 f9bc 	bl	8002e5c <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000aea:	f000 f8a7 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	@ (8000b14 <MX_TIM6_Init+0x68>)
 8000afc:	f003 fdb0 	bl	8004660 <HAL_TIMEx_MasterConfigSynchronization>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000b06:	f000 f899 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000168 	.word	0x20000168
 8000b18:	40001000 	.word	0x40001000

08000b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b22:	4a15      	ldr	r2, [pc, #84]	@ (8000b78 <MX_USART2_UART_Init+0x5c>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b26:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b60:	f003 fe24 	bl	80047ac <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 f867 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200001b4 	.word	0x200001b4
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <MX_GPIO_Init+0xb8>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	4a27      	ldr	r2, [pc, #156]	@ (8000c34 <MX_GPIO_Init+0xb8>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9e:	4b25      	ldr	r3, [pc, #148]	@ (8000c34 <MX_GPIO_Init+0xb8>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <MX_GPIO_Init+0xb8>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <MX_GPIO_Init+0xb8>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <MX_GPIO_Init+0xb8>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <MX_GPIO_Init+0xb8>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <MX_GPIO_Init+0xb8>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <MX_GPIO_Init+0xb8>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	21e0      	movs	r1, #224	@ 0xe0
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be2:	f000 fdc9 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2101      	movs	r1, #1
 8000bea:	4813      	ldr	r0, [pc, #76]	@ (8000c38 <MX_GPIO_Init+0xbc>)
 8000bec:	f000 fdc4 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED1_Pin|LED2_Pin;
 8000bf0:	23e0      	movs	r3, #224	@ 0xe0
 8000bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c0a:	f000 fc0b 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4619      	mov	r1, r3
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_GPIO_Init+0xbc>)
 8000c26:	f000 fbfd 	bl	8001424 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48000400 	.word	0x48000400

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c52:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_MspInit+0x44>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	@ 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb0:	d129      	bne.n	8000d06 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb2:	4b39      	ldr	r3, [pc, #228]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	4a38      	ldr	r2, [pc, #224]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cbe:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	4a32      	ldr	r2, [pc, #200]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd6:	4b30      	ldr	r3, [pc, #192]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8000cf2:	230e      	movs	r3, #14
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d00:	f000 fb90 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d04:	e044      	b.n	8000d90 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM3)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a24      	ldr	r2, [pc, #144]	@ (8000d9c <HAL_TIM_Base_MspInit+0x10c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d114      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d10:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d14:	4a20      	ldr	r2, [pc, #128]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2109      	movs	r1, #9
 8000d2c:	201d      	movs	r0, #29
 8000d2e:	f000 fb42 	bl	80013b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d32:	201d      	movs	r0, #29
 8000d34:	f000 fb5b 	bl	80013ee <HAL_NVIC_EnableIRQ>
}
 8000d38:	e02a      	b.n	8000d90 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM4)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a18      	ldr	r2, [pc, #96]	@ (8000da0 <HAL_TIM_Base_MspInit+0x110>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d10c      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d48:	4a13      	ldr	r2, [pc, #76]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	e018      	b.n	8000d90 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM6)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a10      	ldr	r2, [pc, #64]	@ (8000da4 <HAL_TIM_Base_MspInit+0x114>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d113      	bne.n	8000d90 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_TIM_Base_MspInit+0x108>)
 8000d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 10, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	210a      	movs	r1, #10
 8000d84:	2036      	movs	r0, #54	@ 0x36
 8000d86:	f000 fb16 	bl	80013b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d8a:	2036      	movs	r0, #54	@ 0x36
 8000d8c:	f000 fb2f 	bl	80013ee <HAL_NVIC_EnableIRQ>
}
 8000d90:	bf00      	nop
 8000d92:	3730      	adds	r7, #48	@ 0x30
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40000400 	.word	0x40000400
 8000da0:	40000800 	.word	0x40000800
 8000da4:	40001000 	.word	0x40001000

08000da8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a11      	ldr	r2, [pc, #68]	@ (8000e0c <HAL_TIM_MspPostInit+0x64>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d11c      	bne.n	8000e04 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <HAL_TIM_MspPostInit+0x68>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	4a10      	ldr	r2, [pc, #64]	@ (8000e10 <HAL_TIM_MspPostInit+0x68>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_TIM_MspPostInit+0x68>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000de2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000de6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <HAL_TIM_MspPostInit+0x6c>)
 8000e00:	f000 fb10 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e04:	bf00      	nop
 8000e06:	3720      	adds	r7, #32
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40000800 	.word	0x40000800
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000400 	.word	0x48000400

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ac      	sub	sp, #176	@ 0xb0
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2288      	movs	r2, #136	@ 0x88
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fb74 	bl	8005526 <memset>
  if(huart->Instance==USART2)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a21      	ldr	r2, [pc, #132]	@ (8000ec8 <HAL_UART_MspInit+0xb0>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d13b      	bne.n	8000ec0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4618      	mov	r0, r3
 8000e56:	f001 fb35 	bl	80024c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e60:	f7ff feec 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_UART_MspInit+0xb4>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e68:	4a18      	ldr	r2, [pc, #96]	@ (8000ecc <HAL_UART_MspInit+0xb4>)
 8000e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <HAL_UART_MspInit+0xb4>)
 8000e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <HAL_UART_MspInit+0xb4>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e80:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <HAL_UART_MspInit+0xb4>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e88:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <HAL_UART_MspInit+0xb4>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e94:	230c      	movs	r3, #12
 8000e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eac:	2307      	movs	r3, #7
 8000eae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ebc:	f000 fab2 	bl	8001424 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ec0:	bf00      	nop
 8000ec2:	37b0      	adds	r7, #176	@ 0xb0
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f26:	f000 f94b 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <TIM3_IRQHandler+0x10>)
 8000f36:	f002 fbdf 	bl	80036f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000d0 	.word	0x200000d0

08000f44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <TIM6_DAC_IRQHandler+0x10>)
 8000f4a:	f002 fbd5 	bl	80036f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000168 	.word	0x20000168

08000f58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	e00a      	b.n	8000f80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f6a:	f3af 8000 	nop.w
 8000f6e:	4601      	mov	r1, r0
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	60ba      	str	r2, [r7, #8]
 8000f76:	b2ca      	uxtb	r2, r1
 8000f78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbf0      	blt.n	8000f6a <_read+0x12>
  }

  return len;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e009      	b.n	8000fb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	60ba      	str	r2, [r7, #8]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fb35 	bl	800061c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dbf1      	blt.n	8000fa4 <_write+0x12>
  }
  return len;
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_close>:

int _close(int file)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ff2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_isatty>:

int _isatty(int file)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f004 faae 	bl	80055c4 <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20018000 	.word	0x20018000
 8001094:	00000400 	.word	0x00000400
 8001098:	2000023c 	.word	0x2000023c
 800109c:	20000390 	.word	0x20000390

080010a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c8:	f7ff ffea 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	@ (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f2:	f004 fa6d 	bl	80055d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f6:	f7ff faa9 	bl	800064c <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001108:	0800620c 	.word	0x0800620c
  ldr r2, =_sbss
 800110c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001110:	20000390 	.word	0x20000390

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>

08001116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f93d 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f80e 	bl	8001148 <HAL_InitTick>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	e001      	b.n	800113c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001138:	f7ff fd86 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113c:	79fb      	ldrb	r3, [r7, #7]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_InitTick+0x6c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d023      	beq.n	80011a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_InitTick+0x70>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_InitTick+0x6c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f949 	bl	800140a <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10f      	bne.n	800119e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d809      	bhi.n	8001198 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f000 f913 	bl	80013b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001190:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <HAL_InitTick+0x74>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e007      	b.n	80011a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e004      	b.n	80011a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e001      	b.n	80011a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000240 	.word	0x20000240

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000240 	.word	0x20000240

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	@ (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	@ (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	@ (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	@ 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f7ff ff8e 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	@ (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff29 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff3e 	bl	8001248 <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff8e 	bl	80012f4 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff31 	bl	8001264 <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa2 	bl	800135c <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001432:	e17f      	b.n	8001734 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2101      	movs	r1, #1
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 8171 	beq.w	800172e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d005      	beq.n	8001464 <HAL_GPIO_Init+0x40>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d130      	bne.n	80014c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800149a:	2201      	movs	r2, #1
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	f003 0201 	and.w	r2, r3, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d118      	bne.n	8001504 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014d8:	2201      	movs	r2, #1
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	f003 0201 	and.w	r2, r3, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b03      	cmp	r3, #3
 800150e:	d017      	beq.n	8001540 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d123      	bne.n	8001594 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3208      	adds	r2, #8
 8001554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	08da      	lsrs	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3208      	adds	r2, #8
 800158e:	6939      	ldr	r1, [r7, #16]
 8001590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0203 	and.w	r2, r3, #3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80ac 	beq.w	800172e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001754 <HAL_GPIO_Init+0x330>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015da:	4a5e      	ldr	r2, [pc, #376]	@ (8001754 <HAL_GPIO_Init+0x330>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001754 <HAL_GPIO_Init+0x330>)
 80015e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ee:	4a5a      	ldr	r2, [pc, #360]	@ (8001758 <HAL_GPIO_Init+0x334>)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	220f      	movs	r2, #15
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001618:	d025      	beq.n	8001666 <HAL_GPIO_Init+0x242>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4f      	ldr	r2, [pc, #316]	@ (800175c <HAL_GPIO_Init+0x338>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d01f      	beq.n	8001662 <HAL_GPIO_Init+0x23e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4e      	ldr	r2, [pc, #312]	@ (8001760 <HAL_GPIO_Init+0x33c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d019      	beq.n	800165e <HAL_GPIO_Init+0x23a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4d      	ldr	r2, [pc, #308]	@ (8001764 <HAL_GPIO_Init+0x340>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0x236>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4c      	ldr	r2, [pc, #304]	@ (8001768 <HAL_GPIO_Init+0x344>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00d      	beq.n	8001656 <HAL_GPIO_Init+0x232>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4b      	ldr	r2, [pc, #300]	@ (800176c <HAL_GPIO_Init+0x348>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d007      	beq.n	8001652 <HAL_GPIO_Init+0x22e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4a      	ldr	r2, [pc, #296]	@ (8001770 <HAL_GPIO_Init+0x34c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_GPIO_Init+0x22a>
 800164a:	2306      	movs	r3, #6
 800164c:	e00c      	b.n	8001668 <HAL_GPIO_Init+0x244>
 800164e:	2307      	movs	r3, #7
 8001650:	e00a      	b.n	8001668 <HAL_GPIO_Init+0x244>
 8001652:	2305      	movs	r3, #5
 8001654:	e008      	b.n	8001668 <HAL_GPIO_Init+0x244>
 8001656:	2304      	movs	r3, #4
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x244>
 800165a:	2303      	movs	r3, #3
 800165c:	e004      	b.n	8001668 <HAL_GPIO_Init+0x244>
 800165e:	2302      	movs	r3, #2
 8001660:	e002      	b.n	8001668 <HAL_GPIO_Init+0x244>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_GPIO_Init+0x244>
 8001666:	2300      	movs	r3, #0
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	f002 0203 	and.w	r2, r2, #3
 800166e:	0092      	lsls	r2, r2, #2
 8001670:	4093      	lsls	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001678:	4937      	ldr	r1, [pc, #220]	@ (8001758 <HAL_GPIO_Init+0x334>)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001686:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <HAL_GPIO_Init+0x350>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016aa:	4a32      	ldr	r2, [pc, #200]	@ (8001774 <HAL_GPIO_Init+0x350>)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016b0:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <HAL_GPIO_Init+0x350>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016d4:	4a27      	ldr	r2, [pc, #156]	@ (8001774 <HAL_GPIO_Init+0x350>)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016da:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <HAL_GPIO_Init+0x350>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001774 <HAL_GPIO_Init+0x350>)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_GPIO_Init+0x350>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001728:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <HAL_GPIO_Init+0x350>)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	f47f ae78 	bne.w	8001434 <HAL_GPIO_Init+0x10>
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	40010000 	.word	0x40010000
 800175c:	48000400 	.word	0x48000400
 8001760:	48000800 	.word	0x48000800
 8001764:	48000c00 	.word	0x48000c00
 8001768:	48001000 	.word	0x48001000
 800176c:	48001400 	.word	0x48001400
 8001770:	48001800 	.word	0x48001800
 8001774:	40010400 	.word	0x40010400

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001794:	e002      	b.n	800179c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43d9      	mvns	r1, r3
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	400b      	ands	r3, r1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40007000 	.word	0x40007000

080017fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <HAL_PWREx_GetVoltageRange+0x18>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40007000 	.word	0x40007000

08001818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001826:	d130      	bne.n	800188a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001828:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001834:	d038      	beq.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001836:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800183e:	4a1e      	ldr	r2, [pc, #120]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001840:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001844:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2232      	movs	r2, #50	@ 0x32
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	4a1b      	ldr	r2, [pc, #108]	@ (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0c9b      	lsrs	r3, r3, #18
 8001858:	3301      	adds	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185c:	e002      	b.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3b01      	subs	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001870:	d102      	bne.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f2      	bne.n	800185e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001884:	d110      	bne.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e00f      	b.n	80018aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800188a:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001896:	d007      	beq.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001898:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018a0:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40007000 	.word	0x40007000
 80018bc:	20000000 	.word	0x20000000
 80018c0:	431bde83 	.word	0x431bde83

080018c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e3ca      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d6:	4b97      	ldr	r3, [pc, #604]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e0:	4b94      	ldr	r3, [pc, #592]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80e4 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <HAL_RCC_OscConfig+0x4a>
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	f040 808b 	bne.w	8001a1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b01      	cmp	r3, #1
 800190a:	f040 8087 	bne.w	8001a1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800190e:	4b89      	ldr	r3, [pc, #548]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x62>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e3a2      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1a      	ldr	r2, [r3, #32]
 800192a:	4b82      	ldr	r3, [pc, #520]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <HAL_RCC_OscConfig+0x7c>
 8001936:	4b7f      	ldr	r3, [pc, #508]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800193e:	e005      	b.n	800194c <HAL_RCC_OscConfig+0x88>
 8001940:	4b7c      	ldr	r3, [pc, #496]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800194c:	4293      	cmp	r3, r2
 800194e:	d223      	bcs.n	8001998 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fd55 	bl	8002404 <RCC_SetFlashLatencyFromMSIRange>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e383      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001964:	4b73      	ldr	r3, [pc, #460]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a72      	ldr	r2, [pc, #456]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 800196a:	f043 0308 	orr.w	r3, r3, #8
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b70      	ldr	r3, [pc, #448]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	496d      	ldr	r1, [pc, #436]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001982:	4b6c      	ldr	r3, [pc, #432]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	4968      	ldr	r1, [pc, #416]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
 8001996:	e025      	b.n	80019e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001998:	4b66      	ldr	r3, [pc, #408]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a65      	ldr	r2, [pc, #404]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b63      	ldr	r3, [pc, #396]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4960      	ldr	r1, [pc, #384]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	495b      	ldr	r1, [pc, #364]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fd15 	bl	8002404 <RCC_SetFlashLatencyFromMSIRange>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e343      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019e4:	f000 fc4a 	bl	800227c <HAL_RCC_GetSysClockFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b52      	ldr	r3, [pc, #328]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	4950      	ldr	r1, [pc, #320]	@ (8001b38 <HAL_RCC_OscConfig+0x274>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001a00:	4a4e      	ldr	r2, [pc, #312]	@ (8001b3c <HAL_RCC_OscConfig+0x278>)
 8001a02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a04:	4b4e      	ldr	r3, [pc, #312]	@ (8001b40 <HAL_RCC_OscConfig+0x27c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fb9d 	bl	8001148 <HAL_InitTick>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d052      	beq.n	8001abe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	e327      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d032      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a24:	4b43      	ldr	r3, [pc, #268]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a42      	ldr	r2, [pc, #264]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fbda 	bl	80011e8 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a38:	f7ff fbd6 	bl	80011e8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e310      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a56:	4b37      	ldr	r3, [pc, #220]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a36      	ldr	r2, [pc, #216]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b34      	ldr	r3, [pc, #208]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4931      	ldr	r1, [pc, #196]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a74:	4b2f      	ldr	r3, [pc, #188]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	492c      	ldr	r1, [pc, #176]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	e01a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a29      	ldr	r2, [pc, #164]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a96:	f7ff fba7 	bl	80011e8 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fba3 	bl	80011e8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e2dd      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ab0:	4b20      	ldr	r3, [pc, #128]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x1da>
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001abe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d074      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x21a>
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d10e      	bne.n	8001af6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d10b      	bne.n	8001af6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d064      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d160      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e2ba      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x24a>
 8001b00:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e026      	b.n	8001b5c <HAL_RCC_OscConfig+0x298>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b16:	d115      	bne.n	8001b44 <HAL_RCC_OscConfig+0x280>
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a02      	ldr	r2, [pc, #8]	@ (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e014      	b.n	8001b5c <HAL_RCC_OscConfig+0x298>
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08006180 	.word	0x08006180
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004
 8001b44:	4ba0      	ldr	r3, [pc, #640]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a9f      	ldr	r2, [pc, #636]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b9d      	ldr	r3, [pc, #628]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a9c      	ldr	r2, [pc, #624]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff fb40 	bl	80011e8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fb3c 	bl	80011e8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	@ 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e276      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7e:	4b92      	ldr	r3, [pc, #584]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x2a8>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fb2c 	bl	80011e8 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fb28 	bl	80011e8 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e262      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ba6:	4b88      	ldr	r3, [pc, #544]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x2d0>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d060      	beq.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x310>
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d119      	bne.n	8001c02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d116      	bne.n	8001c02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd4:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_OscConfig+0x328>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e23f      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4b76      	ldr	r3, [pc, #472]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	4973      	ldr	r1, [pc, #460]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c00:	e040      	b.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d023      	beq.n	8001c52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff fae7 	bl	80011e8 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fae3 	bl	80011e8 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e21d      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c30:	4b65      	ldr	r3, [pc, #404]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b62      	ldr	r3, [pc, #392]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	495f      	ldr	r1, [pc, #380]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
 8001c50:	e018      	b.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a5c      	ldr	r2, [pc, #368]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fac3 	bl	80011e8 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff fabf 	bl	80011e8 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e1f9      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c78:	4b53      	ldr	r3, [pc, #332]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03c      	beq.n	8001d0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c98:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c9e:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fa9e 	bl	80011e8 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fa9a 	bl	80011e8 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1d4      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc2:	4b41      	ldr	r3, [pc, #260]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ef      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x3ec>
 8001cd0:	e01b      	b.n	8001d0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd8:	4a3b      	ldr	r2, [pc, #236]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce2:	f7ff fa81 	bl	80011e8 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cea:	f7ff fa7d 	bl	80011e8 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e1b7      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cfc:	4b32      	ldr	r3, [pc, #200]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ef      	bne.n	8001cea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80a6 	beq.w	8001e64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10d      	bne.n	8001d44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	4b27      	ldr	r3, [pc, #156]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2c:	4a26      	ldr	r2, [pc, #152]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d34:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d40:	2301      	movs	r3, #1
 8001d42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d44:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d118      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d50:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a1d      	ldr	r2, [pc, #116]	@ (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fa44 	bl	80011e8 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d64:	f7ff fa40 	bl	80011e8 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e17a      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d108      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4d8>
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d90:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d9a:	e029      	b.n	8001df0 <HAL_RCC_OscConfig+0x52c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d115      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x50c>
 8001da4:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001daa:	4a07      	ldr	r2, [pc, #28]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001db4:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dba:	4a03      	ldr	r2, [pc, #12]	@ (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dc4:	e014      	b.n	8001df0 <HAL_RCC_OscConfig+0x52c>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	4b9c      	ldr	r3, [pc, #624]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd6:	4a9b      	ldr	r2, [pc, #620]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001de0:	4b98      	ldr	r3, [pc, #608]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de6:	4a97      	ldr	r2, [pc, #604]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d016      	beq.n	8001e26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f9f6 	bl	80011e8 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7ff f9f2 	bl	80011e8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e12a      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e16:	4b8b      	ldr	r3, [pc, #556]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ed      	beq.n	8001e00 <HAL_RCC_OscConfig+0x53c>
 8001e24:	e015      	b.n	8001e52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff f9df 	bl	80011e8 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7ff f9db 	bl	80011e8 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e113      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e44:	4b7f      	ldr	r3, [pc, #508]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ed      	bne.n	8001e2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e52:	7ffb      	ldrb	r3, [r7, #31]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e58:	4b7a      	ldr	r3, [pc, #488]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	4a79      	ldr	r2, [pc, #484]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80fe 	beq.w	800206a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	f040 80d0 	bne.w	8002018 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e78:	4b72      	ldr	r3, [pc, #456]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d130      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	3b01      	subs	r3, #1
 8001e98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d127      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d11f      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001eb8:	2a07      	cmp	r2, #7
 8001eba:	bf14      	ite	ne
 8001ebc:	2201      	movne	r2, #1
 8001ebe:	2200      	moveq	r2, #0
 8001ec0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d113      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d06e      	beq.n	8001fcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d069      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ef4:	4b53      	ldr	r3, [pc, #332]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f00:	4b50      	ldr	r3, [pc, #320]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0ad      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f10:	4b4c      	ldr	r3, [pc, #304]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a4b      	ldr	r2, [pc, #300]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f1c:	f7ff f964 	bl	80011e8 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff f960 	bl	80011e8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e09a      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f36:	4b43      	ldr	r3, [pc, #268]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f42:	4b40      	ldr	r3, [pc, #256]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	4b40      	ldr	r3, [pc, #256]	@ (8002048 <HAL_RCC_OscConfig+0x784>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f52:	3a01      	subs	r2, #1
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f5c:	0212      	lsls	r2, r2, #8
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f64:	0852      	lsrs	r2, r2, #1
 8001f66:	3a01      	subs	r2, #1
 8001f68:	0552      	lsls	r2, r2, #21
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f70:	0852      	lsrs	r2, r2, #1
 8001f72:	3a01      	subs	r2, #1
 8001f74:	0652      	lsls	r2, r2, #25
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f7c:	0912      	lsrs	r2, r2, #4
 8001f7e:	0452      	lsls	r2, r2, #17
 8001f80:	430a      	orrs	r2, r1
 8001f82:	4930      	ldr	r1, [pc, #192]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f88:	4b2e      	ldr	r3, [pc, #184]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f94:	4b2b      	ldr	r3, [pc, #172]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a2a      	ldr	r2, [pc, #168]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fa0:	f7ff f922 	bl	80011e8 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff f91e 	bl	80011e8 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e058      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc6:	e050      	b.n	800206a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e04f      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d148      	bne.n	800206a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fe4:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a16      	ldr	r2, [pc, #88]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ff0:	f7ff f8fa 	bl	80011e8 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff f8f6 	bl	80011e8 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e030      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200a:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x734>
 8002016:	e028      	b.n	800206a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d023      	beq.n	8002066 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a08      	ldr	r2, [pc, #32]	@ (8002044 <HAL_RCC_OscConfig+0x780>)
 8002024:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7ff f8dd 	bl	80011e8 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002030:	e00c      	b.n	800204c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff f8d9 	bl	80011e8 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d905      	bls.n	800204c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e013      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
 8002044:	40021000 	.word	0x40021000
 8002048:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204c:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_RCC_OscConfig+0x7b0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ec      	bne.n	8002032 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_RCC_OscConfig+0x7b0>)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4905      	ldr	r1, [pc, #20]	@ (8002074 <HAL_RCC_OscConfig+0x7b0>)
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_RCC_OscConfig+0x7b4>)
 8002060:	4013      	ands	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
 8002064:	e001      	b.n	800206a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	feeefffc 	.word	0xfeeefffc

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0e7      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b75      	ldr	r3, [pc, #468]	@ (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b72      	ldr	r3, [pc, #456]	@ (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4970      	ldr	r1, [pc, #448]	@ (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0cf      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d010      	beq.n	80020ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	4b66      	ldr	r3, [pc, #408]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020d8:	429a      	cmp	r2, r3
 80020da:	d908      	bls.n	80020ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b63      	ldr	r3, [pc, #396]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4960      	ldr	r1, [pc, #384]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04c      	beq.n	8002194 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	4b5a      	ldr	r3, [pc, #360]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d121      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0a6      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211a:	4b54      	ldr	r3, [pc, #336]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e09a      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002132:	4b4e      	ldr	r3, [pc, #312]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e08e      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002142:	4b4a      	ldr	r3, [pc, #296]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e086      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b46      	ldr	r3, [pc, #280]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4943      	ldr	r1, [pc, #268]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002164:	f7ff f840 	bl	80011e8 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7ff f83c 	bl	80011e8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e06e      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b3a      	ldr	r3, [pc, #232]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d010      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	4b31      	ldr	r3, [pc, #196]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d208      	bcs.n	80021c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b2e      	ldr	r3, [pc, #184]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	492b      	ldr	r1, [pc, #172]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c2:	4b29      	ldr	r3, [pc, #164]	@ (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d210      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d0:	4b25      	ldr	r3, [pc, #148]	@ (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 0207 	bic.w	r2, r3, #7
 80021d8:	4923      	ldr	r1, [pc, #140]	@ (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e0:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e036      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fe:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4918      	ldr	r1, [pc, #96]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800221c:	4b13      	ldr	r3, [pc, #76]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4910      	ldr	r1, [pc, #64]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002230:	f000 f824 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	490b      	ldr	r1, [pc, #44]	@ (8002270 <HAL_RCC_ClockConfig+0x1f4>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
 800224c:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 800224e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002250:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <HAL_RCC_ClockConfig+0x1fc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe ff77 	bl	8001148 <HAL_InitTick>
 800225a:	4603      	mov	r3, r0
 800225c:	72fb      	strb	r3, [r7, #11]

  return status;
 800225e:	7afb      	ldrb	r3, [r7, #11]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
 8002270:	08006180 	.word	0x08006180
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	@ 0x24
 8002280:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228a:	4b3e      	ldr	r3, [pc, #248]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002294:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x34>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d121      	bne.n	80022ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d11e      	bne.n	80022ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022b0:	4b34      	ldr	r3, [pc, #208]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022bc:	4b31      	ldr	r3, [pc, #196]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e005      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022f4:	4b25      	ldr	r3, [pc, #148]	@ (800238c <HAL_RCC_GetSysClockFreq+0x110>)
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	e004      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002300:	4b23      	ldr	r3, [pc, #140]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x114>)
 8002302:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d134      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800230a:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0xa6>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d003      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0xac>
 8002320:	e005      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002322:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <HAL_RCC_GetSysClockFreq+0x110>)
 8002324:	617b      	str	r3, [r7, #20]
      break;
 8002326:	e005      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002328:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x114>)
 800232a:	617b      	str	r3, [r7, #20]
      break;
 800232c:	e002      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	617b      	str	r3, [r7, #20]
      break;
 8002332:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	3301      	adds	r3, #1
 8002340:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	fb03 f202 	mul.w	r2, r3, r2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800235a:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	0e5b      	lsrs	r3, r3, #25
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	3301      	adds	r3, #1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002374:	69bb      	ldr	r3, [r7, #24]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	@ 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	08006198 	.word	0x08006198
 800238c:	00f42400 	.word	0x00f42400
 8002390:	007a1200 	.word	0x007a1200

08002394 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002398:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000000 	.word	0x20000000

080023ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023b0:	f7ff fff0 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4904      	ldr	r1, [pc, #16]	@ (80023d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	08006190 	.word	0x08006190

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023dc:	f7ff ffda 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0adb      	lsrs	r3, r3, #11
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4904      	ldr	r1, [pc, #16]	@ (8002400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08006190 	.word	0x08006190

08002404 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002410:	4b2a      	ldr	r3, [pc, #168]	@ (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800241c:	f7ff f9ee 	bl	80017fc <HAL_PWREx_GetVoltageRange>
 8002420:	6178      	str	r0, [r7, #20]
 8002422:	e014      	b.n	800244e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002428:	4a24      	ldr	r2, [pc, #144]	@ (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002430:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800243c:	f7ff f9de 	bl	80017fc <HAL_PWREx_GetVoltageRange>
 8002440:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002442:	4b1e      	ldr	r3, [pc, #120]	@ (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002446:	4a1d      	ldr	r2, [pc, #116]	@ (80024bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002448:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800244c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002454:	d10b      	bne.n	800246e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	@ 0x80
 800245a:	d919      	bls.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002460:	d902      	bls.n	8002468 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002462:	2302      	movs	r3, #2
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	e013      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002468:	2301      	movs	r3, #1
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	e010      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b80      	cmp	r3, #128	@ 0x80
 8002472:	d902      	bls.n	800247a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002474:	2303      	movs	r3, #3
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	e00a      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b80      	cmp	r3, #128	@ 0x80
 800247e:	d102      	bne.n	8002486 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002480:	2302      	movs	r3, #2
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e004      	b.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b70      	cmp	r3, #112	@ 0x70
 800248a:	d101      	bne.n	8002490 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800248c:	2301      	movs	r3, #1
 800248e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 0207 	bic.w	r2, r3, #7
 8002498:	4909      	ldr	r1, [pc, #36]	@ (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024a0:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d001      	beq.n	80024b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40022000 	.word	0x40022000

080024c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024cc:	2300      	movs	r3, #0
 80024ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024d0:	2300      	movs	r3, #0
 80024d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d041      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024e8:	d02a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024ee:	d824      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024fa:	d81e      	bhi.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002500:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002504:	d010      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002506:	e018      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002508:	4b86      	ldr	r3, [pc, #536]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a85      	ldr	r2, [pc, #532]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002512:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002514:	e015      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f000 facb 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 8002522:	4603      	mov	r3, r0
 8002524:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002526:	e00c      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3320      	adds	r3, #32
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fbb6 	bl	8002ca0 <RCCEx_PLLSAI2_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002538:	e003      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	74fb      	strb	r3, [r7, #19]
      break;
 800253e:	e000      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002548:	4b76      	ldr	r3, [pc, #472]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002556:	4973      	ldr	r1, [pc, #460]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800255e:	e001      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d041      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002574:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002578:	d02a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800257a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800257e:	d824      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002580:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002584:	d008      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800258a:	d81e      	bhi.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002594:	d010      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002596:	e018      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002598:	4b62      	ldr	r3, [pc, #392]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a61      	ldr	r2, [pc, #388]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a4:	e015      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fa83 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 80025b2:	4603      	mov	r3, r0
 80025b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b6:	e00c      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3320      	adds	r3, #32
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fb6e 	bl	8002ca0 <RCCEx_PLLSAI2_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025c8:	e003      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	74fb      	strb	r3, [r7, #19]
      break;
 80025ce:	e000      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025d8:	4b52      	ldr	r3, [pc, #328]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025e6:	494f      	ldr	r1, [pc, #316]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025ee:	e001      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a0 	beq.w	8002742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002606:	4b47      	ldr	r3, [pc, #284]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261c:	4b41      	ldr	r3, [pc, #260]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	4a40      	ldr	r2, [pc, #256]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002626:	6593      	str	r3, [r2, #88]	@ 0x58
 8002628:	4b3e      	ldr	r3, [pc, #248]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002634:	2301      	movs	r3, #1
 8002636:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002638:	4b3b      	ldr	r3, [pc, #236]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3a      	ldr	r2, [pc, #232]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002644:	f7fe fdd0 	bl	80011e8 <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800264a:	e009      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fdcc 	bl	80011e8 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	74fb      	strb	r3, [r7, #19]
        break;
 800265e:	e005      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002660:	4b31      	ldr	r3, [pc, #196]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d15c      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002672:	4b2c      	ldr	r3, [pc, #176]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01f      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	d019      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002690:	4b24      	ldr	r3, [pc, #144]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800269a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800269c:	4b21      	ldr	r3, [pc, #132]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a2:	4a20      	ldr	r2, [pc, #128]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026bc:	4a19      	ldr	r2, [pc, #100]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fd8b 	bl	80011e8 <HAL_GetTick>
 80026d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d4:	e00b      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe fd87 	bl	80011e8 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d902      	bls.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	74fb      	strb	r3, [r7, #19]
            break;
 80026ec:	e006      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ec      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002702:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002708:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002712:	4904      	ldr	r1, [pc, #16]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800271a:	e009      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	74bb      	strb	r3, [r7, #18]
 8002720:	e006      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002730:	7c7b      	ldrb	r3, [r7, #17]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4b9e      	ldr	r3, [pc, #632]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	4a9d      	ldr	r2, [pc, #628]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800274e:	4b98      	ldr	r3, [pc, #608]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002754:	f023 0203 	bic.w	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275c:	4994      	ldr	r1, [pc, #592]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002770:	4b8f      	ldr	r3, [pc, #572]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002776:	f023 020c 	bic.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277e:	498c      	ldr	r1, [pc, #560]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002792:	4b87      	ldr	r3, [pc, #540]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002798:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	4983      	ldr	r1, [pc, #524]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027b4:	4b7e      	ldr	r3, [pc, #504]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	497b      	ldr	r1, [pc, #492]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027d6:	4b76      	ldr	r3, [pc, #472]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e4:	4972      	ldr	r1, [pc, #456]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027f8:	4b6d      	ldr	r3, [pc, #436]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002806:	496a      	ldr	r1, [pc, #424]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800281a:	4b65      	ldr	r3, [pc, #404]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002820:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002828:	4961      	ldr	r1, [pc, #388]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800283c:	4b5c      	ldr	r3, [pc, #368]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002842:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284a:	4959      	ldr	r1, [pc, #356]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800285e:	4b54      	ldr	r3, [pc, #336]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002864:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800286c:	4950      	ldr	r1, [pc, #320]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002880:	4b4b      	ldr	r3, [pc, #300]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002886:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288e:	4948      	ldr	r1, [pc, #288]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028a2:	4b43      	ldr	r3, [pc, #268]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b0:	493f      	ldr	r1, [pc, #252]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d028      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028c4:	4b3a      	ldr	r3, [pc, #232]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028d2:	4937      	ldr	r1, [pc, #220]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028e2:	d106      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e4:	4b32      	ldr	r3, [pc, #200]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a31      	ldr	r2, [pc, #196]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ee:	60d3      	str	r3, [r2, #12]
 80028f0:	e011      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028fa:	d10c      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f8d8 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002912:	7cfb      	ldrb	r3, [r7, #19]
 8002914:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d028      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002922:	4b23      	ldr	r3, [pc, #140]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002928:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	491f      	ldr	r1, [pc, #124]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002940:	d106      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002942:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4a1a      	ldr	r2, [pc, #104]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800294c:	60d3      	str	r3, [r2, #12]
 800294e:	e011      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002954:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002958:	d10c      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f8a9 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02b      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002980:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002986:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800298e:	4908      	ldr	r1, [pc, #32]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800299a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800299e:	d109      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	4b03      	ldr	r3, [pc, #12]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a02      	ldr	r2, [pc, #8]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029aa:	60d3      	str	r3, [r2, #12]
 80029ac:	e014      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2101      	movs	r1, #1
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f877 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d02f      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029f2:	4928      	ldr	r1, [pc, #160]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a02:	d10d      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	2102      	movs	r1, #2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f854 	bl	8002ab8 <RCCEx_PLLSAI1_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d014      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	74bb      	strb	r3, [r7, #18]
 8002a1e:	e011      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3320      	adds	r3, #32
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 f935 	bl	8002ca0 <RCCEx_PLLSAI2_Config>
 8002a36:	4603      	mov	r3, r0
 8002a38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a50:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a56:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a5e:	490d      	ldr	r1, [pc, #52]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a72:	4b08      	ldr	r3, [pc, #32]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a82:	4904      	ldr	r1, [pc, #16]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a04      	ldr	r2, [pc, #16]	@ (8002ab4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ac6:	4b75      	ldr	r3, [pc, #468]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d018      	beq.n	8002b04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ad2:	4b72      	ldr	r3, [pc, #456]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0203 	and.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d10d      	bne.n	8002afe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002aea:	4b6c      	ldr	r3, [pc, #432]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
       ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d047      	beq.n	8002b8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
 8002b02:	e044      	b.n	8002b8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d018      	beq.n	8002b3e <RCCEx_PLLSAI1_Config+0x86>
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d825      	bhi.n	8002b5c <RCCEx_PLLSAI1_Config+0xa4>
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d002      	beq.n	8002b1a <RCCEx_PLLSAI1_Config+0x62>
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d009      	beq.n	8002b2c <RCCEx_PLLSAI1_Config+0x74>
 8002b18:	e020      	b.n	8002b5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b1a:	4b60      	ldr	r3, [pc, #384]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d11d      	bne.n	8002b62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2a:	e01a      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b2c:	4b5b      	ldr	r3, [pc, #364]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d116      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3c:	e013      	b.n	8002b66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b3e:	4b57      	ldr	r3, [pc, #348]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b4a:	4b54      	ldr	r3, [pc, #336]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b5a:	e006      	b.n	8002b6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b60:	e004      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b62:	bf00      	nop
 8002b64:	e002      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b66:	bf00      	nop
 8002b68:	e000      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10d      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b72:	4b4a      	ldr	r3, [pc, #296]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	430b      	orrs	r3, r1
 8002b88:	4944      	ldr	r1, [pc, #272]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d17d      	bne.n	8002c90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b94:	4b41      	ldr	r3, [pc, #260]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a40      	ldr	r2, [pc, #256]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba0:	f7fe fb22 	bl	80011e8 <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ba6:	e009      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba8:	f7fe fb1e 	bl	80011e8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d902      	bls.n	8002bbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bba:	e005      	b.n	8002bc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bbc:	4b37      	ldr	r3, [pc, #220]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1ef      	bne.n	8002ba8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d160      	bne.n	8002c90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d111      	bne.n	8002bf8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd4:	4b31      	ldr	r3, [pc, #196]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6892      	ldr	r2, [r2, #8]
 8002be4:	0211      	lsls	r1, r2, #8
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68d2      	ldr	r2, [r2, #12]
 8002bea:	0912      	lsrs	r2, r2, #4
 8002bec:	0452      	lsls	r2, r2, #17
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	492a      	ldr	r1, [pc, #168]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	610b      	str	r3, [r1, #16]
 8002bf6:	e027      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d112      	bne.n	8002c24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bfe:	4b27      	ldr	r3, [pc, #156]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6892      	ldr	r2, [r2, #8]
 8002c0e:	0211      	lsls	r1, r2, #8
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6912      	ldr	r2, [r2, #16]
 8002c14:	0852      	lsrs	r2, r2, #1
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0552      	lsls	r2, r2, #21
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	491f      	ldr	r1, [pc, #124]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	610b      	str	r3, [r1, #16]
 8002c22:	e011      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c24:	4b1d      	ldr	r3, [pc, #116]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6892      	ldr	r2, [r2, #8]
 8002c34:	0211      	lsls	r1, r2, #8
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6952      	ldr	r2, [r2, #20]
 8002c3a:	0852      	lsrs	r2, r2, #1
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	0652      	lsls	r2, r2, #25
 8002c40:	430a      	orrs	r2, r1
 8002c42:	4916      	ldr	r1, [pc, #88]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c48:	4b14      	ldr	r3, [pc, #80]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a13      	ldr	r2, [pc, #76]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fac8 	bl	80011e8 <HAL_GetTick>
 8002c58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c5a:	e009      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c5c:	f7fe fac4 	bl	80011e8 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d902      	bls.n	8002c70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c6e:	e005      	b.n	8002c7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c70:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ef      	beq.n	8002c5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	4904      	ldr	r1, [pc, #16]	@ (8002c9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000

08002ca0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cae:	4b6a      	ldr	r3, [pc, #424]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d018      	beq.n	8002cec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cba:	4b67      	ldr	r3, [pc, #412]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0203 	and.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d10d      	bne.n	8002ce6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cd2:	4b61      	ldr	r3, [pc, #388]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d047      	beq.n	8002d76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e044      	b.n	8002d76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d018      	beq.n	8002d26 <RCCEx_PLLSAI2_Config+0x86>
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d825      	bhi.n	8002d44 <RCCEx_PLLSAI2_Config+0xa4>
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d002      	beq.n	8002d02 <RCCEx_PLLSAI2_Config+0x62>
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d009      	beq.n	8002d14 <RCCEx_PLLSAI2_Config+0x74>
 8002d00:	e020      	b.n	8002d44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d02:	4b55      	ldr	r3, [pc, #340]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11d      	bne.n	8002d4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d12:	e01a      	b.n	8002d4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d14:	4b50      	ldr	r3, [pc, #320]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d116      	bne.n	8002d4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d24:	e013      	b.n	8002d4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d26:	4b4c      	ldr	r3, [pc, #304]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10f      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d32:	4b49      	ldr	r3, [pc, #292]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d42:	e006      	b.n	8002d52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      break;
 8002d48:	e004      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e002      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	4939      	ldr	r1, [pc, #228]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d167      	bne.n	8002e4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d7c:	4b36      	ldr	r3, [pc, #216]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a35      	ldr	r2, [pc, #212]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d88:	f7fe fa2e 	bl	80011e8 <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d8e:	e009      	b.n	8002da4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d90:	f7fe fa2a 	bl	80011e8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d902      	bls.n	8002da4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	73fb      	strb	r3, [r7, #15]
        break;
 8002da2:	e005      	b.n	8002db0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002da4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ef      	bne.n	8002d90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d14a      	bne.n	8002e4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d111      	bne.n	8002de0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dbc:	4b26      	ldr	r3, [pc, #152]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6892      	ldr	r2, [r2, #8]
 8002dcc:	0211      	lsls	r1, r2, #8
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68d2      	ldr	r2, [r2, #12]
 8002dd2:	0912      	lsrs	r2, r2, #4
 8002dd4:	0452      	lsls	r2, r2, #17
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	491f      	ldr	r1, [pc, #124]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	614b      	str	r3, [r1, #20]
 8002dde:	e011      	b.n	8002e04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002de0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002de8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6892      	ldr	r2, [r2, #8]
 8002df0:	0211      	lsls	r1, r2, #8
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6912      	ldr	r2, [r2, #16]
 8002df6:	0852      	lsrs	r2, r2, #1
 8002df8:	3a01      	subs	r2, #1
 8002dfa:	0652      	lsls	r2, r2, #25
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	4916      	ldr	r1, [pc, #88]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e04:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a13      	ldr	r2, [pc, #76]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe f9ea 	bl	80011e8 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e16:	e009      	b.n	8002e2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e18:	f7fe f9e6 	bl	80011e8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d902      	bls.n	8002e2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	73fb      	strb	r3, [r7, #15]
          break;
 8002e2a:	e005      	b.n	8002e38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0ef      	beq.n	8002e18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	4904      	ldr	r1, [pc, #16]	@ (8002e58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000

08002e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e049      	b.n	8002f02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fd ff04 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f000 ffb0 	bl	8003e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d001      	beq.n	8002f24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e047      	b.n	8002fb4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a23      	ldr	r2, [pc, #140]	@ (8002fc0 <HAL_TIM_Base_Start+0xb4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <HAL_TIM_Base_Start+0x66>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3e:	d018      	beq.n	8002f72 <HAL_TIM_Base_Start+0x66>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc4 <HAL_TIM_Base_Start+0xb8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_TIM_Base_Start+0x66>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc8 <HAL_TIM_Base_Start+0xbc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_TIM_Base_Start+0x66>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1c      	ldr	r2, [pc, #112]	@ (8002fcc <HAL_TIM_Base_Start+0xc0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_TIM_Base_Start+0x66>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd0 <HAL_TIM_Base_Start+0xc4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_TIM_Base_Start+0x66>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	@ (8002fd4 <HAL_TIM_Base_Start+0xc8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d115      	bne.n	8002f9e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b17      	ldr	r3, [pc, #92]	@ (8002fd8 <HAL_TIM_Base_Start+0xcc>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b06      	cmp	r3, #6
 8002f82:	d015      	beq.n	8002fb0 <HAL_TIM_Base_Start+0xa4>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f8a:	d011      	beq.n	8002fb0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9c:	e008      	b.n	8002fb0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e000      	b.n	8002fb2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	40013400 	.word	0x40013400
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	00010007 	.word	0x00010007

08002fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d001      	beq.n	8002ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e04f      	b.n	8003094 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a23      	ldr	r2, [pc, #140]	@ (80030a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01d      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800301e:	d018      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1e      	ldr	r2, [pc, #120]	@ (80030a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00e      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1c      	ldr	r2, [pc, #112]	@ (80030ac <HAL_TIM_Base_Start_IT+0xd0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d009      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1b      	ldr	r2, [pc, #108]	@ (80030b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d004      	beq.n	8003052 <HAL_TIM_Base_Start_IT+0x76>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a19      	ldr	r2, [pc, #100]	@ (80030b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d115      	bne.n	800307e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4b17      	ldr	r3, [pc, #92]	@ (80030b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800305a:	4013      	ands	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b06      	cmp	r3, #6
 8003062:	d015      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0xb4>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800306a:	d011      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307c:	e008      	b.n	8003090 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e000      	b.n	8003092 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003090:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40000c00 	.word	0x40000c00
 80030b0:	40013400 	.word	0x40013400
 80030b4:	40014000 	.word	0x40014000
 80030b8:	00010007 	.word	0x00010007

080030bc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e049      	b.n	8003162 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f841 	bl	800316a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	4619      	mov	r1, r3
 80030fa:	4610      	mov	r0, r2
 80030fc:	f000 fe80 	bl	8003e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <HAL_TIM_OC_Start_IT+0x28>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e03c      	b.n	8003222 <HAL_TIM_OC_Start_IT+0xa2>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d109      	bne.n	80031c2 <HAL_TIM_OC_Start_IT+0x42>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	e02f      	b.n	8003222 <HAL_TIM_OC_Start_IT+0xa2>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d109      	bne.n	80031dc <HAL_TIM_OC_Start_IT+0x5c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	bf14      	ite	ne
 80031d4:	2301      	movne	r3, #1
 80031d6:	2300      	moveq	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e022      	b.n	8003222 <HAL_TIM_OC_Start_IT+0xa2>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d109      	bne.n	80031f6 <HAL_TIM_OC_Start_IT+0x76>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	bf14      	ite	ne
 80031ee:	2301      	movne	r3, #1
 80031f0:	2300      	moveq	r3, #0
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	e015      	b.n	8003222 <HAL_TIM_OC_Start_IT+0xa2>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d109      	bne.n	8003210 <HAL_TIM_OC_Start_IT+0x90>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e008      	b.n	8003222 <HAL_TIM_OC_Start_IT+0xa2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0e7      	b.n	80033fa <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d104      	bne.n	800323a <HAL_TIM_OC_Start_IT+0xba>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003238:	e023      	b.n	8003282 <HAL_TIM_OC_Start_IT+0x102>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b04      	cmp	r3, #4
 800323e:	d104      	bne.n	800324a <HAL_TIM_OC_Start_IT+0xca>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003248:	e01b      	b.n	8003282 <HAL_TIM_OC_Start_IT+0x102>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d104      	bne.n	800325a <HAL_TIM_OC_Start_IT+0xda>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003258:	e013      	b.n	8003282 <HAL_TIM_OC_Start_IT+0x102>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b0c      	cmp	r3, #12
 800325e:	d104      	bne.n	800326a <HAL_TIM_OC_Start_IT+0xea>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003268:	e00b      	b.n	8003282 <HAL_TIM_OC_Start_IT+0x102>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b10      	cmp	r3, #16
 800326e:	d104      	bne.n	800327a <HAL_TIM_OC_Start_IT+0xfa>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003278:	e003      	b.n	8003282 <HAL_TIM_OC_Start_IT+0x102>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d841      	bhi.n	800330c <HAL_TIM_OC_Start_IT+0x18c>
 8003288:	a201      	add	r2, pc, #4	@ (adr r2, 8003290 <HAL_TIM_OC_Start_IT+0x110>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032c5 	.word	0x080032c5
 8003294:	0800330d 	.word	0x0800330d
 8003298:	0800330d 	.word	0x0800330d
 800329c:	0800330d 	.word	0x0800330d
 80032a0:	080032d7 	.word	0x080032d7
 80032a4:	0800330d 	.word	0x0800330d
 80032a8:	0800330d 	.word	0x0800330d
 80032ac:	0800330d 	.word	0x0800330d
 80032b0:	080032e9 	.word	0x080032e9
 80032b4:	0800330d 	.word	0x0800330d
 80032b8:	0800330d 	.word	0x0800330d
 80032bc:	0800330d 	.word	0x0800330d
 80032c0:	080032fb 	.word	0x080032fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0202 	orr.w	r2, r2, #2
 80032d2:	60da      	str	r2, [r3, #12]
      break;
 80032d4:	e01d      	b.n	8003312 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0204 	orr.w	r2, r2, #4
 80032e4:	60da      	str	r2, [r3, #12]
      break;
 80032e6:	e014      	b.n	8003312 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0208 	orr.w	r2, r2, #8
 80032f6:	60da      	str	r2, [r3, #12]
      break;
 80032f8:	e00b      	b.n	8003312 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0210 	orr.w	r2, r2, #16
 8003308:	60da      	str	r2, [r3, #12]
      break;
 800330a:	e002      	b.n	8003312 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	bf00      	nop
  }

  if (status == HAL_OK)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d16f      	bne.n	80033f8 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	6839      	ldr	r1, [r7, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f001 f977 	bl	8004614 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a36      	ldr	r2, [pc, #216]	@ (8003404 <HAL_TIM_OC_Start_IT+0x284>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d013      	beq.n	8003358 <HAL_TIM_OC_Start_IT+0x1d8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a34      	ldr	r2, [pc, #208]	@ (8003408 <HAL_TIM_OC_Start_IT+0x288>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00e      	beq.n	8003358 <HAL_TIM_OC_Start_IT+0x1d8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a33      	ldr	r2, [pc, #204]	@ (800340c <HAL_TIM_OC_Start_IT+0x28c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d009      	beq.n	8003358 <HAL_TIM_OC_Start_IT+0x1d8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a31      	ldr	r2, [pc, #196]	@ (8003410 <HAL_TIM_OC_Start_IT+0x290>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_TIM_OC_Start_IT+0x1d8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a30      	ldr	r2, [pc, #192]	@ (8003414 <HAL_TIM_OC_Start_IT+0x294>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_TIM_OC_Start_IT+0x1dc>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_TIM_OC_Start_IT+0x1de>
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a23      	ldr	r2, [pc, #140]	@ (8003404 <HAL_TIM_OC_Start_IT+0x284>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d01d      	beq.n	80033b8 <HAL_TIM_OC_Start_IT+0x238>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003384:	d018      	beq.n	80033b8 <HAL_TIM_OC_Start_IT+0x238>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a23      	ldr	r2, [pc, #140]	@ (8003418 <HAL_TIM_OC_Start_IT+0x298>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <HAL_TIM_OC_Start_IT+0x238>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a21      	ldr	r2, [pc, #132]	@ (800341c <HAL_TIM_OC_Start_IT+0x29c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_TIM_OC_Start_IT+0x238>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a20      	ldr	r2, [pc, #128]	@ (8003420 <HAL_TIM_OC_Start_IT+0x2a0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_TIM_OC_Start_IT+0x238>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a17      	ldr	r2, [pc, #92]	@ (8003408 <HAL_TIM_OC_Start_IT+0x288>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_TIM_OC_Start_IT+0x238>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a16      	ldr	r2, [pc, #88]	@ (800340c <HAL_TIM_OC_Start_IT+0x28c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d115      	bne.n	80033e4 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	4b19      	ldr	r3, [pc, #100]	@ (8003424 <HAL_TIM_OC_Start_IT+0x2a4>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d015      	beq.n	80033f6 <HAL_TIM_OC_Start_IT+0x276>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d0:	d011      	beq.n	80033f6 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	e008      	b.n	80033f6 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e000      	b.n	80033f8 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40013400 	.word	0x40013400
 800340c:	40014000 	.word	0x40014000
 8003410:	40014400 	.word	0x40014400
 8003414:	40014800 	.word	0x40014800
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40000c00 	.word	0x40000c00
 8003424:	00010007 	.word	0x00010007

08003428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e049      	b.n	80034ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f841 	bl	80034d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f000 fcca 	bl	8003e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_TIM_PWM_Start+0x24>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e03c      	b.n	800358a <HAL_TIM_PWM_Start+0x9e>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b04      	cmp	r3, #4
 8003514:	d109      	bne.n	800352a <HAL_TIM_PWM_Start+0x3e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	bf14      	ite	ne
 8003522:	2301      	movne	r3, #1
 8003524:	2300      	moveq	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	e02f      	b.n	800358a <HAL_TIM_PWM_Start+0x9e>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d109      	bne.n	8003544 <HAL_TIM_PWM_Start+0x58>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e022      	b.n	800358a <HAL_TIM_PWM_Start+0x9e>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d109      	bne.n	800355e <HAL_TIM_PWM_Start+0x72>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e015      	b.n	800358a <HAL_TIM_PWM_Start+0x9e>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b10      	cmp	r3, #16
 8003562:	d109      	bne.n	8003578 <HAL_TIM_PWM_Start+0x8c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e008      	b.n	800358a <HAL_TIM_PWM_Start+0x9e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e09c      	b.n	80036cc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_PWM_Start+0xb6>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035a0:	e023      	b.n	80035ea <HAL_TIM_PWM_Start+0xfe>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0xc6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b0:	e01b      	b.n	80035ea <HAL_TIM_PWM_Start+0xfe>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0xd6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c0:	e013      	b.n	80035ea <HAL_TIM_PWM_Start+0xfe>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start+0xe6>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035d0:	e00b      	b.n	80035ea <HAL_TIM_PWM_Start+0xfe>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b10      	cmp	r3, #16
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_PWM_Start+0xf6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035e0:	e003      	b.n	80035ea <HAL_TIM_PWM_Start+0xfe>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2201      	movs	r2, #1
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 f80e 	bl	8004614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a35      	ldr	r2, [pc, #212]	@ (80036d4 <HAL_TIM_PWM_Start+0x1e8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_TIM_PWM_Start+0x13e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a34      	ldr	r2, [pc, #208]	@ (80036d8 <HAL_TIM_PWM_Start+0x1ec>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00e      	beq.n	800362a <HAL_TIM_PWM_Start+0x13e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a32      	ldr	r2, [pc, #200]	@ (80036dc <HAL_TIM_PWM_Start+0x1f0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_TIM_PWM_Start+0x13e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a31      	ldr	r2, [pc, #196]	@ (80036e0 <HAL_TIM_PWM_Start+0x1f4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_TIM_PWM_Start+0x13e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2f      	ldr	r2, [pc, #188]	@ (80036e4 <HAL_TIM_PWM_Start+0x1f8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_TIM_PWM_Start+0x142>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_TIM_PWM_Start+0x144>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003642:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a22      	ldr	r2, [pc, #136]	@ (80036d4 <HAL_TIM_PWM_Start+0x1e8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01d      	beq.n	800368a <HAL_TIM_PWM_Start+0x19e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003656:	d018      	beq.n	800368a <HAL_TIM_PWM_Start+0x19e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a22      	ldr	r2, [pc, #136]	@ (80036e8 <HAL_TIM_PWM_Start+0x1fc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <HAL_TIM_PWM_Start+0x19e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a21      	ldr	r2, [pc, #132]	@ (80036ec <HAL_TIM_PWM_Start+0x200>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00e      	beq.n	800368a <HAL_TIM_PWM_Start+0x19e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1f      	ldr	r2, [pc, #124]	@ (80036f0 <HAL_TIM_PWM_Start+0x204>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_TIM_PWM_Start+0x19e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a17      	ldr	r2, [pc, #92]	@ (80036d8 <HAL_TIM_PWM_Start+0x1ec>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_TIM_PWM_Start+0x19e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a15      	ldr	r2, [pc, #84]	@ (80036dc <HAL_TIM_PWM_Start+0x1f0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d115      	bne.n	80036b6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	4b18      	ldr	r3, [pc, #96]	@ (80036f4 <HAL_TIM_PWM_Start+0x208>)
 8003692:	4013      	ands	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b06      	cmp	r3, #6
 800369a:	d015      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x1dc>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a2:	d011      	beq.n	80036c8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b4:	e008      	b.n	80036c8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e000      	b.n	80036ca <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40013400 	.word	0x40013400
 80036dc:	40014000 	.word	0x40014000
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40000c00 	.word	0x40000c00
 80036f4:	00010007 	.word	0x00010007

080036f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d020      	beq.n	800375c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01b      	beq.n	800375c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0202 	mvn.w	r2, #2
 800372c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fb31 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fc ff34 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fb34 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d020      	beq.n	80037a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01b      	beq.n	80037a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0204 	mvn.w	r2, #4
 8003778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2202      	movs	r2, #2
 800377e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fb0b 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003794:	e005      	b.n	80037a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fc ff0e 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fb0e 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d020      	beq.n	80037f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0208 	mvn.w	r2, #8
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2204      	movs	r2, #4
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fae5 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fc fee8 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fae8 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d020      	beq.n	8003840 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01b      	beq.n	8003840 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0210 	mvn.w	r2, #16
 8003810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2208      	movs	r2, #8
 8003816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fabf 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fc fec2 	bl	80005b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fac2 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0201 	mvn.w	r2, #1
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fc fe7e 	bl	8000560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 ff7e 	bl	8004784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00c      	beq.n	80038ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 ff76 	bl	8004798 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa81 	bl	8003dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0220 	mvn.w	r2, #32
 80038ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 ff3e 	bl	8004770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003916:	2302      	movs	r3, #2
 8003918:	e066      	b.n	80039e8 <HAL_TIM_OC_ConfigChannel+0xec>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b14      	cmp	r3, #20
 8003926:	d857      	bhi.n	80039d8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003928:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <HAL_TIM_OC_ConfigChannel+0x34>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003985 	.word	0x08003985
 8003934:	080039d9 	.word	0x080039d9
 8003938:	080039d9 	.word	0x080039d9
 800393c:	080039d9 	.word	0x080039d9
 8003940:	08003993 	.word	0x08003993
 8003944:	080039d9 	.word	0x080039d9
 8003948:	080039d9 	.word	0x080039d9
 800394c:	080039d9 	.word	0x080039d9
 8003950:	080039a1 	.word	0x080039a1
 8003954:	080039d9 	.word	0x080039d9
 8003958:	080039d9 	.word	0x080039d9
 800395c:	080039d9 	.word	0x080039d9
 8003960:	080039af 	.word	0x080039af
 8003964:	080039d9 	.word	0x080039d9
 8003968:	080039d9 	.word	0x080039d9
 800396c:	080039d9 	.word	0x080039d9
 8003970:	080039bd 	.word	0x080039bd
 8003974:	080039d9 	.word	0x080039d9
 8003978:	080039d9 	.word	0x080039d9
 800397c:	080039d9 	.word	0x080039d9
 8003980:	080039cb 	.word	0x080039cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fad2 	bl	8003f34 <TIM_OC1_SetConfig>
      break;
 8003990:	e025      	b.n	80039de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fb5b 	bl	8004054 <TIM_OC2_SetConfig>
      break;
 800399e:	e01e      	b.n	80039de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fbde 	bl	8004168 <TIM_OC3_SetConfig>
      break;
 80039ac:	e017      	b.n	80039de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fc5f 	bl	8004278 <TIM_OC4_SetConfig>
      break;
 80039ba:	e010      	b.n	80039de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fcc2 	bl	800434c <TIM_OC5_SetConfig>
      break;
 80039c8:	e009      	b.n	80039de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fd1f 	bl	8004414 <TIM_OC6_SetConfig>
      break;
 80039d6:	e002      	b.n	80039de <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	75fb      	strb	r3, [r7, #23]
      break;
 80039dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e0ff      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b14      	cmp	r3, #20
 8003a1a:	f200 80f0 	bhi.w	8003bfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a79 	.word	0x08003a79
 8003a28:	08003bff 	.word	0x08003bff
 8003a2c:	08003bff 	.word	0x08003bff
 8003a30:	08003bff 	.word	0x08003bff
 8003a34:	08003ab9 	.word	0x08003ab9
 8003a38:	08003bff 	.word	0x08003bff
 8003a3c:	08003bff 	.word	0x08003bff
 8003a40:	08003bff 	.word	0x08003bff
 8003a44:	08003afb 	.word	0x08003afb
 8003a48:	08003bff 	.word	0x08003bff
 8003a4c:	08003bff 	.word	0x08003bff
 8003a50:	08003bff 	.word	0x08003bff
 8003a54:	08003b3b 	.word	0x08003b3b
 8003a58:	08003bff 	.word	0x08003bff
 8003a5c:	08003bff 	.word	0x08003bff
 8003a60:	08003bff 	.word	0x08003bff
 8003a64:	08003b7d 	.word	0x08003b7d
 8003a68:	08003bff 	.word	0x08003bff
 8003a6c:	08003bff 	.word	0x08003bff
 8003a70:	08003bff 	.word	0x08003bff
 8003a74:	08003bbd 	.word	0x08003bbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fa58 	bl	8003f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0208 	orr.w	r2, r2, #8
 8003a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0204 	bic.w	r2, r2, #4
 8003aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6999      	ldr	r1, [r3, #24]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	619a      	str	r2, [r3, #24]
      break;
 8003ab6:	e0a5      	b.n	8003c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fac8 	bl	8004054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6999      	ldr	r1, [r3, #24]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	021a      	lsls	r2, r3, #8
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	619a      	str	r2, [r3, #24]
      break;
 8003af8:	e084      	b.n	8003c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fb31 	bl	8004168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0208 	orr.w	r2, r2, #8
 8003b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0204 	bic.w	r2, r2, #4
 8003b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69d9      	ldr	r1, [r3, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]
      break;
 8003b38:	e064      	b.n	8003c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fb99 	bl	8004278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69d9      	ldr	r1, [r3, #28]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	021a      	lsls	r2, r3, #8
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	61da      	str	r2, [r3, #28]
      break;
 8003b7a:	e043      	b.n	8003c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fbe2 	bl	800434c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0208 	orr.w	r2, r2, #8
 8003b96:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0204 	bic.w	r2, r2, #4
 8003ba6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bba:	e023      	b.n	8003c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fc26 	bl	8004414 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	021a      	lsls	r2, r3, #8
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bfc:	e002      	b.n	8003c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
      break;
 8003c02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop

08003c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIM_ConfigClockSource+0x1c>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e0b6      	b.n	8003da2 <HAL_TIM_ConfigClockSource+0x18a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c70:	d03e      	beq.n	8003cf0 <HAL_TIM_ConfigClockSource+0xd8>
 8003c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c76:	f200 8087 	bhi.w	8003d88 <HAL_TIM_ConfigClockSource+0x170>
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7e:	f000 8086 	beq.w	8003d8e <HAL_TIM_ConfigClockSource+0x176>
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c86:	d87f      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x170>
 8003c88:	2b70      	cmp	r3, #112	@ 0x70
 8003c8a:	d01a      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0xaa>
 8003c8c:	2b70      	cmp	r3, #112	@ 0x70
 8003c8e:	d87b      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x170>
 8003c90:	2b60      	cmp	r3, #96	@ 0x60
 8003c92:	d050      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x11e>
 8003c94:	2b60      	cmp	r3, #96	@ 0x60
 8003c96:	d877      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x170>
 8003c98:	2b50      	cmp	r3, #80	@ 0x50
 8003c9a:	d03c      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0xfe>
 8003c9c:	2b50      	cmp	r3, #80	@ 0x50
 8003c9e:	d873      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x170>
 8003ca0:	2b40      	cmp	r3, #64	@ 0x40
 8003ca2:	d058      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x13e>
 8003ca4:	2b40      	cmp	r3, #64	@ 0x40
 8003ca6:	d86f      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x170>
 8003ca8:	2b30      	cmp	r3, #48	@ 0x30
 8003caa:	d064      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15e>
 8003cac:	2b30      	cmp	r3, #48	@ 0x30
 8003cae:	d86b      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x170>
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d060      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15e>
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d867      	bhi.n	8003d88 <HAL_TIM_ConfigClockSource+0x170>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d05c      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15e>
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d05a      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x15e>
 8003cc0:	e062      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cd2:	f000 fc7f 	bl	80045d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	609a      	str	r2, [r3, #8]
      break;
 8003cee:	e04f      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d00:	f000 fc68 	bl	80045d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d12:	609a      	str	r2, [r3, #8]
      break;
 8003d14:	e03c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d22:	461a      	mov	r2, r3
 8003d24:	f000 fbdc 	bl	80044e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2150      	movs	r1, #80	@ 0x50
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fc35 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8003d34:	e02c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d42:	461a      	mov	r2, r3
 8003d44:	f000 fbfb 	bl	800453e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2160      	movs	r1, #96	@ 0x60
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fc25 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8003d54:	e01c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 fbbc 	bl	80044e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2140      	movs	r1, #64	@ 0x40
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fc15 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8003d74:	e00c      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f000 fc0c 	bl	800459e <TIM_ITRx_SetConfig>
      break;
 8003d86:	e003      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8c:	e000      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	7f1b      	ldrb	r3, [r3, #28]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a40      	ldr	r2, [pc, #256]	@ (8003f14 <TIM_Base_SetConfig+0x114>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <TIM_Base_SetConfig+0x40>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e1e:	d00f      	beq.n	8003e40 <TIM_Base_SetConfig+0x40>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a3d      	ldr	r2, [pc, #244]	@ (8003f18 <TIM_Base_SetConfig+0x118>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00b      	beq.n	8003e40 <TIM_Base_SetConfig+0x40>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a3c      	ldr	r2, [pc, #240]	@ (8003f1c <TIM_Base_SetConfig+0x11c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d007      	beq.n	8003e40 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a3b      	ldr	r2, [pc, #236]	@ (8003f20 <TIM_Base_SetConfig+0x120>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d003      	beq.n	8003e40 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3a      	ldr	r2, [pc, #232]	@ (8003f24 <TIM_Base_SetConfig+0x124>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d108      	bne.n	8003e52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a2f      	ldr	r2, [pc, #188]	@ (8003f14 <TIM_Base_SetConfig+0x114>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01f      	beq.n	8003e9a <TIM_Base_SetConfig+0x9a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e60:	d01b      	beq.n	8003e9a <TIM_Base_SetConfig+0x9a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2c      	ldr	r2, [pc, #176]	@ (8003f18 <TIM_Base_SetConfig+0x118>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d017      	beq.n	8003e9a <TIM_Base_SetConfig+0x9a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f1c <TIM_Base_SetConfig+0x11c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <TIM_Base_SetConfig+0x9a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a2a      	ldr	r2, [pc, #168]	@ (8003f20 <TIM_Base_SetConfig+0x120>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00f      	beq.n	8003e9a <TIM_Base_SetConfig+0x9a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a29      	ldr	r2, [pc, #164]	@ (8003f24 <TIM_Base_SetConfig+0x124>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00b      	beq.n	8003e9a <TIM_Base_SetConfig+0x9a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a28      	ldr	r2, [pc, #160]	@ (8003f28 <TIM_Base_SetConfig+0x128>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d007      	beq.n	8003e9a <TIM_Base_SetConfig+0x9a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a27      	ldr	r2, [pc, #156]	@ (8003f2c <TIM_Base_SetConfig+0x12c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d003      	beq.n	8003e9a <TIM_Base_SetConfig+0x9a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a26      	ldr	r2, [pc, #152]	@ (8003f30 <TIM_Base_SetConfig+0x130>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d108      	bne.n	8003eac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a10      	ldr	r2, [pc, #64]	@ (8003f14 <TIM_Base_SetConfig+0x114>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00f      	beq.n	8003ef8 <TIM_Base_SetConfig+0xf8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a12      	ldr	r2, [pc, #72]	@ (8003f24 <TIM_Base_SetConfig+0x124>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <TIM_Base_SetConfig+0xf8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a11      	ldr	r2, [pc, #68]	@ (8003f28 <TIM_Base_SetConfig+0x128>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <TIM_Base_SetConfig+0xf8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a10      	ldr	r2, [pc, #64]	@ (8003f2c <TIM_Base_SetConfig+0x12c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_Base_SetConfig+0xf8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8003f30 <TIM_Base_SetConfig+0x130>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d103      	bne.n	8003f00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	615a      	str	r2, [r3, #20]
}
 8003f06:	bf00      	nop
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40012c00 	.word	0x40012c00
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40000800 	.word	0x40000800
 8003f20:	40000c00 	.word	0x40000c00
 8003f24:	40013400 	.word	0x40013400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800

08003f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f023 0201 	bic.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f023 0302 	bic.w	r3, r3, #2
 8003f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004040 <TIM_OC1_SetConfig+0x10c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00f      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a2b      	ldr	r2, [pc, #172]	@ (8004044 <TIM_OC1_SetConfig+0x110>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004048 <TIM_OC1_SetConfig+0x114>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a29      	ldr	r2, [pc, #164]	@ (800404c <TIM_OC1_SetConfig+0x118>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_OC1_SetConfig+0x80>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a28      	ldr	r2, [pc, #160]	@ (8004050 <TIM_OC1_SetConfig+0x11c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10c      	bne.n	8003fce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0308 	bic.w	r3, r3, #8
 8003fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004040 <TIM_OC1_SetConfig+0x10c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00f      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8004044 <TIM_OC1_SetConfig+0x110>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00b      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	@ (8004048 <TIM_OC1_SetConfig+0x114>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a18      	ldr	r2, [pc, #96]	@ (800404c <TIM_OC1_SetConfig+0x118>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xc2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a17      	ldr	r2, [pc, #92]	@ (8004050 <TIM_OC1_SetConfig+0x11c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d111      	bne.n	800401a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40013400 	.word	0x40013400
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800

08004054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f023 0210 	bic.w	r2, r3, #16
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800408e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f023 0320 	bic.w	r3, r3, #32
 80040a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a28      	ldr	r2, [pc, #160]	@ (8004154 <TIM_OC2_SetConfig+0x100>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_OC2_SetConfig+0x6c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a27      	ldr	r2, [pc, #156]	@ (8004158 <TIM_OC2_SetConfig+0x104>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d10d      	bne.n	80040dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1d      	ldr	r2, [pc, #116]	@ (8004154 <TIM_OC2_SetConfig+0x100>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00f      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004158 <TIM_OC2_SetConfig+0x104>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a1b      	ldr	r2, [pc, #108]	@ (800415c <TIM_OC2_SetConfig+0x108>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004160 <TIM_OC2_SetConfig+0x10c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_OC2_SetConfig+0xb0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a19      	ldr	r2, [pc, #100]	@ (8004164 <TIM_OC2_SetConfig+0x110>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d113      	bne.n	800412c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800410a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40013400 	.word	0x40013400
 800415c:	40014000 	.word	0x40014000
 8004160:	40014400 	.word	0x40014400
 8004164:	40014800 	.word	0x40014800

08004168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a27      	ldr	r2, [pc, #156]	@ (8004264 <TIM_OC3_SetConfig+0xfc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC3_SetConfig+0x6a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a26      	ldr	r2, [pc, #152]	@ (8004268 <TIM_OC3_SetConfig+0x100>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10d      	bne.n	80041ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004264 <TIM_OC3_SetConfig+0xfc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00f      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004268 <TIM_OC3_SetConfig+0x100>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00b      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1a      	ldr	r2, [pc, #104]	@ (800426c <TIM_OC3_SetConfig+0x104>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d007      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a19      	ldr	r2, [pc, #100]	@ (8004270 <TIM_OC3_SetConfig+0x108>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d003      	beq.n	8004216 <TIM_OC3_SetConfig+0xae>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <TIM_OC3_SetConfig+0x10c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d113      	bne.n	800423e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800421c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	621a      	str	r2, [r3, #32]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40013400 	.word	0x40013400
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800

08004278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	031b      	lsls	r3, r3, #12
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a18      	ldr	r2, [pc, #96]	@ (8004338 <TIM_OC4_SetConfig+0xc0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00f      	beq.n	80042fc <TIM_OC4_SetConfig+0x84>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a17      	ldr	r2, [pc, #92]	@ (800433c <TIM_OC4_SetConfig+0xc4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00b      	beq.n	80042fc <TIM_OC4_SetConfig+0x84>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a16      	ldr	r2, [pc, #88]	@ (8004340 <TIM_OC4_SetConfig+0xc8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d007      	beq.n	80042fc <TIM_OC4_SetConfig+0x84>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a15      	ldr	r2, [pc, #84]	@ (8004344 <TIM_OC4_SetConfig+0xcc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_OC4_SetConfig+0x84>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a14      	ldr	r2, [pc, #80]	@ (8004348 <TIM_OC4_SetConfig+0xd0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d109      	bne.n	8004310 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	019b      	lsls	r3, r3, #6
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40012c00 	.word	0x40012c00
 800433c:	40013400 	.word	0x40013400
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800

0800434c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800437a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004390:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a17      	ldr	r2, [pc, #92]	@ (8004400 <TIM_OC5_SetConfig+0xb4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00f      	beq.n	80043c6 <TIM_OC5_SetConfig+0x7a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a16      	ldr	r2, [pc, #88]	@ (8004404 <TIM_OC5_SetConfig+0xb8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <TIM_OC5_SetConfig+0x7a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <TIM_OC5_SetConfig+0xbc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <TIM_OC5_SetConfig+0x7a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a14      	ldr	r2, [pc, #80]	@ (800440c <TIM_OC5_SetConfig+0xc0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_OC5_SetConfig+0x7a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a13      	ldr	r2, [pc, #76]	@ (8004410 <TIM_OC5_SetConfig+0xc4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d109      	bne.n	80043da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	621a      	str	r2, [r3, #32]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40012c00 	.word	0x40012c00
 8004404:	40013400 	.word	0x40013400
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400
 8004410:	40014800 	.word	0x40014800

08004414 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800445a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	051b      	lsls	r3, r3, #20
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a18      	ldr	r2, [pc, #96]	@ (80044cc <TIM_OC6_SetConfig+0xb8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00f      	beq.n	8004490 <TIM_OC6_SetConfig+0x7c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a17      	ldr	r2, [pc, #92]	@ (80044d0 <TIM_OC6_SetConfig+0xbc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00b      	beq.n	8004490 <TIM_OC6_SetConfig+0x7c>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a16      	ldr	r2, [pc, #88]	@ (80044d4 <TIM_OC6_SetConfig+0xc0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d007      	beq.n	8004490 <TIM_OC6_SetConfig+0x7c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a15      	ldr	r2, [pc, #84]	@ (80044d8 <TIM_OC6_SetConfig+0xc4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d003      	beq.n	8004490 <TIM_OC6_SetConfig+0x7c>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a14      	ldr	r2, [pc, #80]	@ (80044dc <TIM_OC6_SetConfig+0xc8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d109      	bne.n	80044a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004496:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	029b      	lsls	r3, r3, #10
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40013400 	.word	0x40013400
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40014400 	.word	0x40014400
 80044dc:	40014800 	.word	0x40014800

080044e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 0201 	bic.w	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800450a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 030a 	bic.w	r3, r3, #10
 800451c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800453e:	b480      	push	{r7}
 8004540:	b087      	sub	sp, #28
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f023 0210 	bic.w	r2, r3, #16
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	031b      	lsls	r3, r3, #12
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800457a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f043 0307 	orr.w	r3, r3, #7
 80045c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	021a      	lsls	r2, r3, #8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	609a      	str	r2, [r3, #8]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2201      	movs	r2, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1a      	ldr	r2, [r3, #32]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	43db      	mvns	r3, r3
 8004636:	401a      	ands	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1a      	ldr	r2, [r3, #32]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 031f 	and.w	r3, r3, #31
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	fa01 f303 	lsl.w	r3, r1, r3
 800464c:	431a      	orrs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004674:	2302      	movs	r3, #2
 8004676:	e068      	b.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2e      	ldr	r2, [pc, #184]	@ (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a2d      	ldr	r2, [pc, #180]	@ (800475c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d108      	bne.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01d      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ea:	d018      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004760 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004764 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a18      	ldr	r2, [pc, #96]	@ (8004768 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a13      	ldr	r2, [pc, #76]	@ (800475c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a14      	ldr	r2, [pc, #80]	@ (800476c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d10c      	bne.n	8004738 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	4313      	orrs	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40013400 	.word	0x40013400
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40014000 	.word	0x40014000

08004770 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e040      	b.n	8004840 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc fb22 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	@ 0x24
 80047d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fb6a 	bl	8004ecc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f8af 	bl	800495c <UART_SetConfig>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e01b      	b.n	8004840 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004826:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fbe9 	bl	8005010 <UART_CheckIdleState>
 800483e:	4603      	mov	r3, r0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	@ 0x28
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	4613      	mov	r3, r2
 8004856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800485c:	2b20      	cmp	r3, #32
 800485e:	d177      	bne.n	8004950 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_UART_Transmit+0x24>
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e070      	b.n	8004952 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2221      	movs	r2, #33	@ 0x21
 800487c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800487e:	f7fc fcb3 	bl	80011e8 <HAL_GetTick>
 8004882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	88fa      	ldrh	r2, [r7, #6]
 8004888:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	88fa      	ldrh	r2, [r7, #6]
 8004890:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800489c:	d108      	bne.n	80048b0 <HAL_UART_Transmit+0x68>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e003      	b.n	80048b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048b8:	e02f      	b.n	800491a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2180      	movs	r1, #128	@ 0x80
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fc4b 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e03b      	b.n	8004952 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	881a      	ldrh	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ec:	b292      	uxth	r2, r2
 80048ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	3302      	adds	r3, #2
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	e007      	b.n	8004908 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3301      	adds	r3, #1
 8004906:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1c9      	bne.n	80048ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2200      	movs	r2, #0
 800492e:	2140      	movs	r1, #64	@ 0x40
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 fc15 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d004      	beq.n	8004946 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e005      	b.n	8004952 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800495c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004960:	b08a      	sub	sp, #40	@ 0x28
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	431a      	orrs	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	431a      	orrs	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4313      	orrs	r3, r2
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4ba4      	ldr	r3, [pc, #656]	@ (8004c1c <UART_SetConfig+0x2c0>)
 800498c:	4013      	ands	r3, r2
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004994:	430b      	orrs	r3, r1
 8004996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a99      	ldr	r2, [pc, #612]	@ (8004c20 <UART_SetConfig+0x2c4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c4:	4313      	orrs	r3, r2
 80049c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a90      	ldr	r2, [pc, #576]	@ (8004c24 <UART_SetConfig+0x2c8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d126      	bne.n	8004a34 <UART_SetConfig+0xd8>
 80049e6:	4b90      	ldr	r3, [pc, #576]	@ (8004c28 <UART_SetConfig+0x2cc>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d81b      	bhi.n	8004a2c <UART_SetConfig+0xd0>
 80049f4:	a201      	add	r2, pc, #4	@ (adr r2, 80049fc <UART_SetConfig+0xa0>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a1d 	.word	0x08004a1d
 8004a04:	08004a15 	.word	0x08004a15
 8004a08:	08004a25 	.word	0x08004a25
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a12:	e116      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a14:	2302      	movs	r3, #2
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1a:	e112      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a22:	e10e      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a24:	2308      	movs	r3, #8
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2a:	e10a      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a32:	e106      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a7c      	ldr	r2, [pc, #496]	@ (8004c2c <UART_SetConfig+0x2d0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d138      	bne.n	8004ab0 <UART_SetConfig+0x154>
 8004a3e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c28 <UART_SetConfig+0x2cc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	d82d      	bhi.n	8004aa8 <UART_SetConfig+0x14c>
 8004a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a54 <UART_SetConfig+0xf8>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a89 	.word	0x08004a89
 8004a58:	08004aa9 	.word	0x08004aa9
 8004a5c:	08004aa9 	.word	0x08004aa9
 8004a60:	08004aa9 	.word	0x08004aa9
 8004a64:	08004a99 	.word	0x08004a99
 8004a68:	08004aa9 	.word	0x08004aa9
 8004a6c:	08004aa9 	.word	0x08004aa9
 8004a70:	08004aa9 	.word	0x08004aa9
 8004a74:	08004a91 	.word	0x08004a91
 8004a78:	08004aa9 	.word	0x08004aa9
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004aa9 	.word	0x08004aa9
 8004a84:	08004aa1 	.word	0x08004aa1
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8e:	e0d8      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a90:	2302      	movs	r3, #2
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a96:	e0d4      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9e:	e0d0      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aa6:	e0cc      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aae:	e0c8      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a5e      	ldr	r2, [pc, #376]	@ (8004c30 <UART_SetConfig+0x2d4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d125      	bne.n	8004b06 <UART_SetConfig+0x1aa>
 8004aba:	4b5b      	ldr	r3, [pc, #364]	@ (8004c28 <UART_SetConfig+0x2cc>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ac4:	2b30      	cmp	r3, #48	@ 0x30
 8004ac6:	d016      	beq.n	8004af6 <UART_SetConfig+0x19a>
 8004ac8:	2b30      	cmp	r3, #48	@ 0x30
 8004aca:	d818      	bhi.n	8004afe <UART_SetConfig+0x1a2>
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d00a      	beq.n	8004ae6 <UART_SetConfig+0x18a>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d814      	bhi.n	8004afe <UART_SetConfig+0x1a2>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <UART_SetConfig+0x182>
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d008      	beq.n	8004aee <UART_SetConfig+0x192>
 8004adc:	e00f      	b.n	8004afe <UART_SetConfig+0x1a2>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae4:	e0ad      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aec:	e0a9      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004aee:	2304      	movs	r3, #4
 8004af0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af4:	e0a5      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004af6:	2308      	movs	r3, #8
 8004af8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afc:	e0a1      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004afe:	2310      	movs	r3, #16
 8004b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b04:	e09d      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c34 <UART_SetConfig+0x2d8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d125      	bne.n	8004b5c <UART_SetConfig+0x200>
 8004b10:	4b45      	ldr	r3, [pc, #276]	@ (8004c28 <UART_SetConfig+0x2cc>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b1c:	d016      	beq.n	8004b4c <UART_SetConfig+0x1f0>
 8004b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b20:	d818      	bhi.n	8004b54 <UART_SetConfig+0x1f8>
 8004b22:	2b80      	cmp	r3, #128	@ 0x80
 8004b24:	d00a      	beq.n	8004b3c <UART_SetConfig+0x1e0>
 8004b26:	2b80      	cmp	r3, #128	@ 0x80
 8004b28:	d814      	bhi.n	8004b54 <UART_SetConfig+0x1f8>
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <UART_SetConfig+0x1d8>
 8004b2e:	2b40      	cmp	r3, #64	@ 0x40
 8004b30:	d008      	beq.n	8004b44 <UART_SetConfig+0x1e8>
 8004b32:	e00f      	b.n	8004b54 <UART_SetConfig+0x1f8>
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3a:	e082      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b42:	e07e      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b4a:	e07a      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b52:	e076      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5a:	e072      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a35      	ldr	r2, [pc, #212]	@ (8004c38 <UART_SetConfig+0x2dc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d12a      	bne.n	8004bbc <UART_SetConfig+0x260>
 8004b66:	4b30      	ldr	r3, [pc, #192]	@ (8004c28 <UART_SetConfig+0x2cc>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b74:	d01a      	beq.n	8004bac <UART_SetConfig+0x250>
 8004b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b7a:	d81b      	bhi.n	8004bb4 <UART_SetConfig+0x258>
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b80:	d00c      	beq.n	8004b9c <UART_SetConfig+0x240>
 8004b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b86:	d815      	bhi.n	8004bb4 <UART_SetConfig+0x258>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <UART_SetConfig+0x238>
 8004b8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b90:	d008      	beq.n	8004ba4 <UART_SetConfig+0x248>
 8004b92:	e00f      	b.n	8004bb4 <UART_SetConfig+0x258>
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9a:	e052      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba2:	e04e      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004baa:	e04a      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004bac:	2308      	movs	r3, #8
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb2:	e046      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bba:	e042      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a17      	ldr	r2, [pc, #92]	@ (8004c20 <UART_SetConfig+0x2c4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d13a      	bne.n	8004c3c <UART_SetConfig+0x2e0>
 8004bc6:	4b18      	ldr	r3, [pc, #96]	@ (8004c28 <UART_SetConfig+0x2cc>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bcc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004bd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bd4:	d01a      	beq.n	8004c0c <UART_SetConfig+0x2b0>
 8004bd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bda:	d81b      	bhi.n	8004c14 <UART_SetConfig+0x2b8>
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be0:	d00c      	beq.n	8004bfc <UART_SetConfig+0x2a0>
 8004be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be6:	d815      	bhi.n	8004c14 <UART_SetConfig+0x2b8>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <UART_SetConfig+0x298>
 8004bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf0:	d008      	beq.n	8004c04 <UART_SetConfig+0x2a8>
 8004bf2:	e00f      	b.n	8004c14 <UART_SetConfig+0x2b8>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bfa:	e022      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c02:	e01e      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004c04:	2304      	movs	r3, #4
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0a:	e01a      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c12:	e016      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004c14:	2310      	movs	r3, #16
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1a:	e012      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004c1c:	efff69f3 	.word	0xefff69f3
 8004c20:	40008000 	.word	0x40008000
 8004c24:	40013800 	.word	0x40013800
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40004400 	.word	0x40004400
 8004c30:	40004800 	.word	0x40004800
 8004c34:	40004c00 	.word	0x40004c00
 8004c38:	40005000 	.word	0x40005000
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a9f      	ldr	r2, [pc, #636]	@ (8004ec4 <UART_SetConfig+0x568>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d17a      	bne.n	8004d42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d824      	bhi.n	8004c9e <UART_SetConfig+0x342>
 8004c54:	a201      	add	r2, pc, #4	@ (adr r2, 8004c5c <UART_SetConfig+0x300>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c9f 	.word	0x08004c9f
 8004c64:	08004c89 	.word	0x08004c89
 8004c68:	08004c9f 	.word	0x08004c9f
 8004c6c:	08004c8f 	.word	0x08004c8f
 8004c70:	08004c9f 	.word	0x08004c9f
 8004c74:	08004c9f 	.word	0x08004c9f
 8004c78:	08004c9f 	.word	0x08004c9f
 8004c7c:	08004c97 	.word	0x08004c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c80:	f7fd fb94 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8004c84:	61f8      	str	r0, [r7, #28]
        break;
 8004c86:	e010      	b.n	8004caa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c88:	4b8f      	ldr	r3, [pc, #572]	@ (8004ec8 <UART_SetConfig+0x56c>)
 8004c8a:	61fb      	str	r3, [r7, #28]
        break;
 8004c8c:	e00d      	b.n	8004caa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c8e:	f7fd faf5 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8004c92:	61f8      	str	r0, [r7, #28]
        break;
 8004c94:	e009      	b.n	8004caa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c9a:	61fb      	str	r3, [r7, #28]
        break;
 8004c9c:	e005      	b.n	8004caa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ca8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80fb 	beq.w	8004ea8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4413      	add	r3, r2
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d305      	bcc.n	8004cce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d903      	bls.n	8004cd6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cd4:	e0e8      	b.n	8004ea8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	461c      	mov	r4, r3
 8004cdc:	4615      	mov	r5, r2
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	022b      	lsls	r3, r5, #8
 8004ce8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004cec:	0222      	lsls	r2, r4, #8
 8004cee:	68f9      	ldr	r1, [r7, #12]
 8004cf0:	6849      	ldr	r1, [r1, #4]
 8004cf2:	0849      	lsrs	r1, r1, #1
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	4688      	mov	r8, r1
 8004cf8:	4681      	mov	r9, r0
 8004cfa:	eb12 0a08 	adds.w	sl, r2, r8
 8004cfe:	eb43 0b09 	adc.w	fp, r3, r9
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	603b      	str	r3, [r7, #0]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d10:	4650      	mov	r0, sl
 8004d12:	4659      	mov	r1, fp
 8004d14:	f7fb faac 	bl	8000270 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d26:	d308      	bcc.n	8004d3a <UART_SetConfig+0x3de>
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d2e:	d204      	bcs.n	8004d3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	60da      	str	r2, [r3, #12]
 8004d38:	e0b6      	b.n	8004ea8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d40:	e0b2      	b.n	8004ea8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d4a:	d15e      	bne.n	8004e0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d828      	bhi.n	8004da6 <UART_SetConfig+0x44a>
 8004d54:	a201      	add	r2, pc, #4	@ (adr r2, 8004d5c <UART_SetConfig+0x400>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d81 	.word	0x08004d81
 8004d60:	08004d89 	.word	0x08004d89
 8004d64:	08004d91 	.word	0x08004d91
 8004d68:	08004da7 	.word	0x08004da7
 8004d6c:	08004d97 	.word	0x08004d97
 8004d70:	08004da7 	.word	0x08004da7
 8004d74:	08004da7 	.word	0x08004da7
 8004d78:	08004da7 	.word	0x08004da7
 8004d7c:	08004d9f 	.word	0x08004d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d80:	f7fd fb14 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8004d84:	61f8      	str	r0, [r7, #28]
        break;
 8004d86:	e014      	b.n	8004db2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7fd fb26 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8004d8c:	61f8      	str	r0, [r7, #28]
        break;
 8004d8e:	e010      	b.n	8004db2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d90:	4b4d      	ldr	r3, [pc, #308]	@ (8004ec8 <UART_SetConfig+0x56c>)
 8004d92:	61fb      	str	r3, [r7, #28]
        break;
 8004d94:	e00d      	b.n	8004db2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d96:	f7fd fa71 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8004d9a:	61f8      	str	r0, [r7, #28]
        break;
 8004d9c:	e009      	b.n	8004db2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004da2:	61fb      	str	r3, [r7, #28]
        break;
 8004da4:	e005      	b.n	8004db2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004db0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d077      	beq.n	8004ea8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	005a      	lsls	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	441a      	add	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b0f      	cmp	r3, #15
 8004dd2:	d916      	bls.n	8004e02 <UART_SetConfig+0x4a6>
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dda:	d212      	bcs.n	8004e02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f023 030f 	bic.w	r3, r3, #15
 8004de4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	8afb      	ldrh	r3, [r7, #22]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	8afa      	ldrh	r2, [r7, #22]
 8004dfe:	60da      	str	r2, [r3, #12]
 8004e00:	e052      	b.n	8004ea8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e08:	e04e      	b.n	8004ea8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d827      	bhi.n	8004e62 <UART_SetConfig+0x506>
 8004e12:	a201      	add	r2, pc, #4	@ (adr r2, 8004e18 <UART_SetConfig+0x4bc>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e3d 	.word	0x08004e3d
 8004e1c:	08004e45 	.word	0x08004e45
 8004e20:	08004e4d 	.word	0x08004e4d
 8004e24:	08004e63 	.word	0x08004e63
 8004e28:	08004e53 	.word	0x08004e53
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e63 	.word	0x08004e63
 8004e34:	08004e63 	.word	0x08004e63
 8004e38:	08004e5b 	.word	0x08004e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e3c:	f7fd fab6 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8004e40:	61f8      	str	r0, [r7, #28]
        break;
 8004e42:	e014      	b.n	8004e6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fd fac8 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8004e48:	61f8      	str	r0, [r7, #28]
        break;
 8004e4a:	e010      	b.n	8004e6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <UART_SetConfig+0x56c>)
 8004e4e:	61fb      	str	r3, [r7, #28]
        break;
 8004e50:	e00d      	b.n	8004e6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e52:	f7fd fa13 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8004e56:	61f8      	str	r0, [r7, #28]
        break;
 8004e58:	e009      	b.n	8004e6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e5e:	61fb      	str	r3, [r7, #28]
        break;
 8004e60:	e005      	b.n	8004e6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e6c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d019      	beq.n	8004ea8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	085a      	lsrs	r2, r3, #1
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	441a      	add	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b0f      	cmp	r3, #15
 8004e8c:	d909      	bls.n	8004ea2 <UART_SetConfig+0x546>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e94:	d205      	bcs.n	8004ea2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60da      	str	r2, [r3, #12]
 8004ea0:	e002      	b.n	8004ea8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004eb4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3728      	adds	r7, #40	@ 0x28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40008000 	.word	0x40008000
 8004ec8:	00f42400 	.word	0x00f42400

08004ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01a      	beq.n	8004fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fca:	d10a      	bne.n	8004fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  }
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b098      	sub	sp, #96	@ 0x60
 8005014:	af02      	add	r7, sp, #8
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005020:	f7fc f8e2 	bl	80011e8 <HAL_GetTick>
 8005024:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b08      	cmp	r3, #8
 8005032:	d12e      	bne.n	8005092 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005034:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503c:	2200      	movs	r2, #0
 800503e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f88c 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d021      	beq.n	8005092 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800505c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005062:	653b      	str	r3, [r7, #80]	@ 0x50
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800506c:	647b      	str	r3, [r7, #68]	@ 0x44
 800506e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005072:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800507a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e6      	bne.n	800504e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e062      	b.n	8005158 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b04      	cmp	r3, #4
 800509e:	d149      	bne.n	8005134 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a8:	2200      	movs	r2, #0
 80050aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f856 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d03c      	beq.n	8005134 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	623b      	str	r3, [r7, #32]
   return(result);
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e6      	bne.n	80050ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3308      	adds	r3, #8
 800510a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800510c:	61fa      	str	r2, [r7, #28]
 800510e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	69b9      	ldr	r1, [r7, #24]
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	617b      	str	r3, [r7, #20]
   return(result);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e5      	bne.n	80050ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e011      	b.n	8005158 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3758      	adds	r7, #88	@ 0x58
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005170:	e049      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005178:	d045      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517a:	f7fc f835 	bl	80011e8 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	429a      	cmp	r2, r3
 8005188:	d302      	bcc.n	8005190 <UART_WaitOnFlagUntilTimeout+0x30>
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e048      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d031      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d110      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2208      	movs	r2, #8
 80051b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f838 	bl	800522e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2208      	movs	r2, #8
 80051c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e029      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051e0:	d111      	bne.n	8005206 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f81e 	bl	800522e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e00f      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4013      	ands	r3, r2
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	bf0c      	ite	eq
 8005216:	2301      	moveq	r3, #1
 8005218:	2300      	movne	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	429a      	cmp	r2, r3
 8005222:	d0a6      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800522e:	b480      	push	{r7}
 8005230:	b095      	sub	sp, #84	@ 0x54
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005246:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800524a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005254:	643b      	str	r3, [r7, #64]	@ 0x40
 8005256:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800525a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e6      	bne.n	8005236 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3308      	adds	r3, #8
 800526e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	61fb      	str	r3, [r7, #28]
   return(result);
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3308      	adds	r3, #8
 8005286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005288:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800528a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800528e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e5      	bne.n	8005268 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d118      	bne.n	80052d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f023 0310 	bic.w	r3, r3, #16
 80052b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	6979      	ldr	r1, [r7, #20]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	613b      	str	r3, [r7, #16]
   return(result);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e6      	bne.n	80052a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052ea:	bf00      	nop
 80052ec:	3754      	adds	r7, #84	@ 0x54
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <std>:
 80052f8:	2300      	movs	r3, #0
 80052fa:	b510      	push	{r4, lr}
 80052fc:	4604      	mov	r4, r0
 80052fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005306:	6083      	str	r3, [r0, #8]
 8005308:	8181      	strh	r1, [r0, #12]
 800530a:	6643      	str	r3, [r0, #100]	@ 0x64
 800530c:	81c2      	strh	r2, [r0, #14]
 800530e:	6183      	str	r3, [r0, #24]
 8005310:	4619      	mov	r1, r3
 8005312:	2208      	movs	r2, #8
 8005314:	305c      	adds	r0, #92	@ 0x5c
 8005316:	f000 f906 	bl	8005526 <memset>
 800531a:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <std+0x58>)
 800531c:	6263      	str	r3, [r4, #36]	@ 0x24
 800531e:	4b0d      	ldr	r3, [pc, #52]	@ (8005354 <std+0x5c>)
 8005320:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005322:	4b0d      	ldr	r3, [pc, #52]	@ (8005358 <std+0x60>)
 8005324:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005326:	4b0d      	ldr	r3, [pc, #52]	@ (800535c <std+0x64>)
 8005328:	6323      	str	r3, [r4, #48]	@ 0x30
 800532a:	4b0d      	ldr	r3, [pc, #52]	@ (8005360 <std+0x68>)
 800532c:	6224      	str	r4, [r4, #32]
 800532e:	429c      	cmp	r4, r3
 8005330:	d006      	beq.n	8005340 <std+0x48>
 8005332:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005336:	4294      	cmp	r4, r2
 8005338:	d002      	beq.n	8005340 <std+0x48>
 800533a:	33d0      	adds	r3, #208	@ 0xd0
 800533c:	429c      	cmp	r4, r3
 800533e:	d105      	bne.n	800534c <std+0x54>
 8005340:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005348:	f000 b966 	b.w	8005618 <__retarget_lock_init_recursive>
 800534c:	bd10      	pop	{r4, pc}
 800534e:	bf00      	nop
 8005350:	080054a1 	.word	0x080054a1
 8005354:	080054c3 	.word	0x080054c3
 8005358:	080054fb 	.word	0x080054fb
 800535c:	0800551f 	.word	0x0800551f
 8005360:	20000244 	.word	0x20000244

08005364 <stdio_exit_handler>:
 8005364:	4a02      	ldr	r2, [pc, #8]	@ (8005370 <stdio_exit_handler+0xc>)
 8005366:	4903      	ldr	r1, [pc, #12]	@ (8005374 <stdio_exit_handler+0x10>)
 8005368:	4803      	ldr	r0, [pc, #12]	@ (8005378 <stdio_exit_handler+0x14>)
 800536a:	f000 b869 	b.w	8005440 <_fwalk_sglue>
 800536e:	bf00      	nop
 8005370:	2000000c 	.word	0x2000000c
 8005374:	08005eb9 	.word	0x08005eb9
 8005378:	2000001c 	.word	0x2000001c

0800537c <cleanup_stdio>:
 800537c:	6841      	ldr	r1, [r0, #4]
 800537e:	4b0c      	ldr	r3, [pc, #48]	@ (80053b0 <cleanup_stdio+0x34>)
 8005380:	4299      	cmp	r1, r3
 8005382:	b510      	push	{r4, lr}
 8005384:	4604      	mov	r4, r0
 8005386:	d001      	beq.n	800538c <cleanup_stdio+0x10>
 8005388:	f000 fd96 	bl	8005eb8 <_fflush_r>
 800538c:	68a1      	ldr	r1, [r4, #8]
 800538e:	4b09      	ldr	r3, [pc, #36]	@ (80053b4 <cleanup_stdio+0x38>)
 8005390:	4299      	cmp	r1, r3
 8005392:	d002      	beq.n	800539a <cleanup_stdio+0x1e>
 8005394:	4620      	mov	r0, r4
 8005396:	f000 fd8f 	bl	8005eb8 <_fflush_r>
 800539a:	68e1      	ldr	r1, [r4, #12]
 800539c:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <cleanup_stdio+0x3c>)
 800539e:	4299      	cmp	r1, r3
 80053a0:	d004      	beq.n	80053ac <cleanup_stdio+0x30>
 80053a2:	4620      	mov	r0, r4
 80053a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a8:	f000 bd86 	b.w	8005eb8 <_fflush_r>
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	bf00      	nop
 80053b0:	20000244 	.word	0x20000244
 80053b4:	200002ac 	.word	0x200002ac
 80053b8:	20000314 	.word	0x20000314

080053bc <global_stdio_init.part.0>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	4b0b      	ldr	r3, [pc, #44]	@ (80053ec <global_stdio_init.part.0+0x30>)
 80053c0:	4c0b      	ldr	r4, [pc, #44]	@ (80053f0 <global_stdio_init.part.0+0x34>)
 80053c2:	4a0c      	ldr	r2, [pc, #48]	@ (80053f4 <global_stdio_init.part.0+0x38>)
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	4620      	mov	r0, r4
 80053c8:	2200      	movs	r2, #0
 80053ca:	2104      	movs	r1, #4
 80053cc:	f7ff ff94 	bl	80052f8 <std>
 80053d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053d4:	2201      	movs	r2, #1
 80053d6:	2109      	movs	r1, #9
 80053d8:	f7ff ff8e 	bl	80052f8 <std>
 80053dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053e0:	2202      	movs	r2, #2
 80053e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e6:	2112      	movs	r1, #18
 80053e8:	f7ff bf86 	b.w	80052f8 <std>
 80053ec:	2000037c 	.word	0x2000037c
 80053f0:	20000244 	.word	0x20000244
 80053f4:	08005365 	.word	0x08005365

080053f8 <__sfp_lock_acquire>:
 80053f8:	4801      	ldr	r0, [pc, #4]	@ (8005400 <__sfp_lock_acquire+0x8>)
 80053fa:	f000 b90e 	b.w	800561a <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	20000385 	.word	0x20000385

08005404 <__sfp_lock_release>:
 8005404:	4801      	ldr	r0, [pc, #4]	@ (800540c <__sfp_lock_release+0x8>)
 8005406:	f000 b909 	b.w	800561c <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	20000385 	.word	0x20000385

08005410 <__sinit>:
 8005410:	b510      	push	{r4, lr}
 8005412:	4604      	mov	r4, r0
 8005414:	f7ff fff0 	bl	80053f8 <__sfp_lock_acquire>
 8005418:	6a23      	ldr	r3, [r4, #32]
 800541a:	b11b      	cbz	r3, 8005424 <__sinit+0x14>
 800541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005420:	f7ff bff0 	b.w	8005404 <__sfp_lock_release>
 8005424:	4b04      	ldr	r3, [pc, #16]	@ (8005438 <__sinit+0x28>)
 8005426:	6223      	str	r3, [r4, #32]
 8005428:	4b04      	ldr	r3, [pc, #16]	@ (800543c <__sinit+0x2c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f5      	bne.n	800541c <__sinit+0xc>
 8005430:	f7ff ffc4 	bl	80053bc <global_stdio_init.part.0>
 8005434:	e7f2      	b.n	800541c <__sinit+0xc>
 8005436:	bf00      	nop
 8005438:	0800537d 	.word	0x0800537d
 800543c:	2000037c 	.word	0x2000037c

08005440 <_fwalk_sglue>:
 8005440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005444:	4607      	mov	r7, r0
 8005446:	4688      	mov	r8, r1
 8005448:	4614      	mov	r4, r2
 800544a:	2600      	movs	r6, #0
 800544c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005450:	f1b9 0901 	subs.w	r9, r9, #1
 8005454:	d505      	bpl.n	8005462 <_fwalk_sglue+0x22>
 8005456:	6824      	ldr	r4, [r4, #0]
 8005458:	2c00      	cmp	r4, #0
 800545a:	d1f7      	bne.n	800544c <_fwalk_sglue+0xc>
 800545c:	4630      	mov	r0, r6
 800545e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005462:	89ab      	ldrh	r3, [r5, #12]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d907      	bls.n	8005478 <_fwalk_sglue+0x38>
 8005468:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800546c:	3301      	adds	r3, #1
 800546e:	d003      	beq.n	8005478 <_fwalk_sglue+0x38>
 8005470:	4629      	mov	r1, r5
 8005472:	4638      	mov	r0, r7
 8005474:	47c0      	blx	r8
 8005476:	4306      	orrs	r6, r0
 8005478:	3568      	adds	r5, #104	@ 0x68
 800547a:	e7e9      	b.n	8005450 <_fwalk_sglue+0x10>

0800547c <iprintf>:
 800547c:	b40f      	push	{r0, r1, r2, r3}
 800547e:	b507      	push	{r0, r1, r2, lr}
 8005480:	4906      	ldr	r1, [pc, #24]	@ (800549c <iprintf+0x20>)
 8005482:	ab04      	add	r3, sp, #16
 8005484:	6808      	ldr	r0, [r1, #0]
 8005486:	f853 2b04 	ldr.w	r2, [r3], #4
 800548a:	6881      	ldr	r1, [r0, #8]
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	f000 f9e9 	bl	8005864 <_vfiprintf_r>
 8005492:	b003      	add	sp, #12
 8005494:	f85d eb04 	ldr.w	lr, [sp], #4
 8005498:	b004      	add	sp, #16
 800549a:	4770      	bx	lr
 800549c:	20000018 	.word	0x20000018

080054a0 <__sread>:
 80054a0:	b510      	push	{r4, lr}
 80054a2:	460c      	mov	r4, r1
 80054a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a8:	f000 f868 	bl	800557c <_read_r>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	bfab      	itete	ge
 80054b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054b2:	89a3      	ldrhlt	r3, [r4, #12]
 80054b4:	181b      	addge	r3, r3, r0
 80054b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054ba:	bfac      	ite	ge
 80054bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054be:	81a3      	strhlt	r3, [r4, #12]
 80054c0:	bd10      	pop	{r4, pc}

080054c2 <__swrite>:
 80054c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c6:	461f      	mov	r7, r3
 80054c8:	898b      	ldrh	r3, [r1, #12]
 80054ca:	05db      	lsls	r3, r3, #23
 80054cc:	4605      	mov	r5, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	4616      	mov	r6, r2
 80054d2:	d505      	bpl.n	80054e0 <__swrite+0x1e>
 80054d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d8:	2302      	movs	r3, #2
 80054da:	2200      	movs	r2, #0
 80054dc:	f000 f83c 	bl	8005558 <_lseek_r>
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054ea:	81a3      	strh	r3, [r4, #12]
 80054ec:	4632      	mov	r2, r6
 80054ee:	463b      	mov	r3, r7
 80054f0:	4628      	mov	r0, r5
 80054f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054f6:	f000 b853 	b.w	80055a0 <_write_r>

080054fa <__sseek>:
 80054fa:	b510      	push	{r4, lr}
 80054fc:	460c      	mov	r4, r1
 80054fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005502:	f000 f829 	bl	8005558 <_lseek_r>
 8005506:	1c43      	adds	r3, r0, #1
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	bf15      	itete	ne
 800550c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800550e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005512:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005516:	81a3      	strheq	r3, [r4, #12]
 8005518:	bf18      	it	ne
 800551a:	81a3      	strhne	r3, [r4, #12]
 800551c:	bd10      	pop	{r4, pc}

0800551e <__sclose>:
 800551e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005522:	f000 b809 	b.w	8005538 <_close_r>

08005526 <memset>:
 8005526:	4402      	add	r2, r0
 8005528:	4603      	mov	r3, r0
 800552a:	4293      	cmp	r3, r2
 800552c:	d100      	bne.n	8005530 <memset+0xa>
 800552e:	4770      	bx	lr
 8005530:	f803 1b01 	strb.w	r1, [r3], #1
 8005534:	e7f9      	b.n	800552a <memset+0x4>
	...

08005538 <_close_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d06      	ldr	r5, [pc, #24]	@ (8005554 <_close_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fb fd41 	bl	8000fca <_close>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_close_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_close_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20000380 	.word	0x20000380

08005558 <_lseek_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d07      	ldr	r5, [pc, #28]	@ (8005578 <_lseek_r+0x20>)
 800555c:	4604      	mov	r4, r0
 800555e:	4608      	mov	r0, r1
 8005560:	4611      	mov	r1, r2
 8005562:	2200      	movs	r2, #0
 8005564:	602a      	str	r2, [r5, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f7fb fd56 	bl	8001018 <_lseek>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_lseek_r+0x1e>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_lseek_r+0x1e>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	20000380 	.word	0x20000380

0800557c <_read_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d07      	ldr	r5, [pc, #28]	@ (800559c <_read_r+0x20>)
 8005580:	4604      	mov	r4, r0
 8005582:	4608      	mov	r0, r1
 8005584:	4611      	mov	r1, r2
 8005586:	2200      	movs	r2, #0
 8005588:	602a      	str	r2, [r5, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	f7fb fce4 	bl	8000f58 <_read>
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	d102      	bne.n	800559a <_read_r+0x1e>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	b103      	cbz	r3, 800559a <_read_r+0x1e>
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	20000380 	.word	0x20000380

080055a0 <_write_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d07      	ldr	r5, [pc, #28]	@ (80055c0 <_write_r+0x20>)
 80055a4:	4604      	mov	r4, r0
 80055a6:	4608      	mov	r0, r1
 80055a8:	4611      	mov	r1, r2
 80055aa:	2200      	movs	r2, #0
 80055ac:	602a      	str	r2, [r5, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f7fb fcef 	bl	8000f92 <_write>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d102      	bne.n	80055be <_write_r+0x1e>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	b103      	cbz	r3, 80055be <_write_r+0x1e>
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	20000380 	.word	0x20000380

080055c4 <__errno>:
 80055c4:	4b01      	ldr	r3, [pc, #4]	@ (80055cc <__errno+0x8>)
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	20000018 	.word	0x20000018

080055d0 <__libc_init_array>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005608 <__libc_init_array+0x38>)
 80055d4:	4c0d      	ldr	r4, [pc, #52]	@ (800560c <__libc_init_array+0x3c>)
 80055d6:	1b64      	subs	r4, r4, r5
 80055d8:	10a4      	asrs	r4, r4, #2
 80055da:	2600      	movs	r6, #0
 80055dc:	42a6      	cmp	r6, r4
 80055de:	d109      	bne.n	80055f4 <__libc_init_array+0x24>
 80055e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005610 <__libc_init_array+0x40>)
 80055e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005614 <__libc_init_array+0x44>)
 80055e4:	f000 fdb8 	bl	8006158 <_init>
 80055e8:	1b64      	subs	r4, r4, r5
 80055ea:	10a4      	asrs	r4, r4, #2
 80055ec:	2600      	movs	r6, #0
 80055ee:	42a6      	cmp	r6, r4
 80055f0:	d105      	bne.n	80055fe <__libc_init_array+0x2e>
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f8:	4798      	blx	r3
 80055fa:	3601      	adds	r6, #1
 80055fc:	e7ee      	b.n	80055dc <__libc_init_array+0xc>
 80055fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005602:	4798      	blx	r3
 8005604:	3601      	adds	r6, #1
 8005606:	e7f2      	b.n	80055ee <__libc_init_array+0x1e>
 8005608:	08006204 	.word	0x08006204
 800560c:	08006204 	.word	0x08006204
 8005610:	08006204 	.word	0x08006204
 8005614:	08006208 	.word	0x08006208

08005618 <__retarget_lock_init_recursive>:
 8005618:	4770      	bx	lr

0800561a <__retarget_lock_acquire_recursive>:
 800561a:	4770      	bx	lr

0800561c <__retarget_lock_release_recursive>:
 800561c:	4770      	bx	lr
	...

08005620 <_free_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4605      	mov	r5, r0
 8005624:	2900      	cmp	r1, #0
 8005626:	d041      	beq.n	80056ac <_free_r+0x8c>
 8005628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562c:	1f0c      	subs	r4, r1, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	bfb8      	it	lt
 8005632:	18e4      	addlt	r4, r4, r3
 8005634:	f000 f8e0 	bl	80057f8 <__malloc_lock>
 8005638:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <_free_r+0x90>)
 800563a:	6813      	ldr	r3, [r2, #0]
 800563c:	b933      	cbnz	r3, 800564c <_free_r+0x2c>
 800563e:	6063      	str	r3, [r4, #4]
 8005640:	6014      	str	r4, [r2, #0]
 8005642:	4628      	mov	r0, r5
 8005644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005648:	f000 b8dc 	b.w	8005804 <__malloc_unlock>
 800564c:	42a3      	cmp	r3, r4
 800564e:	d908      	bls.n	8005662 <_free_r+0x42>
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	1821      	adds	r1, r4, r0
 8005654:	428b      	cmp	r3, r1
 8005656:	bf01      	itttt	eq
 8005658:	6819      	ldreq	r1, [r3, #0]
 800565a:	685b      	ldreq	r3, [r3, #4]
 800565c:	1809      	addeq	r1, r1, r0
 800565e:	6021      	streq	r1, [r4, #0]
 8005660:	e7ed      	b.n	800563e <_free_r+0x1e>
 8005662:	461a      	mov	r2, r3
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	b10b      	cbz	r3, 800566c <_free_r+0x4c>
 8005668:	42a3      	cmp	r3, r4
 800566a:	d9fa      	bls.n	8005662 <_free_r+0x42>
 800566c:	6811      	ldr	r1, [r2, #0]
 800566e:	1850      	adds	r0, r2, r1
 8005670:	42a0      	cmp	r0, r4
 8005672:	d10b      	bne.n	800568c <_free_r+0x6c>
 8005674:	6820      	ldr	r0, [r4, #0]
 8005676:	4401      	add	r1, r0
 8005678:	1850      	adds	r0, r2, r1
 800567a:	4283      	cmp	r3, r0
 800567c:	6011      	str	r1, [r2, #0]
 800567e:	d1e0      	bne.n	8005642 <_free_r+0x22>
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	6053      	str	r3, [r2, #4]
 8005686:	4408      	add	r0, r1
 8005688:	6010      	str	r0, [r2, #0]
 800568a:	e7da      	b.n	8005642 <_free_r+0x22>
 800568c:	d902      	bls.n	8005694 <_free_r+0x74>
 800568e:	230c      	movs	r3, #12
 8005690:	602b      	str	r3, [r5, #0]
 8005692:	e7d6      	b.n	8005642 <_free_r+0x22>
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	1821      	adds	r1, r4, r0
 8005698:	428b      	cmp	r3, r1
 800569a:	bf04      	itt	eq
 800569c:	6819      	ldreq	r1, [r3, #0]
 800569e:	685b      	ldreq	r3, [r3, #4]
 80056a0:	6063      	str	r3, [r4, #4]
 80056a2:	bf04      	itt	eq
 80056a4:	1809      	addeq	r1, r1, r0
 80056a6:	6021      	streq	r1, [r4, #0]
 80056a8:	6054      	str	r4, [r2, #4]
 80056aa:	e7ca      	b.n	8005642 <_free_r+0x22>
 80056ac:	bd38      	pop	{r3, r4, r5, pc}
 80056ae:	bf00      	nop
 80056b0:	2000038c 	.word	0x2000038c

080056b4 <sbrk_aligned>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	4e0f      	ldr	r6, [pc, #60]	@ (80056f4 <sbrk_aligned+0x40>)
 80056b8:	460c      	mov	r4, r1
 80056ba:	6831      	ldr	r1, [r6, #0]
 80056bc:	4605      	mov	r5, r0
 80056be:	b911      	cbnz	r1, 80056c6 <sbrk_aligned+0x12>
 80056c0:	f000 fcb6 	bl	8006030 <_sbrk_r>
 80056c4:	6030      	str	r0, [r6, #0]
 80056c6:	4621      	mov	r1, r4
 80056c8:	4628      	mov	r0, r5
 80056ca:	f000 fcb1 	bl	8006030 <_sbrk_r>
 80056ce:	1c43      	adds	r3, r0, #1
 80056d0:	d103      	bne.n	80056da <sbrk_aligned+0x26>
 80056d2:	f04f 34ff 	mov.w	r4, #4294967295
 80056d6:	4620      	mov	r0, r4
 80056d8:	bd70      	pop	{r4, r5, r6, pc}
 80056da:	1cc4      	adds	r4, r0, #3
 80056dc:	f024 0403 	bic.w	r4, r4, #3
 80056e0:	42a0      	cmp	r0, r4
 80056e2:	d0f8      	beq.n	80056d6 <sbrk_aligned+0x22>
 80056e4:	1a21      	subs	r1, r4, r0
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 fca2 	bl	8006030 <_sbrk_r>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d1f2      	bne.n	80056d6 <sbrk_aligned+0x22>
 80056f0:	e7ef      	b.n	80056d2 <sbrk_aligned+0x1e>
 80056f2:	bf00      	nop
 80056f4:	20000388 	.word	0x20000388

080056f8 <_malloc_r>:
 80056f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056fc:	1ccd      	adds	r5, r1, #3
 80056fe:	f025 0503 	bic.w	r5, r5, #3
 8005702:	3508      	adds	r5, #8
 8005704:	2d0c      	cmp	r5, #12
 8005706:	bf38      	it	cc
 8005708:	250c      	movcc	r5, #12
 800570a:	2d00      	cmp	r5, #0
 800570c:	4606      	mov	r6, r0
 800570e:	db01      	blt.n	8005714 <_malloc_r+0x1c>
 8005710:	42a9      	cmp	r1, r5
 8005712:	d904      	bls.n	800571e <_malloc_r+0x26>
 8005714:	230c      	movs	r3, #12
 8005716:	6033      	str	r3, [r6, #0]
 8005718:	2000      	movs	r0, #0
 800571a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800571e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057f4 <_malloc_r+0xfc>
 8005722:	f000 f869 	bl	80057f8 <__malloc_lock>
 8005726:	f8d8 3000 	ldr.w	r3, [r8]
 800572a:	461c      	mov	r4, r3
 800572c:	bb44      	cbnz	r4, 8005780 <_malloc_r+0x88>
 800572e:	4629      	mov	r1, r5
 8005730:	4630      	mov	r0, r6
 8005732:	f7ff ffbf 	bl	80056b4 <sbrk_aligned>
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	4604      	mov	r4, r0
 800573a:	d158      	bne.n	80057ee <_malloc_r+0xf6>
 800573c:	f8d8 4000 	ldr.w	r4, [r8]
 8005740:	4627      	mov	r7, r4
 8005742:	2f00      	cmp	r7, #0
 8005744:	d143      	bne.n	80057ce <_malloc_r+0xd6>
 8005746:	2c00      	cmp	r4, #0
 8005748:	d04b      	beq.n	80057e2 <_malloc_r+0xea>
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	4639      	mov	r1, r7
 800574e:	4630      	mov	r0, r6
 8005750:	eb04 0903 	add.w	r9, r4, r3
 8005754:	f000 fc6c 	bl	8006030 <_sbrk_r>
 8005758:	4581      	cmp	r9, r0
 800575a:	d142      	bne.n	80057e2 <_malloc_r+0xea>
 800575c:	6821      	ldr	r1, [r4, #0]
 800575e:	1a6d      	subs	r5, r5, r1
 8005760:	4629      	mov	r1, r5
 8005762:	4630      	mov	r0, r6
 8005764:	f7ff ffa6 	bl	80056b4 <sbrk_aligned>
 8005768:	3001      	adds	r0, #1
 800576a:	d03a      	beq.n	80057e2 <_malloc_r+0xea>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	442b      	add	r3, r5
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	f8d8 3000 	ldr.w	r3, [r8]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	bb62      	cbnz	r2, 80057d4 <_malloc_r+0xdc>
 800577a:	f8c8 7000 	str.w	r7, [r8]
 800577e:	e00f      	b.n	80057a0 <_malloc_r+0xa8>
 8005780:	6822      	ldr	r2, [r4, #0]
 8005782:	1b52      	subs	r2, r2, r5
 8005784:	d420      	bmi.n	80057c8 <_malloc_r+0xd0>
 8005786:	2a0b      	cmp	r2, #11
 8005788:	d917      	bls.n	80057ba <_malloc_r+0xc2>
 800578a:	1961      	adds	r1, r4, r5
 800578c:	42a3      	cmp	r3, r4
 800578e:	6025      	str	r5, [r4, #0]
 8005790:	bf18      	it	ne
 8005792:	6059      	strne	r1, [r3, #4]
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	bf08      	it	eq
 8005798:	f8c8 1000 	streq.w	r1, [r8]
 800579c:	5162      	str	r2, [r4, r5]
 800579e:	604b      	str	r3, [r1, #4]
 80057a0:	4630      	mov	r0, r6
 80057a2:	f000 f82f 	bl	8005804 <__malloc_unlock>
 80057a6:	f104 000b 	add.w	r0, r4, #11
 80057aa:	1d23      	adds	r3, r4, #4
 80057ac:	f020 0007 	bic.w	r0, r0, #7
 80057b0:	1ac2      	subs	r2, r0, r3
 80057b2:	bf1c      	itt	ne
 80057b4:	1a1b      	subne	r3, r3, r0
 80057b6:	50a3      	strne	r3, [r4, r2]
 80057b8:	e7af      	b.n	800571a <_malloc_r+0x22>
 80057ba:	6862      	ldr	r2, [r4, #4]
 80057bc:	42a3      	cmp	r3, r4
 80057be:	bf0c      	ite	eq
 80057c0:	f8c8 2000 	streq.w	r2, [r8]
 80057c4:	605a      	strne	r2, [r3, #4]
 80057c6:	e7eb      	b.n	80057a0 <_malloc_r+0xa8>
 80057c8:	4623      	mov	r3, r4
 80057ca:	6864      	ldr	r4, [r4, #4]
 80057cc:	e7ae      	b.n	800572c <_malloc_r+0x34>
 80057ce:	463c      	mov	r4, r7
 80057d0:	687f      	ldr	r7, [r7, #4]
 80057d2:	e7b6      	b.n	8005742 <_malloc_r+0x4a>
 80057d4:	461a      	mov	r2, r3
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	d1fb      	bne.n	80057d4 <_malloc_r+0xdc>
 80057dc:	2300      	movs	r3, #0
 80057de:	6053      	str	r3, [r2, #4]
 80057e0:	e7de      	b.n	80057a0 <_malloc_r+0xa8>
 80057e2:	230c      	movs	r3, #12
 80057e4:	6033      	str	r3, [r6, #0]
 80057e6:	4630      	mov	r0, r6
 80057e8:	f000 f80c 	bl	8005804 <__malloc_unlock>
 80057ec:	e794      	b.n	8005718 <_malloc_r+0x20>
 80057ee:	6005      	str	r5, [r0, #0]
 80057f0:	e7d6      	b.n	80057a0 <_malloc_r+0xa8>
 80057f2:	bf00      	nop
 80057f4:	2000038c 	.word	0x2000038c

080057f8 <__malloc_lock>:
 80057f8:	4801      	ldr	r0, [pc, #4]	@ (8005800 <__malloc_lock+0x8>)
 80057fa:	f7ff bf0e 	b.w	800561a <__retarget_lock_acquire_recursive>
 80057fe:	bf00      	nop
 8005800:	20000384 	.word	0x20000384

08005804 <__malloc_unlock>:
 8005804:	4801      	ldr	r0, [pc, #4]	@ (800580c <__malloc_unlock+0x8>)
 8005806:	f7ff bf09 	b.w	800561c <__retarget_lock_release_recursive>
 800580a:	bf00      	nop
 800580c:	20000384 	.word	0x20000384

08005810 <__sfputc_r>:
 8005810:	6893      	ldr	r3, [r2, #8]
 8005812:	3b01      	subs	r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	b410      	push	{r4}
 8005818:	6093      	str	r3, [r2, #8]
 800581a:	da08      	bge.n	800582e <__sfputc_r+0x1e>
 800581c:	6994      	ldr	r4, [r2, #24]
 800581e:	42a3      	cmp	r3, r4
 8005820:	db01      	blt.n	8005826 <__sfputc_r+0x16>
 8005822:	290a      	cmp	r1, #10
 8005824:	d103      	bne.n	800582e <__sfputc_r+0x1e>
 8005826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800582a:	f000 bb6d 	b.w	8005f08 <__swbuf_r>
 800582e:	6813      	ldr	r3, [r2, #0]
 8005830:	1c58      	adds	r0, r3, #1
 8005832:	6010      	str	r0, [r2, #0]
 8005834:	7019      	strb	r1, [r3, #0]
 8005836:	4608      	mov	r0, r1
 8005838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800583c:	4770      	bx	lr

0800583e <__sfputs_r>:
 800583e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005840:	4606      	mov	r6, r0
 8005842:	460f      	mov	r7, r1
 8005844:	4614      	mov	r4, r2
 8005846:	18d5      	adds	r5, r2, r3
 8005848:	42ac      	cmp	r4, r5
 800584a:	d101      	bne.n	8005850 <__sfputs_r+0x12>
 800584c:	2000      	movs	r0, #0
 800584e:	e007      	b.n	8005860 <__sfputs_r+0x22>
 8005850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005854:	463a      	mov	r2, r7
 8005856:	4630      	mov	r0, r6
 8005858:	f7ff ffda 	bl	8005810 <__sfputc_r>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d1f3      	bne.n	8005848 <__sfputs_r+0xa>
 8005860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005864 <_vfiprintf_r>:
 8005864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005868:	460d      	mov	r5, r1
 800586a:	b09d      	sub	sp, #116	@ 0x74
 800586c:	4614      	mov	r4, r2
 800586e:	4698      	mov	r8, r3
 8005870:	4606      	mov	r6, r0
 8005872:	b118      	cbz	r0, 800587c <_vfiprintf_r+0x18>
 8005874:	6a03      	ldr	r3, [r0, #32]
 8005876:	b90b      	cbnz	r3, 800587c <_vfiprintf_r+0x18>
 8005878:	f7ff fdca 	bl	8005410 <__sinit>
 800587c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800587e:	07d9      	lsls	r1, r3, #31
 8005880:	d405      	bmi.n	800588e <_vfiprintf_r+0x2a>
 8005882:	89ab      	ldrh	r3, [r5, #12]
 8005884:	059a      	lsls	r2, r3, #22
 8005886:	d402      	bmi.n	800588e <_vfiprintf_r+0x2a>
 8005888:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800588a:	f7ff fec6 	bl	800561a <__retarget_lock_acquire_recursive>
 800588e:	89ab      	ldrh	r3, [r5, #12]
 8005890:	071b      	lsls	r3, r3, #28
 8005892:	d501      	bpl.n	8005898 <_vfiprintf_r+0x34>
 8005894:	692b      	ldr	r3, [r5, #16]
 8005896:	b99b      	cbnz	r3, 80058c0 <_vfiprintf_r+0x5c>
 8005898:	4629      	mov	r1, r5
 800589a:	4630      	mov	r0, r6
 800589c:	f000 fb72 	bl	8005f84 <__swsetup_r>
 80058a0:	b170      	cbz	r0, 80058c0 <_vfiprintf_r+0x5c>
 80058a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058a4:	07dc      	lsls	r4, r3, #31
 80058a6:	d504      	bpl.n	80058b2 <_vfiprintf_r+0x4e>
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ac:	b01d      	add	sp, #116	@ 0x74
 80058ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b2:	89ab      	ldrh	r3, [r5, #12]
 80058b4:	0598      	lsls	r0, r3, #22
 80058b6:	d4f7      	bmi.n	80058a8 <_vfiprintf_r+0x44>
 80058b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058ba:	f7ff feaf 	bl	800561c <__retarget_lock_release_recursive>
 80058be:	e7f3      	b.n	80058a8 <_vfiprintf_r+0x44>
 80058c0:	2300      	movs	r3, #0
 80058c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c4:	2320      	movs	r3, #32
 80058c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80058ce:	2330      	movs	r3, #48	@ 0x30
 80058d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005a80 <_vfiprintf_r+0x21c>
 80058d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058d8:	f04f 0901 	mov.w	r9, #1
 80058dc:	4623      	mov	r3, r4
 80058de:	469a      	mov	sl, r3
 80058e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e4:	b10a      	cbz	r2, 80058ea <_vfiprintf_r+0x86>
 80058e6:	2a25      	cmp	r2, #37	@ 0x25
 80058e8:	d1f9      	bne.n	80058de <_vfiprintf_r+0x7a>
 80058ea:	ebba 0b04 	subs.w	fp, sl, r4
 80058ee:	d00b      	beq.n	8005908 <_vfiprintf_r+0xa4>
 80058f0:	465b      	mov	r3, fp
 80058f2:	4622      	mov	r2, r4
 80058f4:	4629      	mov	r1, r5
 80058f6:	4630      	mov	r0, r6
 80058f8:	f7ff ffa1 	bl	800583e <__sfputs_r>
 80058fc:	3001      	adds	r0, #1
 80058fe:	f000 80a7 	beq.w	8005a50 <_vfiprintf_r+0x1ec>
 8005902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005904:	445a      	add	r2, fp
 8005906:	9209      	str	r2, [sp, #36]	@ 0x24
 8005908:	f89a 3000 	ldrb.w	r3, [sl]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 809f 	beq.w	8005a50 <_vfiprintf_r+0x1ec>
 8005912:	2300      	movs	r3, #0
 8005914:	f04f 32ff 	mov.w	r2, #4294967295
 8005918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800591c:	f10a 0a01 	add.w	sl, sl, #1
 8005920:	9304      	str	r3, [sp, #16]
 8005922:	9307      	str	r3, [sp, #28]
 8005924:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005928:	931a      	str	r3, [sp, #104]	@ 0x68
 800592a:	4654      	mov	r4, sl
 800592c:	2205      	movs	r2, #5
 800592e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005932:	4853      	ldr	r0, [pc, #332]	@ (8005a80 <_vfiprintf_r+0x21c>)
 8005934:	f7fa fc4c 	bl	80001d0 <memchr>
 8005938:	9a04      	ldr	r2, [sp, #16]
 800593a:	b9d8      	cbnz	r0, 8005974 <_vfiprintf_r+0x110>
 800593c:	06d1      	lsls	r1, r2, #27
 800593e:	bf44      	itt	mi
 8005940:	2320      	movmi	r3, #32
 8005942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005946:	0713      	lsls	r3, r2, #28
 8005948:	bf44      	itt	mi
 800594a:	232b      	movmi	r3, #43	@ 0x2b
 800594c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005950:	f89a 3000 	ldrb.w	r3, [sl]
 8005954:	2b2a      	cmp	r3, #42	@ 0x2a
 8005956:	d015      	beq.n	8005984 <_vfiprintf_r+0x120>
 8005958:	9a07      	ldr	r2, [sp, #28]
 800595a:	4654      	mov	r4, sl
 800595c:	2000      	movs	r0, #0
 800595e:	f04f 0c0a 	mov.w	ip, #10
 8005962:	4621      	mov	r1, r4
 8005964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005968:	3b30      	subs	r3, #48	@ 0x30
 800596a:	2b09      	cmp	r3, #9
 800596c:	d94b      	bls.n	8005a06 <_vfiprintf_r+0x1a2>
 800596e:	b1b0      	cbz	r0, 800599e <_vfiprintf_r+0x13a>
 8005970:	9207      	str	r2, [sp, #28]
 8005972:	e014      	b.n	800599e <_vfiprintf_r+0x13a>
 8005974:	eba0 0308 	sub.w	r3, r0, r8
 8005978:	fa09 f303 	lsl.w	r3, r9, r3
 800597c:	4313      	orrs	r3, r2
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	46a2      	mov	sl, r4
 8005982:	e7d2      	b.n	800592a <_vfiprintf_r+0xc6>
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	1d19      	adds	r1, r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	9103      	str	r1, [sp, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	bfbb      	ittet	lt
 8005990:	425b      	neglt	r3, r3
 8005992:	f042 0202 	orrlt.w	r2, r2, #2
 8005996:	9307      	strge	r3, [sp, #28]
 8005998:	9307      	strlt	r3, [sp, #28]
 800599a:	bfb8      	it	lt
 800599c:	9204      	strlt	r2, [sp, #16]
 800599e:	7823      	ldrb	r3, [r4, #0]
 80059a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80059a2:	d10a      	bne.n	80059ba <_vfiprintf_r+0x156>
 80059a4:	7863      	ldrb	r3, [r4, #1]
 80059a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80059a8:	d132      	bne.n	8005a10 <_vfiprintf_r+0x1ac>
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	1d1a      	adds	r2, r3, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	9203      	str	r2, [sp, #12]
 80059b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059b6:	3402      	adds	r4, #2
 80059b8:	9305      	str	r3, [sp, #20]
 80059ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005a90 <_vfiprintf_r+0x22c>
 80059be:	7821      	ldrb	r1, [r4, #0]
 80059c0:	2203      	movs	r2, #3
 80059c2:	4650      	mov	r0, sl
 80059c4:	f7fa fc04 	bl	80001d0 <memchr>
 80059c8:	b138      	cbz	r0, 80059da <_vfiprintf_r+0x176>
 80059ca:	9b04      	ldr	r3, [sp, #16]
 80059cc:	eba0 000a 	sub.w	r0, r0, sl
 80059d0:	2240      	movs	r2, #64	@ 0x40
 80059d2:	4082      	lsls	r2, r0
 80059d4:	4313      	orrs	r3, r2
 80059d6:	3401      	adds	r4, #1
 80059d8:	9304      	str	r3, [sp, #16]
 80059da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059de:	4829      	ldr	r0, [pc, #164]	@ (8005a84 <_vfiprintf_r+0x220>)
 80059e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059e4:	2206      	movs	r2, #6
 80059e6:	f7fa fbf3 	bl	80001d0 <memchr>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d03f      	beq.n	8005a6e <_vfiprintf_r+0x20a>
 80059ee:	4b26      	ldr	r3, [pc, #152]	@ (8005a88 <_vfiprintf_r+0x224>)
 80059f0:	bb1b      	cbnz	r3, 8005a3a <_vfiprintf_r+0x1d6>
 80059f2:	9b03      	ldr	r3, [sp, #12]
 80059f4:	3307      	adds	r3, #7
 80059f6:	f023 0307 	bic.w	r3, r3, #7
 80059fa:	3308      	adds	r3, #8
 80059fc:	9303      	str	r3, [sp, #12]
 80059fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a00:	443b      	add	r3, r7
 8005a02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a04:	e76a      	b.n	80058dc <_vfiprintf_r+0x78>
 8005a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	e7a8      	b.n	8005962 <_vfiprintf_r+0xfe>
 8005a10:	2300      	movs	r3, #0
 8005a12:	3401      	adds	r4, #1
 8005a14:	9305      	str	r3, [sp, #20]
 8005a16:	4619      	mov	r1, r3
 8005a18:	f04f 0c0a 	mov.w	ip, #10
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a22:	3a30      	subs	r2, #48	@ 0x30
 8005a24:	2a09      	cmp	r2, #9
 8005a26:	d903      	bls.n	8005a30 <_vfiprintf_r+0x1cc>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0c6      	beq.n	80059ba <_vfiprintf_r+0x156>
 8005a2c:	9105      	str	r1, [sp, #20]
 8005a2e:	e7c4      	b.n	80059ba <_vfiprintf_r+0x156>
 8005a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a34:	4604      	mov	r4, r0
 8005a36:	2301      	movs	r3, #1
 8005a38:	e7f0      	b.n	8005a1c <_vfiprintf_r+0x1b8>
 8005a3a:	ab03      	add	r3, sp, #12
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	462a      	mov	r2, r5
 8005a40:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <_vfiprintf_r+0x228>)
 8005a42:	a904      	add	r1, sp, #16
 8005a44:	4630      	mov	r0, r6
 8005a46:	f3af 8000 	nop.w
 8005a4a:	4607      	mov	r7, r0
 8005a4c:	1c78      	adds	r0, r7, #1
 8005a4e:	d1d6      	bne.n	80059fe <_vfiprintf_r+0x19a>
 8005a50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a52:	07d9      	lsls	r1, r3, #31
 8005a54:	d405      	bmi.n	8005a62 <_vfiprintf_r+0x1fe>
 8005a56:	89ab      	ldrh	r3, [r5, #12]
 8005a58:	059a      	lsls	r2, r3, #22
 8005a5a:	d402      	bmi.n	8005a62 <_vfiprintf_r+0x1fe>
 8005a5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a5e:	f7ff fddd 	bl	800561c <__retarget_lock_release_recursive>
 8005a62:	89ab      	ldrh	r3, [r5, #12]
 8005a64:	065b      	lsls	r3, r3, #25
 8005a66:	f53f af1f 	bmi.w	80058a8 <_vfiprintf_r+0x44>
 8005a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a6c:	e71e      	b.n	80058ac <_vfiprintf_r+0x48>
 8005a6e:	ab03      	add	r3, sp, #12
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	462a      	mov	r2, r5
 8005a74:	4b05      	ldr	r3, [pc, #20]	@ (8005a8c <_vfiprintf_r+0x228>)
 8005a76:	a904      	add	r1, sp, #16
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f000 f879 	bl	8005b70 <_printf_i>
 8005a7e:	e7e4      	b.n	8005a4a <_vfiprintf_r+0x1e6>
 8005a80:	080061c8 	.word	0x080061c8
 8005a84:	080061d2 	.word	0x080061d2
 8005a88:	00000000 	.word	0x00000000
 8005a8c:	0800583f 	.word	0x0800583f
 8005a90:	080061ce 	.word	0x080061ce

08005a94 <_printf_common>:
 8005a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a98:	4616      	mov	r6, r2
 8005a9a:	4698      	mov	r8, r3
 8005a9c:	688a      	ldr	r2, [r1, #8]
 8005a9e:	690b      	ldr	r3, [r1, #16]
 8005aa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	bfb8      	it	lt
 8005aa8:	4613      	movlt	r3, r2
 8005aaa:	6033      	str	r3, [r6, #0]
 8005aac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ab0:	4607      	mov	r7, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	b10a      	cbz	r2, 8005aba <_printf_common+0x26>
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	6033      	str	r3, [r6, #0]
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	0699      	lsls	r1, r3, #26
 8005abe:	bf42      	ittt	mi
 8005ac0:	6833      	ldrmi	r3, [r6, #0]
 8005ac2:	3302      	addmi	r3, #2
 8005ac4:	6033      	strmi	r3, [r6, #0]
 8005ac6:	6825      	ldr	r5, [r4, #0]
 8005ac8:	f015 0506 	ands.w	r5, r5, #6
 8005acc:	d106      	bne.n	8005adc <_printf_common+0x48>
 8005ace:	f104 0a19 	add.w	sl, r4, #25
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	6832      	ldr	r2, [r6, #0]
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dc26      	bgt.n	8005b2a <_printf_common+0x96>
 8005adc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	3b00      	subs	r3, #0
 8005ae4:	bf18      	it	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	0692      	lsls	r2, r2, #26
 8005aea:	d42b      	bmi.n	8005b44 <_printf_common+0xb0>
 8005aec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005af0:	4641      	mov	r1, r8
 8005af2:	4638      	mov	r0, r7
 8005af4:	47c8      	blx	r9
 8005af6:	3001      	adds	r0, #1
 8005af8:	d01e      	beq.n	8005b38 <_printf_common+0xa4>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	6922      	ldr	r2, [r4, #16]
 8005afe:	f003 0306 	and.w	r3, r3, #6
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	bf02      	ittt	eq
 8005b06:	68e5      	ldreq	r5, [r4, #12]
 8005b08:	6833      	ldreq	r3, [r6, #0]
 8005b0a:	1aed      	subeq	r5, r5, r3
 8005b0c:	68a3      	ldr	r3, [r4, #8]
 8005b0e:	bf0c      	ite	eq
 8005b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b14:	2500      	movne	r5, #0
 8005b16:	4293      	cmp	r3, r2
 8005b18:	bfc4      	itt	gt
 8005b1a:	1a9b      	subgt	r3, r3, r2
 8005b1c:	18ed      	addgt	r5, r5, r3
 8005b1e:	2600      	movs	r6, #0
 8005b20:	341a      	adds	r4, #26
 8005b22:	42b5      	cmp	r5, r6
 8005b24:	d11a      	bne.n	8005b5c <_printf_common+0xc8>
 8005b26:	2000      	movs	r0, #0
 8005b28:	e008      	b.n	8005b3c <_printf_common+0xa8>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4652      	mov	r2, sl
 8005b2e:	4641      	mov	r1, r8
 8005b30:	4638      	mov	r0, r7
 8005b32:	47c8      	blx	r9
 8005b34:	3001      	adds	r0, #1
 8005b36:	d103      	bne.n	8005b40 <_printf_common+0xac>
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	3501      	adds	r5, #1
 8005b42:	e7c6      	b.n	8005ad2 <_printf_common+0x3e>
 8005b44:	18e1      	adds	r1, r4, r3
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	2030      	movs	r0, #48	@ 0x30
 8005b4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b4e:	4422      	add	r2, r4
 8005b50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b58:	3302      	adds	r3, #2
 8005b5a:	e7c7      	b.n	8005aec <_printf_common+0x58>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4622      	mov	r2, r4
 8005b60:	4641      	mov	r1, r8
 8005b62:	4638      	mov	r0, r7
 8005b64:	47c8      	blx	r9
 8005b66:	3001      	adds	r0, #1
 8005b68:	d0e6      	beq.n	8005b38 <_printf_common+0xa4>
 8005b6a:	3601      	adds	r6, #1
 8005b6c:	e7d9      	b.n	8005b22 <_printf_common+0x8e>
	...

08005b70 <_printf_i>:
 8005b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	7e0f      	ldrb	r7, [r1, #24]
 8005b76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b78:	2f78      	cmp	r7, #120	@ 0x78
 8005b7a:	4691      	mov	r9, r2
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	469a      	mov	sl, r3
 8005b82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b86:	d807      	bhi.n	8005b98 <_printf_i+0x28>
 8005b88:	2f62      	cmp	r7, #98	@ 0x62
 8005b8a:	d80a      	bhi.n	8005ba2 <_printf_i+0x32>
 8005b8c:	2f00      	cmp	r7, #0
 8005b8e:	f000 80d2 	beq.w	8005d36 <_printf_i+0x1c6>
 8005b92:	2f58      	cmp	r7, #88	@ 0x58
 8005b94:	f000 80b9 	beq.w	8005d0a <_printf_i+0x19a>
 8005b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ba0:	e03a      	b.n	8005c18 <_printf_i+0xa8>
 8005ba2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ba6:	2b15      	cmp	r3, #21
 8005ba8:	d8f6      	bhi.n	8005b98 <_printf_i+0x28>
 8005baa:	a101      	add	r1, pc, #4	@ (adr r1, 8005bb0 <_printf_i+0x40>)
 8005bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb0:	08005c09 	.word	0x08005c09
 8005bb4:	08005c1d 	.word	0x08005c1d
 8005bb8:	08005b99 	.word	0x08005b99
 8005bbc:	08005b99 	.word	0x08005b99
 8005bc0:	08005b99 	.word	0x08005b99
 8005bc4:	08005b99 	.word	0x08005b99
 8005bc8:	08005c1d 	.word	0x08005c1d
 8005bcc:	08005b99 	.word	0x08005b99
 8005bd0:	08005b99 	.word	0x08005b99
 8005bd4:	08005b99 	.word	0x08005b99
 8005bd8:	08005b99 	.word	0x08005b99
 8005bdc:	08005d1d 	.word	0x08005d1d
 8005be0:	08005c47 	.word	0x08005c47
 8005be4:	08005cd7 	.word	0x08005cd7
 8005be8:	08005b99 	.word	0x08005b99
 8005bec:	08005b99 	.word	0x08005b99
 8005bf0:	08005d3f 	.word	0x08005d3f
 8005bf4:	08005b99 	.word	0x08005b99
 8005bf8:	08005c47 	.word	0x08005c47
 8005bfc:	08005b99 	.word	0x08005b99
 8005c00:	08005b99 	.word	0x08005b99
 8005c04:	08005cdf 	.word	0x08005cdf
 8005c08:	6833      	ldr	r3, [r6, #0]
 8005c0a:	1d1a      	adds	r2, r3, #4
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6032      	str	r2, [r6, #0]
 8005c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e09d      	b.n	8005d58 <_printf_i+0x1e8>
 8005c1c:	6833      	ldr	r3, [r6, #0]
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	1d19      	adds	r1, r3, #4
 8005c22:	6031      	str	r1, [r6, #0]
 8005c24:	0606      	lsls	r6, r0, #24
 8005c26:	d501      	bpl.n	8005c2c <_printf_i+0xbc>
 8005c28:	681d      	ldr	r5, [r3, #0]
 8005c2a:	e003      	b.n	8005c34 <_printf_i+0xc4>
 8005c2c:	0645      	lsls	r5, r0, #25
 8005c2e:	d5fb      	bpl.n	8005c28 <_printf_i+0xb8>
 8005c30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c34:	2d00      	cmp	r5, #0
 8005c36:	da03      	bge.n	8005c40 <_printf_i+0xd0>
 8005c38:	232d      	movs	r3, #45	@ 0x2d
 8005c3a:	426d      	negs	r5, r5
 8005c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c40:	4859      	ldr	r0, [pc, #356]	@ (8005da8 <_printf_i+0x238>)
 8005c42:	230a      	movs	r3, #10
 8005c44:	e011      	b.n	8005c6a <_printf_i+0xfa>
 8005c46:	6821      	ldr	r1, [r4, #0]
 8005c48:	6833      	ldr	r3, [r6, #0]
 8005c4a:	0608      	lsls	r0, r1, #24
 8005c4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c50:	d402      	bmi.n	8005c58 <_printf_i+0xe8>
 8005c52:	0649      	lsls	r1, r1, #25
 8005c54:	bf48      	it	mi
 8005c56:	b2ad      	uxthmi	r5, r5
 8005c58:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c5a:	4853      	ldr	r0, [pc, #332]	@ (8005da8 <_printf_i+0x238>)
 8005c5c:	6033      	str	r3, [r6, #0]
 8005c5e:	bf14      	ite	ne
 8005c60:	230a      	movne	r3, #10
 8005c62:	2308      	moveq	r3, #8
 8005c64:	2100      	movs	r1, #0
 8005c66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c6a:	6866      	ldr	r6, [r4, #4]
 8005c6c:	60a6      	str	r6, [r4, #8]
 8005c6e:	2e00      	cmp	r6, #0
 8005c70:	bfa2      	ittt	ge
 8005c72:	6821      	ldrge	r1, [r4, #0]
 8005c74:	f021 0104 	bicge.w	r1, r1, #4
 8005c78:	6021      	strge	r1, [r4, #0]
 8005c7a:	b90d      	cbnz	r5, 8005c80 <_printf_i+0x110>
 8005c7c:	2e00      	cmp	r6, #0
 8005c7e:	d04b      	beq.n	8005d18 <_printf_i+0x1a8>
 8005c80:	4616      	mov	r6, r2
 8005c82:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c86:	fb03 5711 	mls	r7, r3, r1, r5
 8005c8a:	5dc7      	ldrb	r7, [r0, r7]
 8005c8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c90:	462f      	mov	r7, r5
 8005c92:	42bb      	cmp	r3, r7
 8005c94:	460d      	mov	r5, r1
 8005c96:	d9f4      	bls.n	8005c82 <_printf_i+0x112>
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d10b      	bne.n	8005cb4 <_printf_i+0x144>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	07df      	lsls	r7, r3, #31
 8005ca0:	d508      	bpl.n	8005cb4 <_printf_i+0x144>
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	6861      	ldr	r1, [r4, #4]
 8005ca6:	4299      	cmp	r1, r3
 8005ca8:	bfde      	ittt	le
 8005caa:	2330      	movle	r3, #48	@ 0x30
 8005cac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cb4:	1b92      	subs	r2, r2, r6
 8005cb6:	6122      	str	r2, [r4, #16]
 8005cb8:	f8cd a000 	str.w	sl, [sp]
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	aa03      	add	r2, sp, #12
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	f7ff fee6 	bl	8005a94 <_printf_common>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d14a      	bne.n	8005d62 <_printf_i+0x1f2>
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	b004      	add	sp, #16
 8005cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	f043 0320 	orr.w	r3, r3, #32
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	4833      	ldr	r0, [pc, #204]	@ (8005dac <_printf_i+0x23c>)
 8005ce0:	2778      	movs	r7, #120	@ 0x78
 8005ce2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	6831      	ldr	r1, [r6, #0]
 8005cea:	061f      	lsls	r7, r3, #24
 8005cec:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cf0:	d402      	bmi.n	8005cf8 <_printf_i+0x188>
 8005cf2:	065f      	lsls	r7, r3, #25
 8005cf4:	bf48      	it	mi
 8005cf6:	b2ad      	uxthmi	r5, r5
 8005cf8:	6031      	str	r1, [r6, #0]
 8005cfa:	07d9      	lsls	r1, r3, #31
 8005cfc:	bf44      	itt	mi
 8005cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8005d02:	6023      	strmi	r3, [r4, #0]
 8005d04:	b11d      	cbz	r5, 8005d0e <_printf_i+0x19e>
 8005d06:	2310      	movs	r3, #16
 8005d08:	e7ac      	b.n	8005c64 <_printf_i+0xf4>
 8005d0a:	4827      	ldr	r0, [pc, #156]	@ (8005da8 <_printf_i+0x238>)
 8005d0c:	e7e9      	b.n	8005ce2 <_printf_i+0x172>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	f023 0320 	bic.w	r3, r3, #32
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	e7f6      	b.n	8005d06 <_printf_i+0x196>
 8005d18:	4616      	mov	r6, r2
 8005d1a:	e7bd      	b.n	8005c98 <_printf_i+0x128>
 8005d1c:	6833      	ldr	r3, [r6, #0]
 8005d1e:	6825      	ldr	r5, [r4, #0]
 8005d20:	6961      	ldr	r1, [r4, #20]
 8005d22:	1d18      	adds	r0, r3, #4
 8005d24:	6030      	str	r0, [r6, #0]
 8005d26:	062e      	lsls	r6, r5, #24
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	d501      	bpl.n	8005d30 <_printf_i+0x1c0>
 8005d2c:	6019      	str	r1, [r3, #0]
 8005d2e:	e002      	b.n	8005d36 <_printf_i+0x1c6>
 8005d30:	0668      	lsls	r0, r5, #25
 8005d32:	d5fb      	bpl.n	8005d2c <_printf_i+0x1bc>
 8005d34:	8019      	strh	r1, [r3, #0]
 8005d36:	2300      	movs	r3, #0
 8005d38:	6123      	str	r3, [r4, #16]
 8005d3a:	4616      	mov	r6, r2
 8005d3c:	e7bc      	b.n	8005cb8 <_printf_i+0x148>
 8005d3e:	6833      	ldr	r3, [r6, #0]
 8005d40:	1d1a      	adds	r2, r3, #4
 8005d42:	6032      	str	r2, [r6, #0]
 8005d44:	681e      	ldr	r6, [r3, #0]
 8005d46:	6862      	ldr	r2, [r4, #4]
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7fa fa40 	bl	80001d0 <memchr>
 8005d50:	b108      	cbz	r0, 8005d56 <_printf_i+0x1e6>
 8005d52:	1b80      	subs	r0, r0, r6
 8005d54:	6060      	str	r0, [r4, #4]
 8005d56:	6863      	ldr	r3, [r4, #4]
 8005d58:	6123      	str	r3, [r4, #16]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d60:	e7aa      	b.n	8005cb8 <_printf_i+0x148>
 8005d62:	6923      	ldr	r3, [r4, #16]
 8005d64:	4632      	mov	r2, r6
 8005d66:	4649      	mov	r1, r9
 8005d68:	4640      	mov	r0, r8
 8005d6a:	47d0      	blx	sl
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d0ad      	beq.n	8005ccc <_printf_i+0x15c>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	079b      	lsls	r3, r3, #30
 8005d74:	d413      	bmi.n	8005d9e <_printf_i+0x22e>
 8005d76:	68e0      	ldr	r0, [r4, #12]
 8005d78:	9b03      	ldr	r3, [sp, #12]
 8005d7a:	4298      	cmp	r0, r3
 8005d7c:	bfb8      	it	lt
 8005d7e:	4618      	movlt	r0, r3
 8005d80:	e7a6      	b.n	8005cd0 <_printf_i+0x160>
 8005d82:	2301      	movs	r3, #1
 8005d84:	4632      	mov	r2, r6
 8005d86:	4649      	mov	r1, r9
 8005d88:	4640      	mov	r0, r8
 8005d8a:	47d0      	blx	sl
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d09d      	beq.n	8005ccc <_printf_i+0x15c>
 8005d90:	3501      	adds	r5, #1
 8005d92:	68e3      	ldr	r3, [r4, #12]
 8005d94:	9903      	ldr	r1, [sp, #12]
 8005d96:	1a5b      	subs	r3, r3, r1
 8005d98:	42ab      	cmp	r3, r5
 8005d9a:	dcf2      	bgt.n	8005d82 <_printf_i+0x212>
 8005d9c:	e7eb      	b.n	8005d76 <_printf_i+0x206>
 8005d9e:	2500      	movs	r5, #0
 8005da0:	f104 0619 	add.w	r6, r4, #25
 8005da4:	e7f5      	b.n	8005d92 <_printf_i+0x222>
 8005da6:	bf00      	nop
 8005da8:	080061d9 	.word	0x080061d9
 8005dac:	080061ea 	.word	0x080061ea

08005db0 <__sflush_r>:
 8005db0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db8:	0716      	lsls	r6, r2, #28
 8005dba:	4605      	mov	r5, r0
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	d454      	bmi.n	8005e6a <__sflush_r+0xba>
 8005dc0:	684b      	ldr	r3, [r1, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	dc02      	bgt.n	8005dcc <__sflush_r+0x1c>
 8005dc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	dd48      	ble.n	8005e5e <__sflush_r+0xae>
 8005dcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dce:	2e00      	cmp	r6, #0
 8005dd0:	d045      	beq.n	8005e5e <__sflush_r+0xae>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005dd8:	682f      	ldr	r7, [r5, #0]
 8005dda:	6a21      	ldr	r1, [r4, #32]
 8005ddc:	602b      	str	r3, [r5, #0]
 8005dde:	d030      	beq.n	8005e42 <__sflush_r+0x92>
 8005de0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	0759      	lsls	r1, r3, #29
 8005de6:	d505      	bpl.n	8005df4 <__sflush_r+0x44>
 8005de8:	6863      	ldr	r3, [r4, #4]
 8005dea:	1ad2      	subs	r2, r2, r3
 8005dec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005dee:	b10b      	cbz	r3, 8005df4 <__sflush_r+0x44>
 8005df0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005df2:	1ad2      	subs	r2, r2, r3
 8005df4:	2300      	movs	r3, #0
 8005df6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005df8:	6a21      	ldr	r1, [r4, #32]
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b0      	blx	r6
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	d106      	bne.n	8005e12 <__sflush_r+0x62>
 8005e04:	6829      	ldr	r1, [r5, #0]
 8005e06:	291d      	cmp	r1, #29
 8005e08:	d82b      	bhi.n	8005e62 <__sflush_r+0xb2>
 8005e0a:	4a2a      	ldr	r2, [pc, #168]	@ (8005eb4 <__sflush_r+0x104>)
 8005e0c:	410a      	asrs	r2, r1
 8005e0e:	07d6      	lsls	r6, r2, #31
 8005e10:	d427      	bmi.n	8005e62 <__sflush_r+0xb2>
 8005e12:	2200      	movs	r2, #0
 8005e14:	6062      	str	r2, [r4, #4]
 8005e16:	04d9      	lsls	r1, r3, #19
 8005e18:	6922      	ldr	r2, [r4, #16]
 8005e1a:	6022      	str	r2, [r4, #0]
 8005e1c:	d504      	bpl.n	8005e28 <__sflush_r+0x78>
 8005e1e:	1c42      	adds	r2, r0, #1
 8005e20:	d101      	bne.n	8005e26 <__sflush_r+0x76>
 8005e22:	682b      	ldr	r3, [r5, #0]
 8005e24:	b903      	cbnz	r3, 8005e28 <__sflush_r+0x78>
 8005e26:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e2a:	602f      	str	r7, [r5, #0]
 8005e2c:	b1b9      	cbz	r1, 8005e5e <__sflush_r+0xae>
 8005e2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e32:	4299      	cmp	r1, r3
 8005e34:	d002      	beq.n	8005e3c <__sflush_r+0x8c>
 8005e36:	4628      	mov	r0, r5
 8005e38:	f7ff fbf2 	bl	8005620 <_free_r>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e40:	e00d      	b.n	8005e5e <__sflush_r+0xae>
 8005e42:	2301      	movs	r3, #1
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b0      	blx	r6
 8005e48:	4602      	mov	r2, r0
 8005e4a:	1c50      	adds	r0, r2, #1
 8005e4c:	d1c9      	bne.n	8005de2 <__sflush_r+0x32>
 8005e4e:	682b      	ldr	r3, [r5, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0c6      	beq.n	8005de2 <__sflush_r+0x32>
 8005e54:	2b1d      	cmp	r3, #29
 8005e56:	d001      	beq.n	8005e5c <__sflush_r+0xac>
 8005e58:	2b16      	cmp	r3, #22
 8005e5a:	d11e      	bne.n	8005e9a <__sflush_r+0xea>
 8005e5c:	602f      	str	r7, [r5, #0]
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e022      	b.n	8005ea8 <__sflush_r+0xf8>
 8005e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e66:	b21b      	sxth	r3, r3
 8005e68:	e01b      	b.n	8005ea2 <__sflush_r+0xf2>
 8005e6a:	690f      	ldr	r7, [r1, #16]
 8005e6c:	2f00      	cmp	r7, #0
 8005e6e:	d0f6      	beq.n	8005e5e <__sflush_r+0xae>
 8005e70:	0793      	lsls	r3, r2, #30
 8005e72:	680e      	ldr	r6, [r1, #0]
 8005e74:	bf08      	it	eq
 8005e76:	694b      	ldreq	r3, [r1, #20]
 8005e78:	600f      	str	r7, [r1, #0]
 8005e7a:	bf18      	it	ne
 8005e7c:	2300      	movne	r3, #0
 8005e7e:	eba6 0807 	sub.w	r8, r6, r7
 8005e82:	608b      	str	r3, [r1, #8]
 8005e84:	f1b8 0f00 	cmp.w	r8, #0
 8005e88:	dde9      	ble.n	8005e5e <__sflush_r+0xae>
 8005e8a:	6a21      	ldr	r1, [r4, #32]
 8005e8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e8e:	4643      	mov	r3, r8
 8005e90:	463a      	mov	r2, r7
 8005e92:	4628      	mov	r0, r5
 8005e94:	47b0      	blx	r6
 8005e96:	2800      	cmp	r0, #0
 8005e98:	dc08      	bgt.n	8005eac <__sflush_r+0xfc>
 8005e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ea2:	81a3      	strh	r3, [r4, #12]
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eac:	4407      	add	r7, r0
 8005eae:	eba8 0800 	sub.w	r8, r8, r0
 8005eb2:	e7e7      	b.n	8005e84 <__sflush_r+0xd4>
 8005eb4:	dfbffffe 	.word	0xdfbffffe

08005eb8 <_fflush_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	690b      	ldr	r3, [r1, #16]
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	b913      	cbnz	r3, 8005ec8 <_fflush_r+0x10>
 8005ec2:	2500      	movs	r5, #0
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	b118      	cbz	r0, 8005ed2 <_fflush_r+0x1a>
 8005eca:	6a03      	ldr	r3, [r0, #32]
 8005ecc:	b90b      	cbnz	r3, 8005ed2 <_fflush_r+0x1a>
 8005ece:	f7ff fa9f 	bl	8005410 <__sinit>
 8005ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f3      	beq.n	8005ec2 <_fflush_r+0xa>
 8005eda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005edc:	07d0      	lsls	r0, r2, #31
 8005ede:	d404      	bmi.n	8005eea <_fflush_r+0x32>
 8005ee0:	0599      	lsls	r1, r3, #22
 8005ee2:	d402      	bmi.n	8005eea <_fflush_r+0x32>
 8005ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ee6:	f7ff fb98 	bl	800561a <__retarget_lock_acquire_recursive>
 8005eea:	4628      	mov	r0, r5
 8005eec:	4621      	mov	r1, r4
 8005eee:	f7ff ff5f 	bl	8005db0 <__sflush_r>
 8005ef2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ef4:	07da      	lsls	r2, r3, #31
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	d4e4      	bmi.n	8005ec4 <_fflush_r+0xc>
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	059b      	lsls	r3, r3, #22
 8005efe:	d4e1      	bmi.n	8005ec4 <_fflush_r+0xc>
 8005f00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f02:	f7ff fb8b 	bl	800561c <__retarget_lock_release_recursive>
 8005f06:	e7dd      	b.n	8005ec4 <_fflush_r+0xc>

08005f08 <__swbuf_r>:
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0a:	460e      	mov	r6, r1
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	4605      	mov	r5, r0
 8005f10:	b118      	cbz	r0, 8005f1a <__swbuf_r+0x12>
 8005f12:	6a03      	ldr	r3, [r0, #32]
 8005f14:	b90b      	cbnz	r3, 8005f1a <__swbuf_r+0x12>
 8005f16:	f7ff fa7b 	bl	8005410 <__sinit>
 8005f1a:	69a3      	ldr	r3, [r4, #24]
 8005f1c:	60a3      	str	r3, [r4, #8]
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	071a      	lsls	r2, r3, #28
 8005f22:	d501      	bpl.n	8005f28 <__swbuf_r+0x20>
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	b943      	cbnz	r3, 8005f3a <__swbuf_r+0x32>
 8005f28:	4621      	mov	r1, r4
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 f82a 	bl	8005f84 <__swsetup_r>
 8005f30:	b118      	cbz	r0, 8005f3a <__swbuf_r+0x32>
 8005f32:	f04f 37ff 	mov.w	r7, #4294967295
 8005f36:	4638      	mov	r0, r7
 8005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	6922      	ldr	r2, [r4, #16]
 8005f3e:	1a98      	subs	r0, r3, r2
 8005f40:	6963      	ldr	r3, [r4, #20]
 8005f42:	b2f6      	uxtb	r6, r6
 8005f44:	4283      	cmp	r3, r0
 8005f46:	4637      	mov	r7, r6
 8005f48:	dc05      	bgt.n	8005f56 <__swbuf_r+0x4e>
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f7ff ffb3 	bl	8005eb8 <_fflush_r>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d1ed      	bne.n	8005f32 <__swbuf_r+0x2a>
 8005f56:	68a3      	ldr	r3, [r4, #8]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	60a3      	str	r3, [r4, #8]
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	6022      	str	r2, [r4, #0]
 8005f62:	701e      	strb	r6, [r3, #0]
 8005f64:	6962      	ldr	r2, [r4, #20]
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d004      	beq.n	8005f76 <__swbuf_r+0x6e>
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	07db      	lsls	r3, r3, #31
 8005f70:	d5e1      	bpl.n	8005f36 <__swbuf_r+0x2e>
 8005f72:	2e0a      	cmp	r6, #10
 8005f74:	d1df      	bne.n	8005f36 <__swbuf_r+0x2e>
 8005f76:	4621      	mov	r1, r4
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f7ff ff9d 	bl	8005eb8 <_fflush_r>
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d0d9      	beq.n	8005f36 <__swbuf_r+0x2e>
 8005f82:	e7d6      	b.n	8005f32 <__swbuf_r+0x2a>

08005f84 <__swsetup_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4b29      	ldr	r3, [pc, #164]	@ (800602c <__swsetup_r+0xa8>)
 8005f88:	4605      	mov	r5, r0
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	b118      	cbz	r0, 8005f98 <__swsetup_r+0x14>
 8005f90:	6a03      	ldr	r3, [r0, #32]
 8005f92:	b90b      	cbnz	r3, 8005f98 <__swsetup_r+0x14>
 8005f94:	f7ff fa3c 	bl	8005410 <__sinit>
 8005f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f9c:	0719      	lsls	r1, r3, #28
 8005f9e:	d422      	bmi.n	8005fe6 <__swsetup_r+0x62>
 8005fa0:	06da      	lsls	r2, r3, #27
 8005fa2:	d407      	bmi.n	8005fb4 <__swsetup_r+0x30>
 8005fa4:	2209      	movs	r2, #9
 8005fa6:	602a      	str	r2, [r5, #0]
 8005fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fac:	81a3      	strh	r3, [r4, #12]
 8005fae:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb2:	e033      	b.n	800601c <__swsetup_r+0x98>
 8005fb4:	0758      	lsls	r0, r3, #29
 8005fb6:	d512      	bpl.n	8005fde <__swsetup_r+0x5a>
 8005fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fba:	b141      	cbz	r1, 8005fce <__swsetup_r+0x4a>
 8005fbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	d002      	beq.n	8005fca <__swsetup_r+0x46>
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f7ff fb2b 	bl	8005620 <_free_r>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6063      	str	r3, [r4, #4]
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	f043 0308 	orr.w	r3, r3, #8
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	6923      	ldr	r3, [r4, #16]
 8005fe8:	b94b      	cbnz	r3, 8005ffe <__swsetup_r+0x7a>
 8005fea:	89a3      	ldrh	r3, [r4, #12]
 8005fec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ff4:	d003      	beq.n	8005ffe <__swsetup_r+0x7a>
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	f000 f84f 	bl	800609c <__smakebuf_r>
 8005ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006002:	f013 0201 	ands.w	r2, r3, #1
 8006006:	d00a      	beq.n	800601e <__swsetup_r+0x9a>
 8006008:	2200      	movs	r2, #0
 800600a:	60a2      	str	r2, [r4, #8]
 800600c:	6962      	ldr	r2, [r4, #20]
 800600e:	4252      	negs	r2, r2
 8006010:	61a2      	str	r2, [r4, #24]
 8006012:	6922      	ldr	r2, [r4, #16]
 8006014:	b942      	cbnz	r2, 8006028 <__swsetup_r+0xa4>
 8006016:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800601a:	d1c5      	bne.n	8005fa8 <__swsetup_r+0x24>
 800601c:	bd38      	pop	{r3, r4, r5, pc}
 800601e:	0799      	lsls	r1, r3, #30
 8006020:	bf58      	it	pl
 8006022:	6962      	ldrpl	r2, [r4, #20]
 8006024:	60a2      	str	r2, [r4, #8]
 8006026:	e7f4      	b.n	8006012 <__swsetup_r+0x8e>
 8006028:	2000      	movs	r0, #0
 800602a:	e7f7      	b.n	800601c <__swsetup_r+0x98>
 800602c:	20000018 	.word	0x20000018

08006030 <_sbrk_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4d06      	ldr	r5, [pc, #24]	@ (800604c <_sbrk_r+0x1c>)
 8006034:	2300      	movs	r3, #0
 8006036:	4604      	mov	r4, r0
 8006038:	4608      	mov	r0, r1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	f7fa fffa 	bl	8001034 <_sbrk>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_sbrk_r+0x1a>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_sbrk_r+0x1a>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	20000380 	.word	0x20000380

08006050 <__swhatbuf_r>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	460c      	mov	r4, r1
 8006054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006058:	2900      	cmp	r1, #0
 800605a:	b096      	sub	sp, #88	@ 0x58
 800605c:	4615      	mov	r5, r2
 800605e:	461e      	mov	r6, r3
 8006060:	da0d      	bge.n	800607e <__swhatbuf_r+0x2e>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	bf14      	ite	ne
 800606e:	2340      	movne	r3, #64	@ 0x40
 8006070:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006074:	2000      	movs	r0, #0
 8006076:	6031      	str	r1, [r6, #0]
 8006078:	602b      	str	r3, [r5, #0]
 800607a:	b016      	add	sp, #88	@ 0x58
 800607c:	bd70      	pop	{r4, r5, r6, pc}
 800607e:	466a      	mov	r2, sp
 8006080:	f000 f848 	bl	8006114 <_fstat_r>
 8006084:	2800      	cmp	r0, #0
 8006086:	dbec      	blt.n	8006062 <__swhatbuf_r+0x12>
 8006088:	9901      	ldr	r1, [sp, #4]
 800608a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800608e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006092:	4259      	negs	r1, r3
 8006094:	4159      	adcs	r1, r3
 8006096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800609a:	e7eb      	b.n	8006074 <__swhatbuf_r+0x24>

0800609c <__smakebuf_r>:
 800609c:	898b      	ldrh	r3, [r1, #12]
 800609e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060a0:	079d      	lsls	r5, r3, #30
 80060a2:	4606      	mov	r6, r0
 80060a4:	460c      	mov	r4, r1
 80060a6:	d507      	bpl.n	80060b8 <__smakebuf_r+0x1c>
 80060a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	6123      	str	r3, [r4, #16]
 80060b0:	2301      	movs	r3, #1
 80060b2:	6163      	str	r3, [r4, #20]
 80060b4:	b003      	add	sp, #12
 80060b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b8:	ab01      	add	r3, sp, #4
 80060ba:	466a      	mov	r2, sp
 80060bc:	f7ff ffc8 	bl	8006050 <__swhatbuf_r>
 80060c0:	9f00      	ldr	r7, [sp, #0]
 80060c2:	4605      	mov	r5, r0
 80060c4:	4639      	mov	r1, r7
 80060c6:	4630      	mov	r0, r6
 80060c8:	f7ff fb16 	bl	80056f8 <_malloc_r>
 80060cc:	b948      	cbnz	r0, 80060e2 <__smakebuf_r+0x46>
 80060ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d2:	059a      	lsls	r2, r3, #22
 80060d4:	d4ee      	bmi.n	80060b4 <__smakebuf_r+0x18>
 80060d6:	f023 0303 	bic.w	r3, r3, #3
 80060da:	f043 0302 	orr.w	r3, r3, #2
 80060de:	81a3      	strh	r3, [r4, #12]
 80060e0:	e7e2      	b.n	80060a8 <__smakebuf_r+0xc>
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	6020      	str	r0, [r4, #0]
 80060e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ea:	81a3      	strh	r3, [r4, #12]
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80060f2:	b15b      	cbz	r3, 800610c <__smakebuf_r+0x70>
 80060f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060f8:	4630      	mov	r0, r6
 80060fa:	f000 f81d 	bl	8006138 <_isatty_r>
 80060fe:	b128      	cbz	r0, 800610c <__smakebuf_r+0x70>
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	81a3      	strh	r3, [r4, #12]
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	431d      	orrs	r5, r3
 8006110:	81a5      	strh	r5, [r4, #12]
 8006112:	e7cf      	b.n	80060b4 <__smakebuf_r+0x18>

08006114 <_fstat_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d07      	ldr	r5, [pc, #28]	@ (8006134 <_fstat_r+0x20>)
 8006118:	2300      	movs	r3, #0
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	4611      	mov	r1, r2
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	f7fa ff5e 	bl	8000fe2 <_fstat>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	d102      	bne.n	8006130 <_fstat_r+0x1c>
 800612a:	682b      	ldr	r3, [r5, #0]
 800612c:	b103      	cbz	r3, 8006130 <_fstat_r+0x1c>
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	bd38      	pop	{r3, r4, r5, pc}
 8006132:	bf00      	nop
 8006134:	20000380 	.word	0x20000380

08006138 <_isatty_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d06      	ldr	r5, [pc, #24]	@ (8006154 <_isatty_r+0x1c>)
 800613c:	2300      	movs	r3, #0
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	f7fa ff5d 	bl	8001002 <_isatty>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_isatty_r+0x1a>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_isatty_r+0x1a>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	20000380 	.word	0x20000380

08006158 <_init>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	bf00      	nop
 800615c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615e:	bc08      	pop	{r3}
 8006160:	469e      	mov	lr, r3
 8006162:	4770      	bx	lr

08006164 <_fini>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	bf00      	nop
 8006168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616a:	bc08      	pop	{r3}
 800616c:	469e      	mov	lr, r3
 800616e:	4770      	bx	lr
